<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Madingley</name>
    </assembly>
    <members>
        <member name="T:Madingley.Activity">
            <summary>
            Calculates the relative activity rate of a cohort
            </summary>
        </member>
        <member name="F:Madingley.Activity.WarmingTolerance">
            <summary>
            The distance of the maximum critical temperature from the ambient temperature
            </summary>
        </member>
        <member name="F:Madingley.Activity.ThermalSafetyMargin">
            <summary>
            Distance of the optimal performance temperature from the ambient temperature
            </summary>
        </member>
        <member name="F:Madingley.Activity.Topt">
            <summary>
            The optimal performance temperature
            </summary>
        </member>
        <member name="F:Madingley.Activity.CTmax">
            <summary>
            The maximum critical temperature
            </summary>
        </member>
        <member name="F:Madingley.Activity.CTmin">
            <summary>
            The minimum critical temperature
            </summary>
        </member>
        <member name="F:Madingley.Activity.AmbientTemp">
            <summary>
            The ambient temperature
            </summary>
        </member>
        <member name="F:Madingley.Activity.DTR">
            <summary>
            The diurnal temperature range
            </summary>
        </member>
        <member name="F:Madingley.Activity.TerrestrialWarmingToleranceIntercept">
            <summary>
            Intercept of the linear relationship between warming tolerance of terrestrial ectotherms and annual temperature variability
            </summary>
        </member>
        <member name="F:Madingley.Activity.TerrestrialWarmingToleranceSlope">
            <summary>
            Slope of the linear relationship between warming tolerance of terrestrial ectotherms and annual temperature variability
            </summary>
        </member>
        <member name="F:Madingley.Activity.TerrestrialTSMIntercept">
            <summary>
            Intercept of the linear relationship between terrestrial safety margin of terrestrial ectotherms and annual temperature variability
            </summary>
        </member>
        <member name="F:Madingley.Activity.TerrestrialTSMSlope">
            <summary>
            Slope of the linear relationship between terrestrial safety margin of terrestrial ectotherms and annual temperature variability
            </summary>
        </member>
        <member name="F:Madingley.Activity.MarineUpperToleranceIntercept">
            <summary>
            Intercept of the linear relationship between upper critical temperature limit of marine ectotherms and latitude
            </summary>
        </member>
        <member name="F:Madingley.Activity.MarineUpperToleranceSlope">
            <summary>
            Slope of the linear relationship between upper critical temperature limit of marine ectotherms and latitude
            </summary>
        </member>
        <member name="F:Madingley.Activity.MarineRangeIntercept">
            <summary>
            Intercept of the linear relationship between critical temperature range of marine ectotherms and latitude
            </summary>
        </member>
        <member name="F:Madingley.Activity.MarineRangeSlope">
            <summary>
            Slope of the linear relationship between upper critical temperature limit of marine ectotherms and latitude
            </summary>
        </member>
        <member name="M:Madingley.Activity.#ctor">
            <summary>
            Constructor for the Activity class: assigns parameter values
            </summary>
        </member>
        <member name="M:Madingley.Activity.InitialiseActivityParameters">
            <summary>
            Initialise parameters related to the activity of cohorts
            </summary>
        </member>
        <member name="M:Madingley.Activity.WriteOutParameterValues(System.IO.StreamWriter)">
            <summary>
            Write out the values of the parameters to an output file
            </summary>
            <param name="sw">A streamwriter object to write the parameter values to</param>
        </member>
        <member name="M:Madingley.Activity.AssignProportionTimeActive(Madingley.Cohort,System.Collections.Generic.SortedList{System.String,System.Double[]},Madingley.FunctionalGroupDefinitions,System.UInt32,System.UInt32)">
            <summary>
            Calculate the proportion of time for which this cohort could be active and assign it to the cohort's properties
            </summary>
            <param name="actingCohort">The Cohort for which proportion of time active is being calculated</param>
            <param name="cellEnvironment">The environmental information for current grid cell</param>
            <param name="madingleyCohortDefinitions">Functional group definitions and code to interrogate the cohorts in current grid cell</param>
            <param name="currentTimestep">Current timestep index</param>
            <param name="currentMonth">Current month</param>
        </member>
        <member name="M:Madingley.Activity.CalculateProportionTimeSuitableTerrestrial(System.Collections.Generic.SortedList{System.String,System.Double[]},System.UInt32,System.Boolean)">
            <summary>
            Calculate the proportion of each timestep for which this cohort is active
            For ectotherms: is a function of the critical max and min temperatures for this ectotherm cohort and also the ambient temperature and diurnal variation in this cell
            Assumes that the diurnal temperature range is symmetrical around the monthly mean temperature
            Alse assumes that the diurnal temperature profile is approximated by a sinusoidal time-series
            Source: Deutsch et al (2008), Impacts of climate warming on terrestrial ecototherms across latitude, PNAS.
            </summary>
            <param name="cellEnvironment">The environment for this grid cell</param>
            <param name="currentMonth">Currnent month in the model</param>
            <param name="endotherm">Boolean indicating if cohort is endotherm or ectotherm (true if endotherm)</param>
            <returns>The proportion of the timestep for which this cohort could be active</returns>
        </member>
        <member name="M:Madingley.Activity.CalculateProportionTimeSuitableMarine(System.Collections.Generic.SortedList{System.String,System.Double[]},System.UInt32,System.Boolean)">
            <summary>
            Calculate the proportion of each timestep for which this cohort is active
            For ectotherms: Is a function of the critical max and min temperatures for this ectotherm cohort and also the ambient temperature and diurnal variation in this cell
            Assumes that the diurnal temperature range is symmetrical around the monthly mean temperature
            Alse assumes that the diurnal temperature profile is approximated by a sinusoidal time-series
            Source: Sunday et al (2010), Global analysis of thermal tolerance and latitude in ectotherms, Proc R Soc B.
            </summary>
            <param name="cellEnvironment">The environment for this grid cell</param>
            <param name="currentMonth">Currnent month in the model</param>
            <param name="endotherm">Boolean indicating if cohort is endotherm or ectotherm (true if endotherm)</param>
            <returns>The proportion of the timestep for which this cohort could be active</returns>
        </member>
        <member name="M:Madingley.Activity.ProportionDaySuitable">
             <summary>
             Calculate the proportion of the current timestep that this cohort is active for
             Is a function of the critical max and min temperatures for this ectotherm cohort and also the ambient temperature and diurnal variation in this cell
             Assumes that the diurnal temperature range is symmetrical around the monthly mean temperature
             Alse assumes that the diurnal temperature profile is approximated by a sinusoidal time-series
             Sin of form:
            T(h)=Ambient+ [DTR*(0.5*sin(omega*(h-6)))]
             </summary>
             <returns>The proportion of the day that temperatures are between CTmin and CTmax</returns>
        </member>
        <member name="T:Madingley.CommonDispersalMethods">
            <summary>
            An abstract class to implement common methods that are used across all dispersal classes.
            </summary>
        </member>
        <member name="F:Madingley.CommonDispersalMethods.RandomNumberGenerator">
            <summary>
            An instance of the simple random number generator class
            </summary>
        </member>
        <member name="M:Madingley.CommonDispersalMethods.CheckForDispersal(System.Double)">
            <summary>
            Generate a random value to see if a cohort disperses
            </summary>
            <param name="dispersalProbability">The probability of dispersal</param>
            <returns>Returns either the random value, if it less than dispersal probability, or -1</returns>
        </member>
        <member name="T:Madingley.ResponsiveDispersal">
            <summary>
            A formulation of the process of dispersal
            </summary>
            <summary>
            A formulation of the process of responsive dispersal
            </summary>
        </member>
        <member name="T:Madingley.IDispersalImplementation">
            <summary>
            Interface for implementations of the ecological process of dispersal
            </summary>
        </member>
        <member name="M:Madingley.IDispersalImplementation.RunDispersal(System.UInt32[],Madingley.ModelGrid,Madingley.Cohort,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Run the dispersal implementation
            </summary>
        </member>
        <member name="P:Madingley.IDispersalImplementation.TimeUnitImplementation">
            <summary>
            Time units associated with the formulation of dispersal
            </summary>
        </member>
        <member name="P:Madingley.IDispersalImplementation.DeltaT">
            <summary>
            Scalar to convert from time units associated with dispersal to the global model time step unit
            </summary>
        </member>
        <member name="F:Madingley.ResponsiveDispersal._TimeUnitImplementation">
            <summary>
            The time units associated with this implementation of dispersal
            </summary>
        </member>
        <member name="F:Madingley.ResponsiveDispersal._DensityThresholdScaling">
            <summary>
            Density threshold below which adult individuals may move to look for other adults of the same cohort
            </summary>
            <remarks>The density scales with cohort weight via: Min Density = DensityThresholdScaling / MatureMass (g)</remarks>
        </member>
        <member name="F:Madingley.ResponsiveDispersal._StarvationDispersalBodyMassThreshold">
            <summary>
            The proportion of body mass loss at which the cohort will try to disperse every time during a time step
            </summary>
        </member>
        <member name="F:Madingley.ResponsiveDispersal._DispersalSpeedBodyMassScalar">
            <summary>
            Scalar relating dispersal speed to individual body mass
            </summary>
        </member>
        <member name="F:Madingley.ResponsiveDispersal._DispersalSpeedBodyMassExponent">
            <summary>
            Body-mass exponent of the relationship between disperal speed and individual body mass
            </summary>
        </member>
        <member name="M:Madingley.ResponsiveDispersal.CalculateDispersalSpeed(System.Double)">
            <summary>
            Calculate the average diffusive dispersal speed of individuals in a cohort given their body mass
            </summary>
            <param name="bodyMass">The current body mass of an individual in the cohort</param>
            <returns>The (average) dispersal speed in kilometres per month</returns>
        </member>
        <member name="M:Madingley.ResponsiveDispersal.WriteOutParameterValues(System.IO.StreamWriter)">
            <summary>
            Write out the values of the parameters to an output file
            </summary>
            <param name="sw">A streamwriter object to write the parameter values to</param>
        </member>
        <member name="M:Madingley.ResponsiveDispersal.CalculateDispersalProbability(Madingley.ModelGrid,System.UInt32,System.UInt32,System.Double)">
            <summary>
            Calculates the probability of responsive dispersal given average individual dispersal speed and grid cell
            </summary>
            <param name="madingleyGrid">The model grid</param>
            <param name="latIndex">The latitude index of the grid cell to check for dispersal</param>
            <param name="lonIndex">The longitude index of the grid cell to check for dispersal</param>
            <param name="dispersalSpeed">The average dispersal speed of individuals in the acting cohort</param>
            <returns>A six element array. 
            The first element is the probability of dispersal.
            The second element is the probability of dispersing in the u (longitudinal) direction
            The third element is the probability of dispersing in the v (latitudinal) direction
            The fourth element is the probability of dispersing in the diagonal direction
            The fifth element is the u velocity
            The sixth element is the v velocity
            Note that the second, third, and fourth elements are always positive; thus, they do not indicate 'direction' in terms of dispersal.</returns>
        </member>
        <member name="F:Madingley.ResponsiveDispersal._DeltaT">
            <summary>
            Scalar to convert from the time step units used by this formulation of dispersal to global model time step units
            </summary>
        </member>
        <member name="F:Madingley.ResponsiveDispersal.RandomNumberGenerator">
            <summary>
            An instance of the simple random number generator class
            </summary>
        </member>
        <member name="M:Madingley.ResponsiveDispersal.#ctor(System.String,System.Boolean)">
            <summary>
            Assigns all parameter values for repsonsive dispersal
            </summary>
        </member>
        <member name="M:Madingley.ResponsiveDispersal.RunDispersal(System.UInt32[],Madingley.ModelGrid,Madingley.Cohort,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Run responsive dispersal
            </summary>
            <param name="cellIndices">The longitudinal and latitudinal indices of the current grid cell</param>
            <param name="gridForDispersal">The model grid to run dispersal for</param>
            <param name="cohortToDisperse">The cohort for which to apply the dispersal process</param>
            <param name="actingCohortFunctionalGroup">The functional group index of the acting cohort</param>
            <param name="actingCohortNumber">The position of the acting cohort within the functional group in the array of grid cell cohorts</param>
            <param name="currentMonth">The current model month</param>
        </member>
        <member name="P:Madingley.ResponsiveDispersal.TimeUnitImplementation">
            <summary>
            Get the time units associated with this implementation of dispersal
            </summary>
        </member>
        <member name="P:Madingley.ResponsiveDispersal.DensityThresholdScaling">
            <summary>
            Get the density threshold below which adult individuals may move to look for other adults of the same cohort
            </summary>
        </member>
        <member name="P:Madingley.ResponsiveDispersal.StarvationDispersalBodyMassThreshold">
            <summary>
            Get the proportion of body mass loss at which the cohort will try to disperse every time during a time step
            </summary>
        </member>
        <member name="P:Madingley.ResponsiveDispersal.DispersalSpeedBodyMassScalar">
            <summary>
            Get the scalar relating dispersal speed to individual body mass
            </summary>
        </member>
        <member name="P:Madingley.ResponsiveDispersal.DispersalSpeedBodyMassExponent">
            <summary>
            Get the body-mass exponent of the relationship between disperal speed and individual body mass
            </summary>
        </member>
        <member name="P:Madingley.ResponsiveDispersal.DeltaT">
            <summary>
            Get the scalar to convert from the time step units used by this formulation of dispersal to global model time step units
            </summary>
        </member>
        <member name="T:Madingley.AdvectiveDispersal">
            <summary>
            A formulation of the process of dispersal
            </summary>
            <summary>
            A formulation of the process of dispersal
            </summary>
        </member>
        <member name="F:Madingley.AdvectiveDispersal._HorizontalDiffusivity">
            <summary>
            The horizontal diffusivity parameter (m^2/s)
            </summary>
        </member>
        <member name="F:Madingley.AdvectiveDispersal._AdvectiveModelTimeStepLengthHours">
            <summary>
            The length of the time-step for advective dispersal, in hours
            </summary>
        </member>
        <member name="F:Madingley.AdvectiveDispersal._HorizontalDiffusivityKmSqPerADTimeStep">
            <summary>
            Horizontal diffusivity in km^2/advective-dispersal-time-step
            </summary>
        </member>
        <member name="F:Madingley.AdvectiveDispersal._AdvectionTimeStepsPerModelTimeStep">
            <summary>
            Time unit scalar to apply to advective dispersal
            </summary>
        </member>
        <member name="F:Madingley.AdvectiveDispersal._TimeUnitImplementation">
            <summary>
            The time units associated with this implementation of dispersal
            </summary>
        </member>
        <member name="F:Madingley.AdvectiveDispersal.VelocityUnitConversion">
            <summary>
            Factor to convert velocity from m/s to km/month
            </summary>
        </member>
        <member name="M:Madingley.AdvectiveDispersal.WriteOutParameterValues(System.IO.StreamWriter)">
            <summary>
            Write out the values of the parameters to an output file
            </summary>
            <param name="sw">A streamwriter object to write the parameter values to</param>
        </member>
        <member name="M:Madingley.AdvectiveDispersal.RescaleDispersalSpeed(System.Double)">
            <summary>
            Convert dispersal speed from m per second to km per dispersal time step (currently 18h)
            </summary>
            <param name="dispersalSpeed">The dispersal speed in m per second</param>
            <returns>The dispersal speed in kilometres per time step</returns>
        </member>
        <member name="M:Madingley.AdvectiveDispersal.CalculateDispersalProbability(Madingley.ModelGrid,System.UInt32,System.UInt32,System.UInt32,System.Double,System.Double)">
            <summary>
            Calculates the probability of advective dispersal given the grid cell
            </summary>
            <param name="madingleyGrid">The model grid</param>
            <param name="latIndex">The latitude index of the grid cell to check for dispersal</param>
            <param name="lonIndex">The longitude index of the grid cell to check for dispersal</param>
            <param name="currentMonth">The current model month</param>
            <returns>A six element array. 
            The first element is the probability of dispersal.
            The second element is the probability of dispersing in the u (longitudinal) direction
            The third element is the probability of dispersing in the v (latitudinal) direction
            The fourth element is the probability of dispersing in the diagonal direction
            The fifth element is the distance travelled in the u direction (u velocity modified by the random diffusion component)
            The sixth element is the distance travelled in the v direction (v velocity modified by the random diffusion component)
            Note that the second, third, and fourth elements are always positive; thus, they do not indicate 'direction' in terms of dispersal.</returns>
        </member>
        <member name="M:Madingley.AdvectiveDispersal.CalculateDiffusion">
            <summary>
            Get a randomly directed diffusion vector. This is derived from the LTRANS model formulation, which itself is derived from Visser 1997 (MEPS)
            We assume that the standard deviation of the random draw is 1.0
            </summary>
            <returns>A two element array, where the first element is the diffusion component in the u direction, and the second component is the
            diffusion component in the v direction</returns>
        </member>
        <member name="F:Madingley.AdvectiveDispersal._DeltaT">
            <summary>
            Scalar to convert from the time step units used by this formulation of dispersal to global model time step units
            </summary>
        </member>
        <member name="F:Madingley.AdvectiveDispersal.RandomNumberGenerator">
            <summary>
            An instance of the simple random number generator class
            </summary>
        </member>
        <member name="M:Madingley.AdvectiveDispersal.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor for dispersal: assigns all parameter values
            </summary>
        </member>
        <member name="M:Madingley.AdvectiveDispersal.RunDispersal(System.UInt32[],Madingley.ModelGrid,Madingley.Cohort,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Run advective dispersal
            </summary>
            <param name="cellIndex">The longitudinal and latitudinal indices of the focal grid cell</param>
            <param name="gridForDispersal">The model grid to run dispersal for</param>
            <param name="cohortToDisperse">The cohort to run dispersal for</param>
            <param name="actingCohortFunctionalGroup">The functional group index of the acting cohort</param>
            <param name="actingCohortNumber">The position of the acting cohort wihtin the functional group in the array of grid cell cohorts</param>
            <param name="currentMonth">The current model month</param>
        </member>
        <member name="P:Madingley.AdvectiveDispersal.HorizontalDiffusivity">
            <summary>
            Get the horizontal diffusivity parameter (m^2/s)
            </summary>
        </member>
        <member name="P:Madingley.AdvectiveDispersal.AdvectiveModelTimeStepLengthHours">
            <summary>
            Get the length in hours of the time-step for advective dispersal
            </summary>
        </member>
        <member name="P:Madingley.AdvectiveDispersal.HorizontalDiffusivityKmSqPerADTimeStep">
            <summary>
            Get the horizontal diffusivity in km^2/advective-dispersal-time-step
            </summary>
        </member>
        <member name="P:Madingley.AdvectiveDispersal.AdvectionTimeStepsPerModelTimeStep">
            <summary>
            Get the time unit scalar for advective dispersal
            </summary>
        </member>
        <member name="P:Madingley.AdvectiveDispersal.TimeUnitImplementation">
            <summary>
            Get the time units associated with this implementation of dispersal
            </summary>
        </member>
        <member name="P:Madingley.AdvectiveDispersal.DeltaT">
            <summary>
            Get the scalar to convert from the time step units used by this formulation of dispersal to global model time step units
            </summary>
        </member>
        <member name="T:Madingley.DiffusiveDispersal">
            <summary>
            A formulation of the process of dispersal
            </summary>
            <summary>
            A formulation of the process of dispersal
            </summary>
        </member>
        <member name="F:Madingley.DiffusiveDispersal._TimeUnitImplementation">
            <summary>
            The time units associated with this implementation of dispersal
            </summary>
        </member>
        <member name="F:Madingley.DiffusiveDispersal._DispersalSpeedBodyMassScalar">
            <summary>
            Scalar relating dispersal speed to individual body mass
            </summary>
        </member>
        <member name="F:Madingley.DiffusiveDispersal._DispersalSpeedBodyMassExponent">
            <summary>
            Body-mass exponent of the relationship between disperal speed and individual body mass
            </summary>
        </member>
        <member name="M:Madingley.DiffusiveDispersal.WriteOutParameterValues(System.IO.StreamWriter)">
            <summary>
            Write out the values of the parameters to an output file
            </summary>
            <param name="sw">A streamwriter object to write the parameter values to</param>
        </member>
        <member name="M:Madingley.DiffusiveDispersal.CalculateDispersalSpeed(System.Double)">
            <summary>
            Calculates the average diffusive dispersal speed of individuals in a cohort given their body mass
            </summary>
            <param name="bodyMass">The current body mass of individuals in the cohort</param>
            <returns>The average dispersal speed, in km per month</returns>
        </member>
        <member name="M:Madingley.DiffusiveDispersal.CalculateDispersalProbability(Madingley.ModelGrid,System.UInt32,System.UInt32,System.Double)">
            <summary>
            Calculates the probability of diffusive dispersal given average individual dispersal speed
            </summary>
            <param name="madingleyGrid">The model grid</param>
            <param name="latIndex">The latitude index of the grid cell to check for dispersal</param>
            <param name="lonIndex">The longitude index of the grid cell to check for dispersal</param>
            <param name="dispersalSpeed">The average speed at which individuals in this cohort move around their environment, in km per month</param>
            <returns>A six element array. 
            The first element is the probability of dispersal.
            The second element is the probability of dispersing in the u (longitudinal) direction
            The third element is the probability of dispersing in the v (latitudinal) direction
            The fourth element is the probability of dispersing in the diagonal direction
            The fifth element is the u velocity modified by the random diffusion component
            The sixth element is the v velocity modified by the random diffusion component
            Note that the second, third, and fourth elements are always positive; thus, they do not indicate 'direction' in terms of dispersal.</returns>
        </member>
        <member name="F:Madingley.DiffusiveDispersal._DeltaT">
            <summary>
            Scalar to convert from the time step units used by this formulation of dispersal to global model time step units
            </summary>
        </member>
        <member name="F:Madingley.DiffusiveDispersal.RandomNumberGenerator">
            <summary>
            An instance of the simple random number generator class
            </summary>
        </member>
        <member name="M:Madingley.DiffusiveDispersal.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor for dispersal: assigns all parameter values
            </summary>
        </member>
        <member name="M:Madingley.DiffusiveDispersal.RunDispersal(System.UInt32[],Madingley.ModelGrid,Madingley.Cohort,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Run diffusive dispersal
            </summary>
            <param name="cellIndices">List of indices of active cells in the model grid</param>
            <param name="gridForDispersal">The model grid to run dispersal for</param>
            <param name="cohortToDisperse">The cohort for which to run the dispersal process for</param>
            <param name="actingCohortFunctionalGroup">The functional group index of the acting cohort</param>
            <param name="actingCohortNumber">The position of the cohort within the functional group in the array of grid cell cohorts</param>
            <param name="currentMonth">The current model month</param>
        </member>
        <member name="P:Madingley.DiffusiveDispersal.TimeUnitImplementation">
            <summary>
            Get the time units associated with this implementation of dispersal
            </summary>
        </member>
        <member name="P:Madingley.DiffusiveDispersal.DispersalSpeedBodyMassScalar">
            <summary>
            Get the scalar relating dispersal speed to individual body mass
            </summary>
        </member>
        <member name="P:Madingley.DiffusiveDispersal.DispersalSpeedBodyMassExponent">
            <summary>
            Get the body-mass exponent of the relationship between disperal speed and individual body mass
            </summary>
        </member>
        <member name="P:Madingley.DiffusiveDispersal.DeltaT">
            <summary>
            Get the scalar to convert from the time step units used by this formulation of dispersal to global model time step units
            </summary>
        </member>
        <member name="T:Madingley.Dispersal">
            <summary>
            Performs dispersal
            </summary>
        </member>
        <member name="T:Madingley.IEcologicalProcessAcrossGridCells">
            <summary>
            Interface for cross grid-cell ecological process code
            </summary>
        </member>
        <member name="M:Madingley.IEcologicalProcessAcrossGridCells.RunCrossGridCellEcologicalProcess(System.UInt32[],Madingley.ModelGrid,System.Boolean,Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.UInt32)">
            <summary>
            Run the cross-grid-cell ecological process
            </summary>
            <param name="cellIndex">The cell index for the active cell in the model grid</param>
            <param name="gridForDispersal">The model grid to run the process for</param>
            <param name="dispersalOnly">Whether we are running dispersal only</param>
            <param name="madingleyCohortDefinitions">The functional group definitions for cohorts in the model</param>
            <param name="madingleyStockDefinitions">The functional group definitions for stocks in the model</param>
            <param name="currentMonth">The current model month</param>
        </member>
        <member name="F:Madingley.Dispersal.Implementations">
            <summary>
            The available implementations of the dispersal process
            </summary>
        </member>
        <member name="F:Madingley.Dispersal.PlanktonThreshold">
            <summary>
            Threshold (g) below which a marine individual is considered to be planktonic (i.e. cannot swim against the currents). Currently set to 10mg.
            </summary>
        </member>
        <member name="M:Madingley.Dispersal.#ctor(System.Boolean,System.String,Madingley.MadingleyModelInitialisation)">
            <summary>
            Constructor for Dispersal: fills the list of available implementations of dispersal
            </summary>
        </member>
        <member name="M:Madingley.Dispersal.RunCrossGridCellEcologicalProcess(System.UInt32[],Madingley.ModelGrid,System.Boolean,Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.UInt32)">
            <summary>
            Run dispersal
            </summary>
        </member>
        <member name="T:Madingley.RevisedHerbivory">
            <summary>
            A revised version of the herbivory process, written November 2011
            </summary>
            <summary>
            A revised version of the herbivory process, written November 2011
            </summary>
        </member>
        <member name="T:Madingley.IEatingImplementation">
            <summary>
            Interface for implementations of the ecological process of eating
            </summary>
        </member>
        <member name="M:Madingley.IEatingImplementation.InitializeEatingPerTimeStep(Madingley.GridCellCohortHandler,Madingley.GridCellStockHandler,Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions)">
            <summary>
            Initialises eating implementation each time step
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="gridCellStocks">The stocks in the current grid cell</param>
            <param name="madingleyCohortDefinitions">The definitions for cohorts in the model</param>
            <param name="madingleyStockDefinitions">The definitions for stocks in the model</param>
        </member>
        <member name="M:Madingley.IEatingImplementation.GetEatingPotentialMarine(Madingley.GridCellCohortHandler,Madingley.GridCellStockHandler,System.Int32[],System.Collections.Generic.SortedList{System.String,System.Double[]},Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions)">
            <summary>
            Calculate the potential biomass that could be gained through eating for marine cells
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="gridCellStocks">The stocks in the current grid cell</param>
            <param name="actingCohort">The position of the acting cohort in the jagged array of cohorts</param>
            <param name="cellEnvironment">The environment in the current grid cell</param>
            <param name="madingleyCohortDefinitions">The definitions for cohorts in the model</param>
            <param name="madingleyStockDefinitions">The definitions for stocks in the model</param>
        </member>
        <member name="M:Madingley.IEatingImplementation.GetEatingPotentialTerrestrial(Madingley.GridCellCohortHandler,Madingley.GridCellStockHandler,System.Int32[],System.Collections.Generic.SortedList{System.String,System.Double[]},Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions)">
            <summary>
            Calculate the potential biomass that could be gained through eating for terrestrial cells
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="gridCellStocks">The stocks in the current grid cell</param>
            <param name="actingCohort">The position of the acting cohort in the jagged array of cohorts</param>
            <param name="cellEnvironment">The environment in the current grid cell</param>
            <param name="madingleyCohortDefinitions">The definitions for cohorts in the model</param>
            <param name="madingleyStockDefinitions">The definitions for stocks in the model</param>
        </member>
        <member name="M:Madingley.IEatingImplementation.RunEating(Madingley.GridCellCohortHandler,Madingley.GridCellStockHandler,System.Int32[],System.Collections.Generic.SortedList{System.String,System.Double[]},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Double}},Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,Madingley.ProcessTracker,System.UInt32,System.Boolean,System.String,Madingley.MadingleyModelInitialisation)">
            <summary>
            Calculate the actual biomass eaten from each cohort or sotck, apply changes from eating to the cohorts or stocks eaten, and update deltas for the acting cohort
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="gridCellStocks">The stocks in the current grid cell</param>
            <param name="actingCohort">The position of the acting cohort in the jagged array of grid cell cohorts</param>
            <param name="cellEnvironment">The environment in the current grid cell</param>
            <param name="deltas">The sorted list to track changes in biomass and abundance of the acting cohort in this grid cell</param>
            <param name="madingleyCohortDefinitions">The definitions for cohort functional groups in the model</param>
            <param name="madingleyStockDefinitions">The definitions for stock functional groups in the model</param>
            <param name="trackProcesses">An instance of ProcessTracker to hold diagnostics for eating</param>
            <param name="currentTimestep">The current model time step</param>
            <param name="specificLocations">Whether the model is being run for specific locations</param>
            <param name="outputDetail">The level of output detail being used in this model run</param>
            <param name="initialisation">The Madingley Model initialisation</param>
        </member>
        <member name="P:Madingley.IEatingImplementation.TimeUnitImplementation">
            <summary>
            Time units associated with the formulation of eating
            </summary>
        </member>
        <member name="P:Madingley.IEatingImplementation.DeltaT">
            <summary>
            Scalar to convert from time units associated with eating to the global model time step unit
            </summary>
        </member>
        <member name="P:Madingley.IEatingImplementation.AssimilationEfficiency">
            <summary>
            Assimilation efficiency of food mass into acting cohort mass
            </summary>
        </member>
        <member name="P:Madingley.IEatingImplementation.ProportionTimeEating">
            <summary>
            Proportion of time spent eating
            </summary>
        </member>
        <member name="P:Madingley.IEatingImplementation.TimeUnitsToHandlePotentialFoodItems">
            <summary>
            Time to handle all prey cohorts or plant mass encountered
            </summary>
        </member>
        <member name="P:Madingley.IEatingImplementation.FunctionalGroupIndicesToEat">
            <summary>
            List of functional group indices to act on
            </summary>
        </member>
        <member name="P:Madingley.IEatingImplementation.TotalBiomassEatenByCohort">
            <summary>
            The total biomass eaten by the acting cohort 
            </summary>
        </member>
        <member name="F:Madingley.RevisedHerbivory._TimeUnitImplementation">
            <summary>
            The time unit associated with this herbivory implementation and its parameters
            </summary>
        </member>
        <member name="F:Madingley.RevisedHerbivory._AssimilationEfficiency">
            <summary>
            The assimilation efficiency of eaten autotroph mass into herbivore body mass
            </summary>
        </member>
        <member name="F:Madingley.RevisedHerbivory._HandlingTimeScalarTerrestrial">
            <summary>
            The scalar of the relationship between handling time and the function of herbivore mass for the terrestrial realm
            </summary>
        </member>
        <member name="F:Madingley.RevisedHerbivory._HandlingTimeScalarMarine">
            <summary>
            The scalar of the relationship between handling time and the function of herbivore mass for the marine realm
            </summary>
        </member>
        <member name="F:Madingley.RevisedHerbivory._HandlingTimeExponentTerrestrial">
            <summary>
            The exponent applied to herbivore mass in the handling time relationship for the terrestrial realm
            </summary>
        </member>
        <member name="F:Madingley.RevisedHerbivory._HandlingTimeExponentMarine">
            <summary>
            The exponent applied to herbivore mass in the handling time relationship for the marine realm
            </summary>
        </member>
        <member name="F:Madingley.RevisedHerbivory._ReferenceMass">
            <summary>
            Reference mass of plant matter for calculating handling times
            </summary>
        </member>
        <member name="F:Madingley.RevisedHerbivory._HerbivoryRateConstant">
            <summary>
            The maximum herbivory rate for a herbivore of 1 g
            </summary>
        </member>
        <member name="F:Madingley.RevisedHerbivory._HerbivoryRateMassExponent">
            <summary>
            The exponent to apply to body mass in the relationship between body mass and herbivory rate
            </summary>
        </member>
        <member name="F:Madingley.RevisedHerbivory._AttackRateExponentTerrestrial">
            <summary>
            The exponent applied to prey density when calculating attack rates for organisms in the terrestrial realm
            </summary>
        </member>
        <member name="F:Madingley.RevisedHerbivory._AttackRateExponentMarine">
            <summary>
            The exponent applied to prey density when calculating attack rates for organisms in the marine realm
            </summary>
        </member>
        <member name="M:Madingley.RevisedHerbivory.WriteOutParameterValues(System.IO.StreamWriter)">
            <summary>
            Write out the values of the parameters to an output file
            </summary>
            <param name="sw">A streamwriter object to write the parameter values to</param>
        </member>
        <member name="M:Madingley.RevisedHerbivory.CalculatePotentialBiomassEatenTerrestrial(System.Double,System.Double)">
            <summary>
            Calculates the potential biomass of an autotroph stock eaten by a herbivore cohort (terrestrial)
            </summary>
            <param name="autotrophBiomass">The total biomass of the autotroph stock</param>
            <param name="herbivoreIndividualMass">The individual body mass of the acting (herbivore) cohort</param>
            <returns>The potential biomass eaten by the herbivore cohort</returns>
        </member>
        <member name="M:Madingley.RevisedHerbivory.CalculatePotentialBiomassEatenMarine(System.Double,System.Double)">
            <summary>
            Calculates the potential biomass of an autotroph stock eaten by a herbivore cohort (marine)
            </summary>
            <param name="autotrophBiomass">The total biomass of the autotroph stock</param>
            <param name="herbivoreIndividualMass">The individual body mass of the acting (herbivore) cohort</param>
            <returns>The potential biomass eaten by the herbivore cohort</returns>
        </member>
        <member name="M:Madingley.RevisedHerbivory.CalculateIndividualHerbivoryRatePerHectare(System.Double)">
            <summary>
            Calculate the herbivory rate of an individual herbivore per unit autotroph mass-density per hectare
            </summary>
            <param name="herbivoreIndividualMass">Herbivore individual body mass</param>
            <returns>The herbivory rate of an individual herbivore per unit autotroph mass-density per hectare</returns>
        </member>
        <member name="M:Madingley.RevisedHerbivory.CalculateHandlingTimeMarine(System.Double)">
            <summary>
            Calculate the time taken for a herbivore in the marine realm to handle unit mass (1 g) of autotroph mass
            </summary>
            <param name="herbivoreIndividualMass">The body mass of an individual herbivore</param>
            <returns>The time taken for a herbivore to handle unit mass (1 g) of autotroph mass</returns>
        </member>
        <member name="M:Madingley.RevisedHerbivory.CalculateHandlingTimeTerrestrial(System.Double)">
            <summary>
            Calculate the time taken for a herbivore in the terrestrial realm to handle unit mass (1 g) of autotroph mass
            </summary>
            <param name="herbivoreIndividualMass">The body mass of an individual herbivore</param>
            <returns>The time taken for a herbivore to handle unit mass (1 g) of autotroph mass</returns>
        </member>
        <member name="M:Madingley.RevisedHerbivory.CalculateBiomassesEaten(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate the actual biomass eaten by a herbivore cohort from an autotroph stock
            </summary>
            <param name="potentialBiomassEaten">The potential biomass eaten by the herbivore cohort from the autotroph stock given the encounter rate</param>
            <param name="totalHandlingTime">The total time that would be taken to handle all encountered autotroph biomass in all autotroph stocks</param>
            <param name="herbivoreAbundance">The number of individuals in the acting herbivore cohort</param>
            <param name="autotrophBiomass">The total biomass in the autotroph stock</param>
            <returns>The biomass eaten by the herbivore cohort from the autotroph stock</returns>
        </member>
        <member name="F:Madingley.RevisedHerbivory._DeltaT">
            <summary>
            Scalar to convert from the time step units used by this herbivory implementation to global model time step units
            </summary>
        </member>
        <member name="F:Madingley.RevisedHerbivory._ProportionOfTimeEating">
            <summary>
            The proportion of time that a herbivore cohort spends eating
            </summary>
        </member>
        <member name="F:Madingley.RevisedHerbivory._BiomassesEaten">
            <summary>
            Jagged array mirroring the grid cell stocks to store the biomasses eaten in herbivory
            </summary>
        </member>
        <member name="F:Madingley.RevisedHerbivory._PotentialBiomassesEaten">
            <summary>
            Jagged array mirroring the grid cell stocks to store the potential biomasses eaten (given the rate of encounter) in herbivory
            </summary>
        </member>
        <member name="F:Madingley.RevisedHerbivory._FunctionalGroupIndicesToEat">
            <summary>
            List of autotroph functional group indices to be eaten in herbivory
            </summary>
        </member>
        <member name="F:Madingley.RevisedHerbivory._TotalBiomassEatenByCohort">
             <summary>
            The total biomass eaten by the acting cohort 
             </summary>
        </member>
        <member name="F:Madingley.RevisedHerbivory._TimeUnitsToHandlePotentialFoodItems">
            <summary>
            Cumulative number of time units to handle all of the potential biomass eaten from all autotroph stocks
            </summary>
        </member>
        <member name="F:Madingley.RevisedHerbivory._CellArea">
            <summary>
            The area (in square km) of the grid cell
            </summary>
        </member>
        <member name="F:Madingley.RevisedHerbivory._CellAreaHectares">
            <summary>
            The area of the current grid cell in hectares
            </summary>
        </member>
        <member name="F:Madingley.RevisedHerbivory._BodyMassHerbivore">
            <summary>
            Individual body mass of herbivores
            </summary>
        </member>
        <member name="F:Madingley.RevisedHerbivory.Utilities">
            <summary>
            Instance of the class to perform general functions
            </summary>
        </member>
        <member name="M:Madingley.RevisedHerbivory.#ctor(System.Double,System.String)">
            <summary>
            Constructor for herbivory: assigns all parameter values
            </summary>
            <param name="cellArea">The area (in square km) of the grid cell</param>
            <param name="globalModelTimeStepUnit">The time step unit used in the model</param>
        </member>
        <member name="M:Madingley.RevisedHerbivory.InitializeEatingPerTimeStep(Madingley.GridCellCohortHandler,Madingley.GridCellStockHandler,Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions)">
            <summary>
            Initialises herbivory implementation each time step
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="gridCellStocks">The stocks in the current grid cell</param>
            <param name="madingleyCohortDefinitions">The definitions for cohorts in the model</param>
            <param name="madingleyStockDefinitions">The definitions for stocks in the model</param>
            <remarks>This only works if: a) herbivory is initialised in every grid cell; and b) if parallelisation is done by latitudinal strips
            It is critical to run this every time step</remarks>
        </member>
        <member name="M:Madingley.RevisedHerbivory.GetEatingPotentialTerrestrial(Madingley.GridCellCohortHandler,Madingley.GridCellStockHandler,System.Int32[],System.Collections.Generic.SortedList{System.String,System.Double[]},Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions)">
            <summary>
            Calculate the potential biomass that could be gained through herbivory on each grid cell autotroph stock
            </summary>
            <param name="gridCellCohorts">The cohorts in the grid cell</param>
            <param name="gridCellStocks">The stocks in the grid cell</param>
            <param name="actingCohort">The acting cohort</param>
            <param name="cellEnvironment">The environment in the current grid cell</param>
            <param name="madingleyCohortDefinitions">The functional group definitions for cohorts in the model</param>
            <param name="madingleyStockDefinitions">The functional group definitions for stocks  in the model</param>
        </member>
        <member name="M:Madingley.RevisedHerbivory.GetEatingPotentialMarine(Madingley.GridCellCohortHandler,Madingley.GridCellStockHandler,System.Int32[],System.Collections.Generic.SortedList{System.String,System.Double[]},Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions)">
            <summary>
            Calculate the potential biomass that could be gained through herbivory on each grid cell autotroph stock
            </summary>
            <param name="gridCellCohorts">The cohorts in the grid cell</param>
            <param name="gridCellStocks">The stocks in the grid cell</param>
            <param name="actingCohort">The acting cohort</param>
            <param name="cellEnvironment">The environment in the current grid cell</param>
            <param name="madingleyCohortDefinitions">The functional group definitions for cohorts in the model</param>
            <param name="madingleyStockDefinitions">The functional group definitions for stocks  in the model</param>
        </member>
        <member name="M:Madingley.RevisedHerbivory.RunEating(Madingley.GridCellCohortHandler,Madingley.GridCellStockHandler,System.Int32[],System.Collections.Generic.SortedList{System.String,System.Double[]},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Double}},Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,Madingley.ProcessTracker,System.UInt32,System.Boolean,System.String,Madingley.MadingleyModelInitialisation)">
            <summary>
            Calculate the actual amount eaten in herbivory, apply the changes to the eaten autotroph stocks, and update deltas for the herbivore cohort
            </summary>
            <param name="gridCellCohorts">The cohorts in this grid cell</param>
            <param name="gridCellStocks">The stocks in this grid cell</param>
            <param name="actingCohort">The acting cohort</param>
            <param name="cellEnvironment">The environmental conditions in this grid cell</param>
            <param name="deltas">The sorted list to track changes in biomass and abundance of the acting cohort in this grid cell</param>
            <param name="madingleyCohortDefinitions">The functional group definitions for cohorts in the model</param>
            <param name="madingleyStockDefinitions">The functional group definitions for stocks in the model</param>
            <param name="trackProcesses">An instance of ProcessTracker to hold diagnostics for herbivory</param>
            <param name="currentTimestep">The current model time step</param>
            <param name="specificLocations">Whether the model is being run for specific locations</param>
            <param name="outputDetail">The level of output detail being used in this model run</param>
            <param name="initialisation">The Madingley Model initialisation</param>
        </member>
        <member name="P:Madingley.RevisedHerbivory.TimeUnitImplementation">
            <summary>
            Get the time unit associated with this herbivory implementation and its parameters
            </summary>
        </member>
        <member name="P:Madingley.RevisedHerbivory.AssimilationEfficiency">
            <summary>
            Get and set the assimilation efficiency of eaten autotroph mass into herbivore body mass
            </summary>
        </member>
        <member name="P:Madingley.RevisedHerbivory.HandlingTimeScalarTerrestrial">
            <summary>
            Get the scalar of the relationship between handling time and the function of herbivore mass for the terrestrial realm
            </summary>
        </member>
        <member name="P:Madingley.RevisedHerbivory.HandlingTimeScalarMarine">
            <summary>
            Get the scalar of the relationship between handling time and the function of herbivore mass for the marine realm
            </summary>
        </member>
        <member name="P:Madingley.RevisedHerbivory.HandlingTimeExponentTerrestrial">
            <summary>
            Get the exponent applied to herbivore mass in the handling time relationship for the terrestrial realm
            </summary>
        </member>
        <member name="P:Madingley.RevisedHerbivory.HandlingTimeExponentMarine">
            <summary>
            The exponent applied to herbivore mass in the handling time relationship for the marine realm
            </summary>
        </member>
        <member name="P:Madingley.RevisedHerbivory.ReferenceMass">
            <summary>
            Get the reference mass of plant matter for calculating handling times
            </summary>
        </member>
        <member name="P:Madingley.RevisedHerbivory.HerbivoryRateConstant">
            <summary>
            Get the maximum herbivory rate for a herbivore of 1 g
            </summary>
        </member>
        <member name="P:Madingley.RevisedHerbivory.HerbivoryRateMassExponent">
            <summary>
            Get and set the exponent to apply to body mass in the relationship between body mass and herbivory rate
            </summary>
        </member>
        <member name="P:Madingley.RevisedHerbivory.AttackRateExponentTerrestrial">
            <summary>
            Get and set the exponent applied to prey density when calculating attack rates for organisms in the terrestrial realm
            </summary>
        </member>
        <member name="P:Madingley.RevisedHerbivory.AttackRateExponentMarine">
            <summary>
            Get and set the exponent applied to prey density when calculating attack rates for organisms in the marine realm
            </summary>
        </member>
        <member name="P:Madingley.RevisedHerbivory.DeltaT">
            <summary>
            Return the scalar to convert from the time step units used by this herbivory implementation to global model time step units
            </summary>
        </member>
        <member name="P:Madingley.RevisedHerbivory.ProportionTimeEating">
            <summary>
            Get or set the proportion of time that a herbivore cohort devotes to eating behaviours
            </summary>
        </member>
        <member name="P:Madingley.RevisedHerbivory.BiomassesEaten">
            <summary>
            Get the jagged array storing the biomasses eaten in herbivory
            </summary>
        </member>
        <member name="P:Madingley.RevisedHerbivory.PotentialBiomassesEaten">
            <summary>
            Get the jagged array storing the potential biomasses eaten in herbivory
            </summary>
        </member>
        <member name="P:Madingley.RevisedHerbivory.FunctionalGroupIndicesToEat">
            <summary>
            Get the list of autotroph functional group indices to eat in herbivory
            </summary>
        </member>
        <member name="P:Madingley.RevisedHerbivory.TotalBiomassEatenByCohort">
            <summary>
            Get the total biomass eaten by the acting cohort
            </summary>
        </member>
        <member name="P:Madingley.RevisedHerbivory.TimeUnitsToHandlePotentialFoodItems">
            <summary>
            Get and set the cumulative number of time units to handle all of the potential biomass eaten from all autotroph stocks
            </summary>
        </member>
        <member name="P:Madingley.RevisedHerbivory.CellArea">
            <summary>
            Get and set the area of the grid cell
            </summary>
        </member>
        <member name="P:Madingley.RevisedHerbivory.CellAreaHectares">
            <summary>
            Get and set the area of the current grid cell in hectares
            </summary>
        </member>
        <member name="T:Madingley.RevisedHerbivory.ThreadLockedParallelVariables">
            <summary>
            Holds the thread-local variables to track numbers of extinctions and productions of cohorts
            </summary>
            <todoD>Needs a little tidying and checking of access levels</todoD>
        </member>
        <member name="F:Madingley.RevisedHerbivory.ThreadLockedParallelVariables.Extinctions">
            <summary>
            Thread-local variables to track numbers of cohort extinctions and productions
            </summary>
        </member>
        <member name="F:Madingley.RevisedHerbivory.ThreadLockedParallelVariables.Productions">
            <summary>
            Thread-local variables to track numbers of cohort extinctions and productions
            </summary>
        </member>
        <member name="T:Madingley.RevisedPredation">
            <summary>
            A revised version of the predation process, written November 2011 
            </summary>
            <summary>
            A revised version of the predation process, written November 2011
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation._TimeUnitImplementation">
            <summary>
            The time unit associated with this particular implementation of predation and its parameters
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation._AssimilationEfficiency">
            <summary>
            The assimilation efficiency of eaten prey mass into predator body mass
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation._HandlingTimeScalarTerrestrial">
            <summary>
            The scalar of the relationship between handling time and the function of predator and prey masses for terrestrial animals
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation._HandlingTimeExponentTerrestrial">
            <summary>
            The exponent applied to predator mass in the handling time relationship for terrestrial animals
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation._HandlingTimeScalarMarine">
            <summary>
            The scalar of the relationship between handling time and the function of predator and prey masses for terrestrial animals
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation._HandlingTimeExponentMarine">
            <summary>
            The exponent applied to predator mass in the handling time relationship for terrestrial animals
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation._SpecificPredatorHandlingTimeScaling">
            <summary>
            Pre-calculate the specific predator handling time scaling to prevent having to do it for every prey cohort
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation._KillRateConstant">
            <summary>
            The maximum kill rate for a predator of 1 g on prey of an optimal size
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation._SpecificPredatorKillRateConstant">
            <summary>
            Pre-calculate the maximum kill rate for a specific predator of 1 g on prey of an optimal size
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation._OptimalPreyPredatorMassRatioTerrestrial">
            <summary>
            The optimal ratio of prey to predator body masses for terrestrial animals
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation._OptimalPreyPredatorMassRatioMarine">
            <summary>
            The optimal ratio of prey to predator body masses for marine animals
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation._SpecificPredatorTimeUnitsEatingPerGlobalTimeStep">
            <summary>
            Pre-calculate the proportion of time spent eating (in appropriate time units for this class) for a specific predator
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation._FeedingPreferenceStandardDeviation">
            <summary>
            The standard deviation in attack rates around the optimal prey to predator mass ratio
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation._KillRateConstantMassExponent">
            <summary>
            The exponent on body mass in the relationship between body mass and attack rate
            </summary>
        </member>
        <member name="M:Madingley.RevisedPredation.WriteOutParameterValues(System.IO.StreamWriter)">
            <summary>
            Write out the values of the parameters to an output file
            </summary>
            <param name="sw">A streamwriter object to write the parameter values to</param>
        </member>
        <member name="M:Madingley.RevisedPredation.CalculateExpectedNumberKilledTerrestrial(System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Double)">
            <summary>
            Calculate the potential number of individuals in a prey cohort eaten by an acting predator cohort given the number of prey detections
            </summary>
            <param name="preyAbundance">The number of individuals in the prey cohort</param>
            <param name="preyIndividualMass">The body mass of prey individuals</param>
            <param name="preyMassBinNumber">The mass bin of the prey</param>
            <param name="preyFunctionalGroup">The functional group index of the prey</param>
            <param name="predatorIndividualMass">The body mass of predator individuals</param>
            <param name="preyIsCarnivore">Whether the prey cohort is a carnivore cohort</param>
            <param name="preyIsOmnivore">Whether the prey cohort is an omnivore cohort</param>
            <param name="predatorIsOmnivore">Whether the predator cohort is an omnivore cohort</param>
            <param name="logOptimalPreyPredatorMassRatio">The log ratio of optimal prey body mass to predator body mass</param>
            <returns>The potential number of individuals in a prey cohort eaten by an acting predator cohort</returns>
        </member>
        <member name="M:Madingley.RevisedPredation.CalculateExpectedNumberKilledMarine(System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Double)">
            <summary>
            Calculate the potential number of individuals in a prey cohort eaten by an acting predator cohort given the number of prey detections
            </summary>
            <param name="preyAbundance">The number of individuals in the prey cohort</param>
            <param name="preyIndividualMass">The body mass of prey individuals</param>
            <param name="preyMassBinNumber">The mass bin of the prey</param>
            <param name="preyFunctionalGroup">The functional group index of the prey</param>
            <param name="predatorIndividualMass">The body mass of predator individuals</param>
            <param name="preyIsCarnivore">Whether the prey cohort is a carnivore cohort</param>
            <param name="preyIsOmnivore">Whether the prey cohort is an omnivore cohort</param>
            <param name="predatorIsOmnivore">Whether the predator cohort is am omnivore cohort</param>
            <param name="logOptimalPreyPredatorMassRatio">The log ratio of optimal prey body mass to predator body mass</param>
            <returns>The potential number of individuals in a prey cohort eaten by an acting predator cohort</returns>
        </member>
        <member name="M:Madingley.RevisedPredation.CalculateIndividualKillingRatePerHectare(System.Double,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Calculates the killing rate of an individual predator per unit prey density per hectare per time unit 
            </summary>
            <param name="preyIndividualMass">The body mass of individuals in the prey cohort</param>
            <param name="preyMassBinNumber">The mass bin index of the prey</param>
            <param name="preyFunctionalGroup">The functional group index of the prey</param>
            <param name="predatorIndividualMass">The body mass of individuals in the predator cohort</param>
            <param name="logOptimalPreyPredatorMassRatio">The log ratio of optimal prey body mass to predator body mass</param>
            <returns>The killing rate of an individual predator per unit prey density per hectare per time unit</returns>
        </member>
        <member name="M:Madingley.RevisedPredation.CalculateHandlingTimeTerrestrial(System.Double)">
            <summary>
            Calculates the time for an individual predator to handle an individual prey in the terrestrial realm
            </summary>
            <param name="preyIndividualMass">The body mass of prey individuals</param>
            <returns>The time for an individual predator to handle an individual prey</returns>
        </member>
        <member name="M:Madingley.RevisedPredation.CalculateHandlingTimeMarine(System.Double)">
            <summary>
            Calculates the time for an individual predator to handle an individual prey in the marine realm
            </summary>
            <param name="preyIndividualMass">The body mass of prey individuals</param>
            <returns>The time for an individual predator to handle an individual prey</returns>
        </member>
        <member name="M:Madingley.RevisedPredation.CalculateAbundanceEaten(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate the actual abundance of a prey cohort eaten by a predator cohort
            </summary>
            <param name="potentialKills">The potential abundance of the prey cohort eaten by the predator cohort given the number of detections</param>
            <param name="totalHandlingTimePlusOne">The total time that would be taken to eat all detected prey individuals in all prey cohorts plus one</param>
            <param name="predatorAbundanceMultipliedByTimeEating">The abundance in the predator cohort</param>
            <param name="preyAbundance">The abundance in the prey cohort</param>
            <returns>The actual abundance of a prey cohort eaten by a predator cohort</returns>
        </member>
        <member name="M:Madingley.RevisedPredation.CalculateVisibility(System.Double)">
            <summary>
            Calculate the visibility of the prey cohort (currently set to 1)
            </summary>
            <param name="preyAbundance">The abundance in the prey cohort</param>
            <returns>The visibility of the prey cohort</returns>
        </member>
        <member name="F:Madingley.RevisedPredation._DeltaT">
            <summary>
            Scalar to convert from the time step units used by this predation implementation to global model time step units
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation._ProportionOfTimeEating">
            <summary>
            The proportion of time that a predator cohort spends eating
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation._AbundancesEaten">
            <summary>
            Jagged array mirroring the grid cell cohorts to store the abundance gained from predation on each cohort
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation._PotentialAbundanceEaten">
            <summary>
            Jagged array mirroring the grid cell cohorts to store the potential abundance gained (given the number of encounters) from predation on each cohort
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation._FunctionalGroupIndicesToEat">
            <summary>
            List of cohort functional group indices ot be eaten in predation
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation._TotalBiomassEatenByCohort">
             <summary>
            The total biomass eaten by the acting cohort 
             </summary>
        </member>
        <member name="F:Madingley.RevisedPredation._TimeUnitsToHandlePotentialFoodItems">
            <summary>
            Cumulative number of time units to handle all of the potential kills from all cohorts
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation._CellArea">
            <summary>
            The area (in square km) of the grid cell
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation._CellAreaHectares">
            <summary>
            The area of the current grid cell in hectares
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation._PredatorAssimilationEfficiency">
            <summary>
            The proportion of biomass eaten assimilated by predators
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation._PredatorNonAssimilation">
            <summary>
            The proportion of biomass eaten not assimilated by predators
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation._DietIsAllSpecial">
            <summary>
            Boolean to indicate if the diet of marine species is "allspecial"
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation._PredatorLogOptimalPreyBodySizeRatio">
            <summary>
            Double to hold the log optimal prey body size ratio for the acting predator cohort
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation._BodyMassPrey">
            <summary>
            Individual body mass of the prey cohort
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation._BodyMassPredator">
            <summary>
            Individual body mass of the acting (predator) cohort
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation.LogPredatorMassPlusPredatorLogOptimalPreyBodySizeRatio">
            <summary>
            The logarithm of the predator boy mass plus the logarithm of the optimal prey body size ratio
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation._AbundancePredator">
            <summary>
            Abundance of the acting (predator) cohort
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation._CarnivoreFunctionalGroups">
            <summary>
            Identifies which functional groups are carnivores
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation.Track">
            <summary>
            A boolean which monitors whether or not to track individual cohorts
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation.NumberCohortsPerFunctionalGroupNoNewCohorts">
            <summary>
            Number of cohorts in each functional group that were present in the grid cell before this time step's new cohorts were created
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation.Utilities">
            <summary>
            Instance of the class to perform general functions
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation.RandomNumberGenerator">
            <summary>
            An instance of the simple random number generator class
            </summary>
        </member>
        <member name="M:Madingley.RevisedPredation.#ctor(System.Double,System.String)">
            <summary>
            Constructor for predation: assigns all parameter values
            </summary>
            <param name="cellArea">The area (in square km) of the grid cell</param>
            <param name="globalModelTimeStepUnit">The time step unit used in the model</param>
        </member>
        <member name="M:Madingley.RevisedPredation.InitializeEatingPerTimeStep(Madingley.GridCellCohortHandler,Madingley.GridCellStockHandler,Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions)">
            <summary>
            Initialises predation implementation each time step
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="gridCellStocks">The stocks in the current grid cell</param>
            <param name="madingleyCohortDefinitions">The definitions for cohorts in the model</param>
            <param name="madingleyStockDefinitions">The definitions for stocks in the model</param>
            <remarks>This only works if: a) predation is initialised in every grid cell; and b) if parallelisation is done by latitudinal strips
            It is critical to run this every time step</remarks>
        </member>
        <member name="M:Madingley.RevisedPredation.GetEatingPotentialMarine(Madingley.GridCellCohortHandler,Madingley.GridCellStockHandler,System.Int32[],System.Collections.Generic.SortedList{System.String,System.Double[]},Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions)">
            <summary>
            Calculate the potential number of prey that could be gained through predation on each cohort in the grid cell
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="gridCellStocks">The stocks in the current grid cell</param>
            <param name="actingCohort">The acting cohort</param>
            <param name="cellEnvironment">The environment in the current grid cell</param>
            <param name="madingleyCohortDefinitions">The functional group definitions for cohorts in the model</param>
            <param name="madingleyStockDefinitions">The functional group definitions for stocks  in the model</param>
        </member>
        <member name="M:Madingley.RevisedPredation.PopulateBinnedPreyAbundance(Madingley.GridCellCohortHandler,System.Int32[],System.Int32[],System.Double)">
            <summary>
            Create the matrix of prey abundances in each weight bin
            </summary>
            <param name="gridCellCohorts">Cohorts in this grid cell</param>
            <param name="actingCohort">The predator cohort</param>
            <param name="functionalGroupIndicesToEat">The functional groups which this predator eats</param>
            <param name="logOptimalPreyBodySizeRatio">The (log-transformed) optimal ratio of prey to predator body mass</param>
        </member>
        <member name="M:Madingley.RevisedPredation.GetEatingPotentialTerrestrial(Madingley.GridCellCohortHandler,Madingley.GridCellStockHandler,System.Int32[],System.Collections.Generic.SortedList{System.String,System.Double[]},Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions)">
            <summary>
            Calculate the potential number of prey that could be gained through predation on each cohort in the grid cell
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="gridCellStocks">The stocks in the current grid cell</param>
            <param name="actingCohort">The acting cohort</param>
            <param name="cellEnvironment">The environment in the current grid cell</param>
            <param name="madingleyCohortDefinitions">The functional group definitions for cohorts in the model</param>
            <param name="madingleyStockDefinitions">The functional group definitions for stocks  in the model</param>
        </member>
        <member name="M:Madingley.RevisedPredation.RunEating(Madingley.GridCellCohortHandler,Madingley.GridCellStockHandler,System.Int32[],System.Collections.Generic.SortedList{System.String,System.Double[]},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Double}},Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,Madingley.ProcessTracker,System.UInt32,System.Boolean,System.String,Madingley.MadingleyModelInitialisation)">
            <summary>
            Apply the changes from predation to prey cohorts, and update deltas for the predator cohort
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="gridCellStocks">The stocks in the current grid cell</param>
            <param name="actingCohort">The acting cohort</param>
            <param name="cellEnvironment">The environment in the current grid cell</param>
            <param name="deltas">The sorted list to track changes in biomass and abundance of the acting cohort in this grid cell</param>
            <param name="madingleyCohortDefinitions">The functional group definitions for cohorts in the model</param>
            <param name="madingleyStockDefinitions">The functional group definitions for stocks in the model</param>
            <param name="trackProcesses">An instance of ProcessTracker to hold diagnostics for predation</param>
            <param name="currentTimestep">The current model time step</param>
            <param name="specificLocations">Whether the model is being run for specific locations</param>
            <param name="outputDetail">The level of output detail used in this model run</param>
            <param name="initialisation">The Madingley Model initialisation</param>
        </member>
        <member name="P:Madingley.RevisedPredation.TimeUnitImplementation">
            <summary>
            Get the time unit associated with this particular implementation of predation and its parameters
            </summary>
        </member>
        <member name="P:Madingley.RevisedPredation.AssimilationEfficiency">
            <summary>
            Get and set the assimilation efficiency of eaten prey mass into predator body mass
            </summary>
        </member>
        <member name="P:Madingley.RevisedPredation.HandlingTimeScalarTerrestrial">
            <summary>
            Get the scalar of the relationship between handling time and the function of predator and prey masses
            </summary>
        </member>
        <member name="P:Madingley.RevisedPredation.HandlingTimeExponentTerrestrial">
            <summary>
            Get the exponent applied to predator mass in the handling time relationship
            </summary>
        </member>
        <member name="P:Madingley.RevisedPredation.HandlingTimeScalarMarine">
            <summary>
            Get the scalar of the relationship between handling time and the function of predator and prey masses
            </summary>
        </member>
        <member name="P:Madingley.RevisedPredation.HandlingTimeExponentMarine">
            <summary>
            Get the exponent applied to predator mass in the handling time relationship
            </summary>
        </member>
        <member name="P:Madingley.RevisedPredation.ReferenceMass">
            <summary>
            Get and set the reference mass property
            </summary>
        </member>
        <member name="P:Madingley.RevisedPredation.SpecificPredatorHandlingTimeScaling">
            <summary>
            Get the pre-calculated specific predator handling time scaling to prevent having to do it for every prey cohort
            </summary>
        </member>
        <member name="P:Madingley.RevisedPredation.KillRateConstant">
            <summary>
            Get the maximum kill rate for a predator of 1 g on prey of an optimal size
            </summary>
        </member>
        <member name="P:Madingley.RevisedPredation.SpecificPredatorKillRateConstant">
            <summary>
            Get the pre-calculated maximum kill rate for a specific predator of 1 g on prey of an optimal size
            </summary>
        </member>
        <member name="P:Madingley.RevisedPredation.OptimalPreyPredatorMassRatioTerrestrial">
            <summary>
            Get and set the optimal ratio of prey to predator body masses for terrestrial animals
            </summary>
        </member>
        <member name="P:Madingley.RevisedPredation.OptimalPreyPredatorMassRatioMarine">
            <summary>
            Get and set the optimal ratio of prey to predator body masses for marine animals
            </summary>
        </member>
        <member name="P:Madingley.RevisedPredation.SpecificPredatorTimeUnitsEatingPerGlobalTimeStep">
            <summary>
            Get the pre-calculated proportion of time spent eating (in appropriate time units for this class) for a specific predator
            </summary>
        </member>
        <member name="P:Madingley.RevisedPredation.FeedingPreferenceStandardDeviation">
            <summary>
            Get the standard deviation in attack rates around the optimal prey to predator mass ratio
            </summary>
        </member>
        <member name="P:Madingley.RevisedPredation.KillRateConstantMassExponent">
            <summary>
            Get and set the exponent on body mass in the relationship between body mass and attack rate
            </summary>
        </member>
        <member name="P:Madingley.RevisedPredation.DeltaT">
            <summary>
            Get the scalar to convert from the time step units used by this predation implementation to global model time step units
            </summary>
        </member>
        <member name="P:Madingley.RevisedPredation.ProportionTimeEating">
            <summary>
            Get and set the proportion of time that a predator cohort spends eating
            </summary>
        </member>
        <member name="P:Madingley.RevisedPredation.AbundancesEaten">
            <summary>
            Return the jagged array mirroring the grid cell cohorts to store the abundance gained from predation on each cohort
            </summary>
        </member>
        <member name="P:Madingley.RevisedPredation.PotentialAbundanceEaten">
            <summary>
            Get the jagged array mirroring the grid cell cohorts to store the potential abundance gained from predation on each cohort
            </summary>
        </member>
        <member name="P:Madingley.RevisedPredation.FunctionalGroupIndicesToEat">
            <summary>
            Get the list of cohort functional group indices ot be eaten in predation
            </summary>
        </member>
        <member name="P:Madingley.RevisedPredation.TotalBiomassEatenByCohort">
            <summary>
            Get the total biomass eaten by the acting cohort
            </summary>
        </member>
        <member name="P:Madingley.RevisedPredation.TimeUnitsToHandlePotentialFoodItems">
            <summary>
            Get and set the cumulative number of time units to handle all of the potential kills from all cohorts
            </summary>
        </member>
        <member name="P:Madingley.RevisedPredation.CellArea">
            <summary>
            Get and set the area of the grid cell
            </summary>
        </member>
        <member name="P:Madingley.RevisedPredation.CellAreaHectares">
            <summary>
            Get and set the area of the current grid cell in hectares
            </summary>
        </member>
        <member name="T:Madingley.RevisedPredation.ThreadLockedParallelVariables">
            <summary>
            Holds the thread-local variables to track numbers of extinctions and productions of cohorts
            </summary>
            <todoD>Needs a little tidying and checking of access levels</todoD>
        </member>
        <member name="F:Madingley.RevisedPredation.ThreadLockedParallelVariables.Extinctions">
            <summary>
            Thread-local variables to track numbers of cohort extinctions and productions
            </summary>
        </member>
        <member name="F:Madingley.RevisedPredation.ThreadLockedParallelVariables.Productions">
            <summary>
            Thread-local variables to track numbers of cohort extinctions and productions
            </summary>
        </member>
        <member name="T:Madingley.MetabolismEctotherm">
            <summary>
            A formulation of the metabolism process for Ectothermic organisms
            </summary>
            <remarks>Functional form Brown (2004) Metabolic Theory of Ecology.
            Parameters from fitted relationship in Dillon et al (2010) Global Metabolic impacts of recent climate warming, Nature
            Currently mass assigned to reproductive potential is not metabolised
            Assumes that ectothermic organisms have a body temperature equal to the ambient temperature,
            therefore metabolising at that ambient temperature</remarks>
            <summary>
            A formulation of the metabolism process for Ectothermic organisms
            </summary>
            <remarks>Functional form and parameters taken from fitted relationship in Brown's (2004) Metabolic Theory of Ecology.
            Currently mass assigned to reproductive potential is not metabolised
            Assumes that ectothermic organisms have a body temperature equal to the ambient temperature,
            therefore metabolising at that ambient temperature</remarks>
        </member>
        <member name="T:Madingley.IMetabolismImplementation">
            <summary>
            Interface for implementations of the ecological process of metabolism
            </summary>
        </member>
        <member name="M:Madingley.IMetabolismImplementation.RunMetabolism(Madingley.GridCellCohortHandler,Madingley.GridCellStockHandler,System.Int32[],System.Collections.Generic.SortedList{System.String,System.Double[]},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Double}},Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.UInt32,System.UInt32)">
            <summary>
            Calculate the biomass lost through metabolism and update the relevant deltas for the acting cohort
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="gridCellStocks">The stocks in the current grid cell</param>
            <param name="actingCohort">The position of the acting cohort in the jagged array of grid cell cohorts</param>
            <param name="cellEnvironment">The environment in the current grid cell</param>
            <param name="deltas">The sorted list to track changes in biomass and abundance of the acting cohort in this grid cell</param>
            <param name="madingleyCohortDefinitions">The definitions for cohort functional groups in the model</param>
            <param name="madingleyStockDefinitions">The definitions for stock functional groups in the model</param>
            <param name="currentTimestep">The current model time step</param>
            <param name="currentMonth">The current month in the model</param>
        </member>
        <member name="P:Madingley.IMetabolismImplementation.TimeUnitImplementation">
            <summary>
            Time units associated with the formulation of metabolism
            </summary>
        </member>
        <member name="P:Madingley.IMetabolismImplementation.DeltaT">
            <summary>
            Scalar to convert from time units associated with metabolism to the global model time step unit
            </summary>
        </member>
        <member name="F:Madingley.MetabolismEctotherm._TimeUnitImplementation">
            <summary>
            The time unit for this metabolism implementation and its parameters
            </summary>
        </member>
        <member name="F:Madingley.MetabolismEctotherm._MetabolismMassExponent">
            <summary>
            Exponent describing the mass-dependency of field metabolic rate
            </summary>
        </member>
        <member name="F:Madingley.MetabolismEctotherm._BasalMetabolismMassExponent">
            <summary>
            Exponent describing the mass-dependency of basal metabolic rate
            </summary>
        </member>
        <member name="F:Madingley.MetabolismEctotherm._NormalizationConstant">
            <summary>
            Normalization constant for field metabolic rate  (independent of mass and temperature)
            </summary>
        </member>
        <member name="F:Madingley.MetabolismEctotherm._NormalizationConstantBMR">
            <summary>
            Normalization constatnt for basal metabolic rate  (independent of mass and temperature)
            </summary>
        </member>
        <member name="F:Madingley.MetabolismEctotherm._ActivationEnergy">
            <summary>
            The activation energy of metabolism
            </summary>
        </member>
        <member name="F:Madingley.MetabolismEctotherm._BoltzmannConstant">
            <summary>
            Boltzmann's constant
            </summary>
        </member>
        <member name="F:Madingley.MetabolismEctotherm._EnergyScalar">
            <summary>
            Scalar to convert energy in kJ to energy in grams mass
            </summary>
        </member>
        <member name="F:Madingley.MetabolismEctotherm.WarmingTolerance">
            <summary>
            The distance of the Max critical temp from the ambient temperature
            </summary>
        </member>
        <member name="F:Madingley.MetabolismEctotherm.ThermalSafetyMargin">
            <summary>
            Distance of the Optimal performance temperature from ambient temperature
            </summary>
        </member>
        <member name="F:Madingley.MetabolismEctotherm.Topt">
            <summary>
            Optimal performance temperature
            </summary>
        </member>
        <member name="F:Madingley.MetabolismEctotherm.CTmax">
            <summary>
            Maximum critical temperature
            </summary>
        </member>
        <member name="F:Madingley.MetabolismEctotherm.CTmin">
            <summary>
            Minimum critical temperature
            </summary>
        </member>
        <member name="F:Madingley.MetabolismEctotherm.AmbientTemp">
            <summary>
            The ambient temperature
            </summary>
        </member>
        <member name="F:Madingley.MetabolismEctotherm.DTR">
            <summary>
            The diurnal temperature range
            </summary>
        </member>
        <member name="M:Madingley.MetabolismEctotherm.InitialiseMetabolismParameters">
            <summary>
            Initialises values for all ecological parameters for metabolism
            </summary>
            <remarks>
            Metabolism exponent and normalization constant calculated based on Nagy et al (1999) field metabolic rates.
            Use the Brown (2004) functional form and take the activation energy for metabolism from there
            The scalar to convert kJ to grams mass currently a very rough estimate based on the calorific values
            of fat, protein and carbohydrate
            </remarks>
        </member>
        <member name="M:Madingley.MetabolismEctotherm.WriteOutParameterValues(System.IO.StreamWriter)">
            <summary>
            Write out the values of the parameters to an output file
            </summary>
            <param name="sw">A streamwriter object to write the parameter values to</param>
        </member>
        <member name="M:Madingley.MetabolismEctotherm.CalculateIndividualMetabolicRate(System.Double,System.Double,System.Double)">
            <summary>
            Calculate metabolic loss in grams for an individual
            </summary>
            <param name="individualBodyMass">The body mass of individuals in the acting cohort</param>
            <param name="temperature">The ambient temperature, in degrees Kelvin</param>
            <param name="proportionTimeActive">The proportion of time that the cohort is active for</param>
            <returns>The metabolic loss for an individual</returns>
        </member>
        <member name="F:Madingley.MetabolismEctotherm._DeltaT">
            <summary>
            Scalar to convert from the time units used by this metabolism implementation to the global model time step units
            </summary>
        </member>
        <member name="F:Madingley.MetabolismEctotherm._TemperatureUnitsConvert">
            <summary>
            Constant to convert temperature in degrees Celsius to temperature in Kelvin
            </summary>
        </member>
        <member name="F:Madingley.MetabolismEctotherm.Utilities">
            <summary>
            Instance of the class to perform general functions
            </summary>
        </member>
        <member name="F:Madingley.MetabolismEctotherm._ProportionTimeActiveCalculatedThisTimestep">
            <summary>
            Whether the proportion of time that the cohort is active has been recalculated this time step
            </summary>
        </member>
        <member name="M:Madingley.MetabolismEctotherm.#ctor(System.String)">
            <summary>
            Constructor for metabolism: assigns all parameter values
            </summary>
        </member>
        <member name="M:Madingley.MetabolismEctotherm.RunMetabolism(Madingley.GridCellCohortHandler,Madingley.GridCellStockHandler,System.Int32[],System.Collections.Generic.SortedList{System.String,System.Double[]},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Double}},Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.UInt32,System.UInt32)">
            <summary>
            Run metabolism for the acting cohort
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="gridCellStocks">The stocks in the current grid cell</param>
            <param name="actingCohort">The position of the acting cohort in the jagged array of grid cell cohorts</param>
            <param name="cellEnvironment">The environment in the current grid cell</param>
            <param name="deltas">The sorted list to track changes in biomass and abundance of the acting cohort in this grid cell</param>
            <param name="madingleyCohortDefinitions">The definitions for cohort functional groups in the model</param>
            <param name="madingleyStockDefinitions">The definitions for the stock functional groups in the model</param>
            <param name="currentTimestep">The current model time step</param>
            <param name="currentMonth">The current model month</param>
        </member>
        <member name="P:Madingley.MetabolismEctotherm.TimeUnitImplementation">
            <summary>
            Get the time unit for this metabolism implementation and its parameters
            </summary>
        </member>
        <member name="P:Madingley.MetabolismEctotherm.DeltaT">
            <summary>
            Get the scalar to convert from the time units used by this metabolism implementation to the global model time step units
            </summary>
        </member>
        <member name="P:Madingley.MetabolismEctotherm.ProportionTimeActiveCalculatedThisTimestep">
            <summary>
            Get whether the proportion of time that the cohort is active has been recalculated this time step
            </summary>
        </member>
        <member name="T:Madingley.MetabolismEndotherm">
            <summary>
            A formulation of the metabolism process for Endothermic organisms
            </summary>
            <remarks>Functional form and parameters taken from fitted relationship in Brown's (2004) Metabolic Theory of Ecology.
            Currently mass assigned to reproductive potential is not metabolised
            Assumes that endothermic organisms metabolise at 37degC, and that they can adapt physiologicaly to do this without extra costs</remarks>
            <summary>
            A formulation of the metabolism process for Endothermic organisms
            </summary>
            <remarks>Functional form and parameters taken from fitted relationship in Brown's (2004) Metabolic Theory of Ecology.
            Currently mass assigned to reproductive potential is not metabolised
            Assumes that endothermic organisms metabolise at 37degC, and that they can adapt physiologicaly to do this without extra costs</remarks>
        </member>
        <member name="F:Madingley.MetabolismEndotherm._TimeUnitImplementation">
            <summary>
            The time unit for this metabolism implementation and its parameters
            </summary>
        </member>
        <member name="F:Madingley.MetabolismEndotherm._MetabolismMassExponent">
            <summary>
            Exponent describing the mass-dependency of metabolic rate
            </summary>
        </member>
        <member name="F:Madingley.MetabolismEndotherm._NormalizationConstant">
            <summary>
            Normalization constant for field metabolic rate  (independent of mass and temperature)
            </summary>
        </member>
        <member name="F:Madingley.MetabolismEndotherm._ActivationEnergy">
            <summary>
            The activation energy of metabolism
            </summary>
        </member>
        <member name="F:Madingley.MetabolismEndotherm._BoltzmannConstant">
            <summary>
            Boltzmann's constant
            </summary>
        </member>
        <member name="F:Madingley.MetabolismEndotherm._EnergyScalar">
            <summary>
            Scalar to convert energy in kJ to energy in grams mass
            </summary>
        </member>
        <member name="F:Madingley.MetabolismEndotherm._EndothermBodyTemperature">
            <summary>
            Scalar value for endotherm body temperature
            </summary>
        </member>
        <member name="M:Madingley.MetabolismEndotherm.InitialiseMetabolismParameters">
            <summary>
            Initialises values for all ecological parameters for metabolism
            </summary>
            <remarks>
            Metabolism exponent and normalization constant calculated based on Nagy et al (1999) field metabolic rates.
            Use the Brown (2004) functional form and take the activation energy for metabolism from there
            The scalar to convert kJ to grams mass currently a very rough estimate based on the calorific values
            of fat, protein and carbohydrate
            </remarks>
        </member>
        <member name="M:Madingley.MetabolismEndotherm.WriteOutParameterValues(System.IO.StreamWriter)">
            <summary>
            Write out the values of the parameters to an output file
            </summary>
            <param name="sw">A streamwriter object to write the parameter values to</param>
        </member>
        <member name="M:Madingley.MetabolismEndotherm.CalculateIndividualMetabolicRate(System.Double,System.Double)">
            <summary>
            Calculate metabolic loss in grams for an individual
            </summary>
            <param name="individualBodyMass">The body mass of individuals in the acting cohort</param>
            <param name="temperature">The ambient temperature, in degrees Kelvin</param>
            <returns>The metabolic loss for an individual</returns>
        </member>
        <member name="F:Madingley.MetabolismEndotherm._DeltaT">
            <summary>
            Scalar to convert from the time units used by this metabolism implementation to the global model time step units
            </summary>
        </member>
        <member name="F:Madingley.MetabolismEndotherm._TemperatureUnitsConvert">
            <summary>
            Constant to convert temperature in degrees Celsius to temperature in Kelvin
            </summary>
        </member>
        <member name="F:Madingley.MetabolismEndotherm.Utilities">
            <summary>
            Instance of the class to perform general functions
            </summary>
        </member>
        <member name="M:Madingley.MetabolismEndotherm.#ctor(System.String)">
            <summary>
            Constructor for metabolism: assigns all parameter values
            </summary>
        </member>
        <member name="M:Madingley.MetabolismEndotherm.RunMetabolism(Madingley.GridCellCohortHandler,Madingley.GridCellStockHandler,System.Int32[],System.Collections.Generic.SortedList{System.String,System.Double[]},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Double}},Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.UInt32,System.UInt32)">
            <summary>
            Run metabolism for the acting cohort
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="gridCellStocks">The stocks in the current grid cell</param>
            <param name="actingCohort">The position of the acting cohort in the jagged array of grid cell cohorts</param>
            <param name="cellEnvironment">The environment in the current grid cell</param>
            <param name="deltas">The sorted list to track changes in biomass and abundance of the acting cohort in this grid cell</param>
            <param name="madingleyCohortDefinitions">The definitions for cohort functional groups in the model</param>
            <param name="madingleyStockDefinitions">The definitions for the stock functional groups in the model</param>
            <param name="currentTimestep">The current model time step</param>
            <param name="currentMonth">The current model month</param>
        </member>
        <member name="P:Madingley.MetabolismEndotherm.TimeUnitImplementation">
            <summary>
            Get the time unit for this metabolism implementation and its parameters
            </summary>
        </member>
        <member name="P:Madingley.MetabolismEndotherm.DeltaT">
            <summary>
            Get the scalar to convert from the time units used by this metabolism implementation to the global model time step units
            </summary>
        </member>
        <member name="T:Madingley.Metabolism">
            <summary>
            Performs metabolism
            </summary>
        </member>
        <member name="T:Madingley.IEcologicalProcessWithinGridCell">
            <summary>
            Interface for ecological process code
            </summary>
        </member>
        <member name="M:Madingley.IEcologicalProcessWithinGridCell.RunEcologicalProcess(Madingley.GridCellCohortHandler,Madingley.GridCellStockHandler,System.Int32[],System.Collections.Generic.SortedList{System.String,System.Double[]},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Double}},Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.UInt32,Madingley.ProcessTracker,Madingley.ThreadLockedParallelVariables@,System.Boolean,System.String,System.UInt32,Madingley.MadingleyModelInitialisation)">
            <summary>
            Run the ecological process
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="gridCellStocks">The stocks in the current grid cell</param>
            <param name="actingCohort">The position of the acting cohort in the jagged array of grid cell cohorts</param>
            <param name="cellEnvironment">The environment in the current grid cell</param>
            <param name="deltas">The sorted list to track changes in biomass and abundance of the acting cohort in this grid cell</param>
            <param name="madingleyCohortHandler">The definitions of cohort functional groups in the model</param>
            <param name="madingleyStockHandler">The definitions of stock functional groups in the model</param>
            <param name="currentTimestep">The current model time step</param>
            <param name="trackProcesses">An instance of ProcessTracker to hold diagnostics for this ecological process</param>
            <param name="partial">Thread-locked variables</param>
            <param name="specificLocations">Whether the model is being run for specific locations</param>
            <param name="outputDetail">The level of output detail used for this model simulation</param>
            <param name="currentMonth">The current model month</param>
            <param name="initialisation">The instance of the MadingleyModelInitialisation class for this simulation</param>
        </member>
        <member name="M:Madingley.IEcologicalProcessWithinGridCell.InitializeEcologicalProcess(Madingley.GridCellCohortHandler,Madingley.GridCellStockHandler,Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.String)">
            <summary>
            Initialises an implementation of the ecological process
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="gridCellStocks">The stocks in the current grid cell</param>
            <param name="madingleyCohortDefinitions">The definitions for cohort functional groups in the model</param>
            <param name="madingleyStockDefinitions">The definitions for stock functional groups in the model</param>
            <param name="implementationKey">The name of the specific implementation of this process to initialize</param>
        </member>
        <member name="F:Madingley.Metabolism.Implementations">
            <summary>
            The available implementations of the metabolism process
            </summary>
        </member>
        <member name="M:Madingley.Metabolism.#ctor(System.String)">
            <summary>
            Constructor Metabolism: fills the list of available implementations of metabolism
            </summary>
        </member>
        <member name="M:Madingley.Metabolism.InitializeEcologicalProcess(Madingley.GridCellCohortHandler,Madingley.GridCellStockHandler,Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.String)">
            <summary>
            Initializes an implementation of metabolism
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="gridCellStocks">The stocks in the current grid cell</param>
            <param name="madingleyCohortDefinitions">The definitions for cohort functional groups in the model</param>
            <param name="madingleyStockDefinitions">The definitions for stock  functional groups in the model</param>
            <param name="implementationKey">The name of the implementation of metabolism to initialize</param>
        </member>
        <member name="M:Madingley.Metabolism.RunEcologicalProcess(Madingley.GridCellCohortHandler,Madingley.GridCellStockHandler,System.Int32[],System.Collections.Generic.SortedList{System.String,System.Double[]},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Double}},Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.UInt32,Madingley.ProcessTracker,Madingley.ThreadLockedParallelVariables@,System.Boolean,System.String,System.UInt32,Madingley.MadingleyModelInitialisation)">
            <summary>
            Run metabolism
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="gridCellStocks">The stocks in the current grid cell</param>
            <param name="actingCohort">The position of the acting cohort in the jagged array of grid cell cohorts</param>
            <param name="cellEnvironment">The environment in the current grid cell</param>
            <param name="deltas">The sorted list to track changes in biomass and abundance of the acting cohort in this grid cell</param>
            <param name="madingleyCohortDefinitions">The definitions for cohort functional groups in the model</param>
            <param name="madingleyStockDefinitions">The definitions for stock functional groups in the model</param>
            <param name="currentTimestep">The current model time step</param>
            <param name="trackProcesses">An instance of ProcessTracker to hold diagnostics for metabolism</param>
            <param name="partial">Thread-locked variables</param>
            <param name="specificLocations">Whether the model is being run for specific locations</param>
            <param name="outputDetail">The level of output detail being used for the current model run</param>
            <param name="currentMonth">The current model month</param>
            <param name="initialisation">The Madingley Model initialisation</param>
        </member>
        <member name="T:Madingley.BackgroundMortality">
            <summary>
            A formulation of the process of background mortality, i.e. mortality from disease, accidents and other random events
            </summary>
            <summary>
            A formulation of the process of background mortality, i.e. mortality from disease, accidents and other random events
            </summary>
        </member>
        <member name="T:Madingley.IMortalityImplementation">
            <summary>
            Interface for implementations of the ecological process of mortality
            </summary>
        </member>
        <member name="M:Madingley.IMortalityImplementation.CalculateMortalityRate(Madingley.GridCellCohortHandler,System.Int32[],System.Double,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Double}},System.UInt32)">
            <summary>
            Calculate the proportion of individuals in a cohort that die through a particular type of mortality in a model time step
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="actingCohort">The position of the acting cohort in the jagged array of grid cell cohorts</param>
            <param name="bodyMassIncludingChangeThisTimeStep">The body mass that individuals in this cohort will have at the end of this time step</param>
            <param name="deltas">The sorted list to track changes in biomass and abundance of the acting cohort in this grid cell</param>
            <param name="currentTimestep">The current model time step</param>
            <returns>The number of individuals lost to a cohort through mortality</returns>
        </member>
        <member name="P:Madingley.IMortalityImplementation.TimeUnitImplementation">
            <summary>
            Time units associated with the formulation of mortality
            </summary>
        </member>
        <member name="P:Madingley.IMortalityImplementation.DeltaT">
            <summary>
            Scalar to convert from time units associated with mortality to the global model time step unit
            </summary>
        </member>
        <member name="F:Madingley.BackgroundMortality._TimeUnitImplementation">
            <summary>
            The time units associated with this background mortality implementation and its parameters
            </summary>
        </member>
        <member name="F:Madingley.BackgroundMortality._MortalityRate">
            <summary>
            Cohort background mortality rate - the proportion of individuals dying in a time step
            </summary>
        </member>
        <member name="M:Madingley.BackgroundMortality.WriteOutParameterValues(System.IO.StreamWriter)">
            <summary>
            Write out the values of the parameters to an output file
            </summary>
            <param name="sw">A streamwriter object to write the parameter values to</param>
        </member>
        <member name="M:Madingley.BackgroundMortality.CalculateMortalityRate(Madingley.GridCellCohortHandler,System.Int32[],System.Double,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Double}},System.UInt32)">
            <summary>
            Calculate the rate of individuals in a cohort that die from background mortality in a model time step
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="actingCohort">The position of the acting cohort in the jagged array of grid cell cohorts</param>
            <param name="bodyMassIncludingChangeThisTimeStep">The body mass of individuals in the acting cohort, including body mass change this time step through eating and mortality</param>
            <param name="deltas">The sorted list to track changes in biomass and abundance of the acting cohort in this grid cell</param>
            <param name="currentTimestep">The current model time step</param>
            <returns>The rate of individuals in the cohort that die from background mortality</returns>
        </member>
        <member name="F:Madingley.BackgroundMortality._DeltaT">
            <summary>
            Scalar to convert from the time step units used by this mortality implementation to global model time step units
            </summary>
        </member>
        <member name="M:Madingley.BackgroundMortality.#ctor(System.String)">
            <summary>
            Constructor for background mortality: assigns all parameter values
            </summary>
        </member>
        <member name="P:Madingley.BackgroundMortality.TimeUnitImplementation">
            <summary>
            Get the time units associated with this background mortality implementation and its parameters
            </summary>
        </member>
        <member name="P:Madingley.BackgroundMortality.MortalityRate">
            <summary>
            Get the cohort background mortality rate
            </summary>
        </member>
        <member name="P:Madingley.BackgroundMortality.DeltaT">
            <summary>
            Get the scalar to convert from the time step units used by this mortality implementation to global model time step units
            </summary>
        </member>
        <member name="T:Madingley.Eating">
            <summary>
            Performs eating
            </summary>
        </member>
        <member name="F:Madingley.Eating.Implementations">
            <summary>
            The available implementations of the eating process
            </summary>
        </member>
        <member name="F:Madingley.Eating.TotalTimeToEatForOmnivores">
            <summary>
            Tracks the total time to handle all potential food for omnivores
            </summary>
        </member>
        <member name="F:Madingley.Eating.RandomNumberGenerator">
            <summary>
            An instance of the simple random number generator class
            </summary>
        </member>
        <member name="F:Madingley.Eating.PreviousTrophicIndex">
            <summary>
            Holds the trophic index of the acting cohort from the previous timestep
            </summary>
        </member>
        <member name="M:Madingley.Eating.#ctor(System.Double,System.String)">
            <summary>
            Constructor for Eating: fills the list of available implementations of eating
            </summary>
        </member>
        <member name="M:Madingley.Eating.InitializeEcologicalProcess(Madingley.GridCellCohortHandler,Madingley.GridCellStockHandler,Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.String)">
            <summary>
            Initializes an implementation of eating
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="gridCellStocks">The stocks in the current grid cell</param>
            <param name="madingleyCohortDefinitions">The definitions for cohort functional groups in the model</param>
            <param name="madingleyStockDefinitions">The definitions for stock functional groups in the model</param>
            <param name="implementationKey">The name of the implementation of eating to initialize</param>
            <remarks>Eating needs to be initialized every time step</remarks>
        </member>
        <member name="M:Madingley.Eating.RunEcologicalProcess(Madingley.GridCellCohortHandler,Madingley.GridCellStockHandler,System.Int32[],System.Collections.Generic.SortedList{System.String,System.Double[]},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Double}},Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.UInt32,Madingley.ProcessTracker,Madingley.ThreadLockedParallelVariables@,System.Boolean,System.String,System.UInt32,Madingley.MadingleyModelInitialisation)">
            <summary>
            Run eating
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="gridCellStocks">The stocks in the current grid cell</param>
            <param name="actingCohort">The position of the acting cohort in the jagged array of grid cell cohorts</param>
            <param name="cellEnvironment">The environment in the current grid cell</param>
            <param name="deltas">The sorted list to track changes in biomass and abundance of the acting cohort in this grid cell</param>
            <param name="madingleyCohortDefinitions">The definitions for cohort functional groups in the model</param>
            <param name="madingleyStockDefinitions">The definitions for stock functional groups in the model</param>
            <param name="currentTimestep">The current model time step</param>
            <param name="trackProcesses">An instance of ProcessTracker to hold diagnostics for eating</param>
            <param name="partial">Thread-locked variables</param>
            <param name="specificLocations">Whether the model is being run for specific locations</param>
            <param name="outputDetail">The level of output detail being used for the current model run</param>
            <param name="currentMonth">The current model month</param>
            <param name="initialisation">The Madingley Model initialisation</param>
        </member>
        <member name="T:Madingley.SenescenceMortality">
            <summary>
            A formulation of the process of senescence mortality
            </summary>
            <summary>
            A formulation of the process of senescence mortality
            </summary>
        </member>
        <member name="F:Madingley.SenescenceMortality._TimeUnitImplementation">
            <summary>
            The time unit associated with this senescence mortality implementation and its parameters
            </summary>
        </member>
        <member name="F:Madingley.SenescenceMortality._MortalityRate">
            <summary>
            Cohort senescence mortality rate scalar: the rate of individuals dying in a time step when they reach maturity
            </summary>
        </member>
        <member name="M:Madingley.SenescenceMortality.WriteOutParameterValues(System.IO.StreamWriter)">
            <summary>
            Write out the parameter values to an output file
            </summary>
            <param name="sw">A streamwriter object to write the parameter values to</param>
        </member>
        <member name="M:Madingley.SenescenceMortality.CalculateMortalityRate(Madingley.GridCellCohortHandler,System.Int32[],System.Double,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Double}},System.UInt32)">
            <summary>
            Calculate the rate of individuals in a cohort that die from senescence mortality in a model time step
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="actingCohort">The position of the acting cohort in the jagged array of grid cell cohorts</param>
            <param name="bodyMassIncludingChangeThisTimeStep">The body mass of individuals in the acting cohort, including body mass change this time step through eating and mortality</param>
            <param name="deltas">The sorted list to track changes in biomass and abundance of the acting cohort in this grid cell</param>
            <param name="currentTimestep">The current model time step</param>
            <returns>The rate of individuals in the cohort that die from senescence mortality</returns>
        </member>
        <member name="F:Madingley.SenescenceMortality._DeltaT">
            <summary>
            Scalar to convert from the time step units used by this mortality implementation to global model time step units
            </summary>
        </member>
        <member name="F:Madingley.SenescenceMortality.Utilities">
            <summary>
            Instance of the class to perform general functions
            </summary>
        </member>
        <member name="M:Madingley.SenescenceMortality.#ctor(System.String)">
            <summary>
            Constructor for senscence mortality: assigns all parameter values
            </summary>
        </member>
        <member name="P:Madingley.SenescenceMortality.TimeUnitImplementation">
            <summary>
            Get the time unit associated with this senescence mortality implementation and its parameters
            </summary>
        </member>
        <member name="P:Madingley.SenescenceMortality.MortalityRate">
            <summary>
            Get the cohort senescence mortality rate scalar
            </summary>       
        </member>
        <member name="P:Madingley.SenescenceMortality.DeltaT">
            <summary>
            Get the scalar to convert from the time step units used by this mortality implementation to global model time step units
            </summary>
        </member>
        <member name="T:Madingley.StarvationMortality">
            <summary>
            A formulation of the process of starvation mortality
            </summary>
            <summary>
            A formulation of the process of starvation mortality
            </summary>
        </member>
        <member name="F:Madingley.StarvationMortality._TimeUnitImplementation">
            <summary>
            The time unit associated with this starvation mortality implementation and its parameters
            </summary>
        </member>
        <member name="F:Madingley.StarvationMortality._LogisticInflectionPoint">
            <summary>
            The inflection point of the curve describing the relationship between body mass and mortality rate
            </summary>
        </member>
        <member name="F:Madingley.StarvationMortality._LogisticScalingParameter">
            <summary>
            The steepness of the curve describing the relationship between body mass and mortality rate
            </summary>
        </member>
        <member name="F:Madingley.StarvationMortality._MaximumStarvationRate">
            <summary>
            The asymptote of the curve describing the relationship between body mass and mortality rate
            </summary>
        </member>
        <member name="M:Madingley.StarvationMortality.WriteOutParameterValues(System.IO.StreamWriter)">
            <summary>
            Write out the values of the parameters to an output file
            </summary>
            <param name="sw">A streamwriter object to write the parameter values to</param>
        </member>
        <member name="M:Madingley.StarvationMortality.CalculateMortalityRate(Madingley.GridCellCohortHandler,System.Int32[],System.Double,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Double}},System.UInt32)">
            <summary>
            Calculate the proportion of individuals in a cohort that die from starvation mortality each time step
            </summary>
            <param name="gridCellCohorts">The cohorts  in the current grid cell</param>
            <param name="actingCohort">The position of the acting cohort in the jagged array of grid cell cohorts</param>
            <param name="bodyMassIncludingChangeThisTimeStep">Body mass including change from other ecological functions this time step; should not exceed adult mass</param>
            <param name="deltas">The sorted list to track changes in biomass and abundance of the acting cohort in this grid cell</param>
            <param name="currentTimestep">The current model time step</param>
            <returns>The proportion of individuals in the cohort that die from starvation mortality</returns>
        </member>
        <member name="M:Madingley.StarvationMortality.CalculateStarvationRate(Madingley.GridCellCohortHandler,System.Int32[],System.Double,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Double}})">
            <summary>
            Calculates the rate of starvation mortality given current body mass and the maximum body mass ever achieved. Note that metabolic costs are already included in the deltas passed in
            the body mass including change this time step, so no change in body mass should mean no starvation (as metabolic costs have already been met)
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="actingCohort">The position of the acting cohort in the jagged array of grid cell cohorts</param>
            <param name="deltas">The sorted list to track changes in biomass and abundance of the acting cohort in this grid cell</param>
            <param name="bodyMassIncludingChangeThisTimeStep">Body mass including change from other ecological functions this time step; should not exceed adult mass</param>
            <returns>The starvation mortality rate in mortality formulation time step units</returns>
        </member>
        <member name="F:Madingley.StarvationMortality._DeltaT">
            <summary>
            Scalar to convert from the time step units used by this mortality implementation to global model time step units
            </summary>
        </member>
        <member name="M:Madingley.StarvationMortality.#ctor(System.String)">
            <summary>
            Constructor for starvation mortality: assigns all parameter values
            
            </summary>
        </member>
        <member name="P:Madingley.StarvationMortality.TimeUnitImplementation">
            <summary>
            Get the time unit associated with this starvation mortality implementation and its parameters
            </summary>
        </member>
        <member name="P:Madingley.StarvationMortality.LogisticInflectionPoint">
            <summary>
            Get the inflection point of the curve describing the relationship between body mass and mortality rate
            </summary>
        </member>
        <member name="P:Madingley.StarvationMortality.LogisticScalingParameter">
            <summary>
            Get the steepness of the curve describing the relationship between body mass and mortality rate
            </summary>
        </member>
        <member name="P:Madingley.StarvationMortality.MaximumStarvationRate">
            <summary>
            Get the asymptote of the curve describing the relationship between body mass and mortality rate
            </summary>
        </member>
        <member name="P:Madingley.StarvationMortality.DeltaT">
            <summary>
            Get the scalar to convert from the time step units used by this mortality implementation to global model time step units
            </summary>
        </member>
        <member name="T:Madingley.Mortality">
            <summary>
            Performs mortality
            </summary>
        </member>
        <member name="F:Madingley.Mortality.Implementations">
            <summary>
            The available implementations of the mortality process
            </summary>
        </member>
        <member name="M:Madingley.Mortality.#ctor(System.String)">
            <summary>
            Constructor for Mortality: fills the list with available implementations of mortality
            <param name="globalModelTimeStepUnit">The time step for the global model</param>
            </summary>
        </member>
        <member name="M:Madingley.Mortality.InitializeEcologicalProcess(Madingley.GridCellCohortHandler,Madingley.GridCellStockHandler,Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.String)">
            <summary>
            Initialize an implementation of mortality. This is only in here to satisfy the requirements of IEcologicalProcessAcrossGridCells
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="gridCellStocks">The stocks in the current grid cell</param>
            <param name="madingleyCohortDefinitions">The definitions for cohort functional groups in the model</param>
            <param name="madingleyStockDefinitions">The definitions for stock functional groups in the model</param>
            <param name="implementationKey">The name of the implementation of mortality to initialize</param>
        </member>
        <member name="M:Madingley.Mortality.RunEcologicalProcess(Madingley.GridCellCohortHandler,Madingley.GridCellStockHandler,System.Int32[],System.Collections.Generic.SortedList{System.String,System.Double[]},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Double}},Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.UInt32,Madingley.ProcessTracker,Madingley.ThreadLockedParallelVariables@,System.Boolean,System.String,System.UInt32,Madingley.MadingleyModelInitialisation)">
            <summary>
            Run mortality
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="gridCellStocks">The stocks in the current grid cell</param>
            <param name="actingCohort">The position of the acting cohort in the jagged array of grid cell cohorts</param>
            <param name="cellEnvironment">The environment in the current grid cell</param>
            <param name="deltas">The sorted list to track changes in biomass and abundance of the acting cohort in this grid cell</param>
            <param name="madingleyCohortDefinitions">The definitions for cohort functional groups in the model</param>
            <param name="madingleyStockDefinitions">The definitions for stock functional groups in the model</param>
            <param name="currentTimestep">The current model time step</param>
            <param name="trackProcesses">An instance of ProcessTracker to hold diagnostics for mortality</param>
            <param name="partial">Thread-locked variables</param>
            <param name="specificLocations">Whether the model is being run for specific locations</param>
            <param name="outputDetail">The level output detail being used for the current model run</param>
            <param name="currentMonth">The current model month</param>
            <param name="initialisation">The Madingley Model initialisation</param>
        </member>
        <member name="T:Madingley.IReproductionImplementation">
            <summary>
            Interface for implementations of the ecological process of reproduction
            </summary>
        </member>
        <member name="M:Madingley.IReproductionImplementation.RunReproductionEvents(Madingley.GridCellCohortHandler,Madingley.GridCellStockHandler,System.Int32[],System.Collections.Generic.SortedList{System.String,System.Double[]},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Double}},Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.UInt32,Madingley.ProcessTracker,Madingley.ThreadLockedParallelVariables@,System.Boolean,System.UInt32)">
            <summary>
            Generate new cohorts from reproductive potential mass
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="gridCellStocks">The stocks in the current grid cell</param>
            <param name="actingCohort">The position of the acting cohort in the jagged array of grid cell cohorts</param>
            <param name="cellEnvironment">The environment in the current grid cell</param>
            <param name="deltas">The sorted list to track changes in biomass and abundance of the acting cohort in this grid cell</param>
            <param name="madingleyCohortDefinitions">The definitions for cohort functional groups in the model</param>
            <param name="madingleyStockDefinitions">The definitions for stock functional groups in the model</param>
            <param name="currentTimestep">The current model time step</param>
            <param name="trackProcesses">An instance of ProcessTracker to hold diagnostics for eating</param>
            <param name="partial">Thread-locked variables</param>
            <param name="iteroparous">Whether the acting cohort is iteroparous, as opposed to semelparous</param>
            <param name="currentMonth">The current model month</param>
        </member>
        <member name="M:Madingley.IReproductionImplementation.RunReproductiveMassAssignment(Madingley.GridCellCohortHandler,Madingley.GridCellStockHandler,System.Int32[],System.Collections.Generic.SortedList{System.String,System.Double[]},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Double}},Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.UInt32,Madingley.ProcessTracker)">
            <summary>
            Assigns surplus body mass to reproductive potential mass
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="gridCellStocks">The stocks in the current grid cell</param>
            <param name="actingCohort">The position of the acting cohort in the jagged array of grid cell cohorts</param>
            <param name="cellEnvironment">The environment in the current grid cell</param>
            <param name="deltas">The sorted list to track changes in biomass and abundance of the acting cohort in this grid cell</param>
            <param name="madingleyCohortDefinitions">The definitions for cohort functional groups in the model</param>
            <param name="madingleyStockDefinitions">The definitions for stock functional groups in the model</param>
            <param name="currentTimestep">The current model time step</param>
            <param name="trackProcesses">An instance of ProcessTracker to hold diagnostics for reproduction</param>
        </member>
        <member name="P:Madingley.IReproductionImplementation.TimeUnitImplementation">
            <summary>
            Time units associated with the formulation of reproduction
            </summary>
        </member>
        <member name="P:Madingley.IReproductionImplementation.DeltaT">
            <summary>
            Scalar to convert from the time units associated with reproduction to the global model time step unit
            </summary>
        </member>
        <member name="T:Madingley.ReproductionBasic">
            <summary>
            A formulation of the process of reproduction
            </summary>
            <summary>
            A formulation of the process of reproduction
            </summary>
        </member>
        <member name="F:Madingley.ReproductionBasic._TimeUnitImplementation">
            <summary>
            The time units associated with this implementation of reproduction
            </summary>
        </member>
        <member name="F:Madingley.ReproductionBasic._MassRatioThreshold">
            <summary>
            The per individual ratio of (adult body mass + reproductive potential mass) to adult body mass above which reproduction is possible
            </summary>
        </member>
        <member name="F:Madingley.ReproductionBasic._MassEvolutionProbabilityThreshold">
            <summary>
            The probability that random draws above which result in offspring cohorts with 
            evolved juvenile and adult masses
            </summary>
        </member>
        <member name="F:Madingley.ReproductionBasic._MassEvolutionStandardDeviation">
            <summary>
            The standard deviation around the parent cohort's adult and juvenile masses to apply when drawing offspring
            adult and juvenile masses (when mass evolution occurs)
            </summary>
        </member>
        <member name="F:Madingley.ReproductionBasic._SemelparityAdultMassAllocation">
            <summary>
            The proportion of adult (non-reproductive) biomass allocated to offspring during a reproductive event by semelparous organisms
            </summary>
        </member>
        <member name="M:Madingley.ReproductionBasic.WriteOutParameterValues(System.IO.StreamWriter)">
            <summary>
            Write out the values of the parameters to an output file
            </summary>
            <param name="sw">A streamwriter object to write the parameter values to</param>
        </member>
        <member name="M:Madingley.ReproductionBasic.GetOffspringCohortProperties(Madingley.GridCellCohortHandler,System.Int32[],Madingley.FunctionalGroupDefinitions)">
            <summary>
            Assign the juvenile and adult masses of the new cohort to produce
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="actingCohort">The position of the acting cohort in the jagged array of grid cell cohorts</param>
            <param name="madingleyCohortDefinitions">The definitions of cohort functional groups in the model</param>
            <returns>A vector containing the juvenile and adult masses of the cohort to be produced</returns>
        </member>
        <member name="F:Madingley.ReproductionBasic._DeltaT">
            <summary>
            Scalar to convert from the time step units used by this formulation of reproduction to global model time step units
            </summary>
        </member>
        <member name="F:Madingley.ReproductionBasic.RandomNumberGenerator">
            <summary>
            An instance of the simple random number generator class
            </summary>
        </member>
        <member name="M:Madingley.ReproductionBasic.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor for reproduction: assigns all parameter values
            <param name="globalModelTimeStepUnit">The time step of the global model</param>
            <param name="drawRandomly">Indicates whether to draw values randomly</param>
            </summary>
        </member>
        <member name="M:Madingley.ReproductionBasic.RunReproductionEvents(Madingley.GridCellCohortHandler,Madingley.GridCellStockHandler,System.Int32[],System.Collections.Generic.SortedList{System.String,System.Double[]},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Double}},Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.UInt32,Madingley.ProcessTracker,Madingley.ThreadLockedParallelVariables@,System.Boolean,System.UInt32)">
            <summary>
            Generate new cohorts from reproductive potential mass
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="gridCellStocks">The stocks in the current grid cell</param>
            <param name="actingCohort">The position of the acting cohort in the jagged array of grid cell cohorts</param>
            <param name="cellEnvironment">The environment of the current grid cell</param>
            <param name="deltas">The sorted list to track changes in biomass and abundance of the acting cohort in this grid cell</param>
            <param name="madingleyCohortDefinitions">The definitions of cohort functional groups in the model</param>
            <param name="madingleyStockDefinitions">The definitions of stock functional groups in the model</param>
            <param name="currentTimestep">The current model time step</param>
            <param name="tracker">An instance of ProcessTracker to hold diagnostics for reproduction</param>
            <param name="partial">Thread-locked variables</param>
            <param name="iteroparous">Whether the acting cohort is iteroparous, as opposed to semelparous</param>
            <param name="currentMonth">The current model month</param>
        </member>
        <member name="M:Madingley.ReproductionBasic.RunReproductiveMassAssignment(Madingley.GridCellCohortHandler,Madingley.GridCellStockHandler,System.Int32[],System.Collections.Generic.SortedList{System.String,System.Double[]},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Double}},Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.UInt32,Madingley.ProcessTracker)">
            <summary>
            Assigns ingested biomass from other ecological processes to reproductive potential mass
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="gridCellStocks">The stocks in the current grid cell</param>
            <param name="actingCohort">The position of the acting cohort in the jagged array of grid cell cohorts</param>
            <param name="cellEnvironment">The environment in the current grid cell</param>
            <param name="deltas">The sorted list to track changes in biomass and abundance of the acting cohort in this grid cell</param>
            <param name="madingleyCohortDefinitions">The definitions of cohort functional groups in the model</param>
            <param name="madingleyStockDefinitions">The definitions of stock functional groups in the model</param>
            <param name="currentTimestep">The current model time step</param>
            <param name="tracker">An instance of ProcessTracker to hold diagnostics for reproduction</param>
        </member>
        <member name="P:Madingley.ReproductionBasic.TimeUnitImplementation">
            <summary>
            Get the time units associated with this implementation of reproduction
            </summary>
        </member>
        <member name="P:Madingley.ReproductionBasic.MassRatioThreshold">
            <summary>
            Get the per individual ratio of (adult body mass + reproductive potential mass) to adult body mass above which reproduction is possible
            </summary>
        </member>
        <member name="P:Madingley.ReproductionBasic.MassEvolutionProbabilityThreshold">
            <summary>
            Get the probability threshold for evolution of juvenuile and adult masses of offspring cohorts
            </summary>
        </member>
        <member name="P:Madingley.ReproductionBasic.MassEvolutionStandardDeviation">
            <summary>
            Get the standard deviation to apply to offspring cohort masses around the parent cohort's masses
            </summary>
        </member>
        <member name="P:Madingley.ReproductionBasic.SemelparityAdultMassAllocation">
            <summary>
            Get the proportion of adult biomass allocated to offspring by semelparous organisms
            </summary>
        </member>
        <member name="P:Madingley.ReproductionBasic.DeltaT">
            <summary>
            Get the scalar to convert from the time step units used by this formulation of reproduction to global model time step units
            </summary>
        </member>
        <member name="T:Madingley.ClimateChange">
            <summary>
            Adjusts cell climate parameters to simulate the impacts of climate change
            </summary>
        </member>
        <member name="M:Madingley.ClimateChange.#ctor">
            <summary>
            Constructor for the climate change class
            </summary>
        </member>
        <member name="M:Madingley.ApplyFishingCatches.BinCohorts(Madingley.GridCellCohortHandler,Madingley.InputCatchData,Madingley.FunctionalGroupDefinitions)">
            <summary>
            Bin cohorts according to the mass bins defined for the catch data
            Constructs a list of functional group and cohort indices falling within each mass bin
            as well as the total biomass available to be fished in each
            </summary>
            <param name="c">The grid cell cohorts</param>
            <param name="fishCatch">Fisheries catch data</param>
        </member>
        <member name="F:Madingley.FishTraits.TrophicLevel">
            <summary>
            Value of trophic group for each taxa: 2 = herbivore (value = 1), 2-3.5 = Omnivore (value = 2), >3.5 = Carnivore (value = 3)
            </summary>
        </member>
        <member name="T:Madingley.Harvesting">
            <summary>
            Removes individuals from animal cohorts to simulate the effects of direct harvesting
            </summary>
        </member>
        <member name="M:Madingley.Harvesting.#ctor(System.Single[],System.Single[],System.Single)">
            <summary>
            Constructor for harvesting class
            </summary>
        </member>
        <member name="M:Madingley.Harvesting.RemoveHarvestedIndividuals(Madingley.GridCellCohortHandler,System.Tuple{System.String,System.Double,System.Double},System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Collections.Generic.SortedList{System.String,System.Double[]},System.Boolean,System.String,Madingley.FunctionalGroupDefinitions)">
            <summary>
            Remove individuals lost from cohorts through direct harvesting of animals
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="harvestingScenario">The scenario of direct harvesting of animals to apply</param>
            <param name="currentTimestep">The current model time step</param>
            <param name="burninSteps">The number of time steps to spin the model up for before applying the harvesting scenario</param>
            <param name="impactSteps">The number of time steps to apply the scenario for</param>
            <param name="cellEnvironment">The environment in the current grid cell</param>
            <param name="impactCell">The index of the cell, within the list of all cells to run, to apply the scenario for</param>
        </member>
        <member name="M:Madingley.Harvesting.ApplyHarvesting(Madingley.GridCellCohortHandler,System.Double,System.Collections.Generic.SortedList{System.String,System.Double[]})">
            <summary>
            Apply the results of direct harvesting of animals to the cohorts in a grid cell
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="targetBiomass">The target biomass to be harvested</param>
            <param name="cellEnvironment">The environment in the current grid cell</param>
        </member>
        <member name="F:Madingley.ImpactsSpatialHandler.Utilities">
            <summary>
            Instance of Utilities for timestep conversions
            </summary>
        </member>
        <member name="M:Madingley.ImpactsSpatialHandler.CalculateMaximumDivisionsOfImpactedCells(System.Double)">
            <summary>
            Calculates the indices of impacted cells that give maximum division of the model grid for the given fragmentation proportion
            </summary>
            <param name="fragmentProportion">Proportion of grid impacted</param>
        </member>
        <member name="T:Madingley.ApplyEcology">
            <summary>
            Class for applying changes from the ecological processes to the properties of the acting cohort and to the environment
            </summary>
        </member>
        <member name="M:Madingley.ApplyEcology.UpdateAllEcology(Madingley.GridCellCohortHandler,System.Int32[],System.Collections.Generic.SortedList{System.String,System.Double[]},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Double}},System.UInt32,Madingley.ProcessTracker)">
            <summary>
            Apply all updates from the ecological processes to the properties of the acting cohort and to the environment
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="actingCohort">The location of the acting cohort in the jagged array of grid cell cohorts</param>
            <param name="cellEnvironment">The environment in the current gird cell</param>
            <param name="deltas">The sorted list to track changes in biomass and abundance of the acting cohort in this grid cell</param>
            <param name="currentTimestep">The current model time step</param>
            <param name="tracker">A process tracker</param>
        </member>
        <member name="M:Madingley.ApplyEcology.UpdateAbundance(Madingley.GridCellCohortHandler,System.Int32[],System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Double}})">
            <summary>
            Update the abundance of the acting cohort according to the delta abundances from the ecological processes
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="actingCohort">The location of the acting cohort in the jagged array of grid cell cohorts</param>
            <param name="deltas">The sorted list to track changes in biomass and abundance of the acting cohort in this grid cell</param>
        </member>
        <member name="M:Madingley.ApplyEcology.UpdateBiomass(Madingley.GridCellCohortHandler,System.Int32[],System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Double}},System.UInt32,Madingley.ProcessTracker,System.Collections.Generic.SortedList{System.String,System.Double[]})">
            <summary>
            Update the individual and reproductive body masses of the acting cohort according to the delta biomasses from the ecological processes
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="actingCohort">The position of the acting cohort in the jagged array of grid cell cohorts</param>
            <param name="deltas">The sorted list to track changes in biomass and abundance of the acting cohort in this grid cell</param>
            <param name="currentTimestep">The current model time step</param>
            <param name="tracker">A process tracker</param>
            <param name="cellEnvironment">The cell environment</param>
        </member>
        <member name="M:Madingley.ApplyEcology.UpdatePools(System.Collections.Generic.SortedList{System.String,System.Double[]},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Double}})">
            <summary>
            Update the organic and respiratory biomass pools according to the relevant deltas from the ecological processes
            </summary>
            <param name="cellEnvironment">The environment of the current gird cell</param>
            <param name="deltas">The sorted list to track changes in biomass and abundance of the acting cohort in this grid cell</param>
        </member>
        <member name="T:Madingley.AutotrophProcessor">
            <summary>
            Class for converting primary productivity estimates to autotroph biomass
            </summary>
        </member>
        <member name="F:Madingley.AutotrophProcessor._MsqToKmSqConversion">
            <summary>
            Factor to convert NPP from units per m^2 to units per km^2
            </summary>
        </member>
        <member name="F:Madingley.AutotrophProcessor.Utilities">
            <summary>
            Instance of the class to perform general functions
            </summary>
        </member>
        <member name="F:Madingley.AutotrophProcessor._PhytoplanktonConversionRatio">
            <summary>
            Factor to convert phytoplankton biomass from grams carbon to grams wet weight
            </summary>
            <remarks>Currently derived from Ho et al. (2003) J. Phycol., Dalsgaard and Pauly (1997) and Strickland (1966)</remarks>
        </member>
        <member name="M:Madingley.AutotrophProcessor.#ctor">
            <summary>
            Constructor for the autotroph processor: initialises necessary classes
            </summary>
        </member>
        <member name="M:Madingley.AutotrophProcessor.ConvertNPPToAutotroph(System.Collections.Generic.SortedList{System.String,System.Double[]},Madingley.GridCellStockHandler,System.Int32[],System.String,System.String,System.UInt32,System.String,Madingley.ProcessTracker,Madingley.GlobalProcessTracker,System.String,System.Boolean,System.UInt32)">
            <summary>
            Convert NPP estimate into biomass of an autotroph stock
            </summary>
            <param name="cellEnvironment">The environment of the current grid cell</param>
            <param name="gridCellStockHandler">The stock handler for the current stock</param>
            <param name="actingStock">The location of the stock to add biomass to</param>
            <param name="terrestrialNPPUnits">The units of the terrestrial NPP data</param>
            <param name="oceanicNPPUnits">The units of the oceanic NPP data</param>
            <param name="currentTimestep">The current model time step</param>
            <param name="GlobalModelTimeStepUnit">The time step unit used in the model</param>
            <param name="trackProcesses">Whether to output data describing the ecological processes</param>
            <param name="globalTracker">Whether to output data describing the global-scale environment</param>
            <param name="outputDetail">The level of output detail to use for the outputs</param>
            <param name="specificLocations">Whether the model is being run for specific locations</param>
            <param name="currentMonth">The current month in the model run</param>
        </member>
        <member name="P:Madingley.AutotrophProcessor.PhytoplanktonConversionRatio">
            <summary>
            Get the conversion ratio for phytoplankton from grams carbon to grams wet weight
            </summary>
        </member>
        <member name="P:Madingley.AutotrophProcessor.MsqToKmSqConversion">
            <summary>
            Get the factor to convert NPP from units per m^2 to units per km^2
            </summary>
        </member>
        <member name="T:Madingley.CohortMerge">
            <summary>
            Merges cohorts with similar properties
            </summary>
        </member>
        <member name="F:Madingley.CohortMerge.RandomNumberGenerator">
            <summary>
            An instance of the simple random number generator
            </summary>
        </member>
        <member name="M:Madingley.CohortMerge.#ctor(System.Boolean)">
            <summary>
            Constructor for CohortMerge: sets the seed for the random number generator
            </summary>
            <param name="DrawRandomly"></param>
        </member>
        <member name="M:Madingley.CohortMerge.CalculateDistance(Madingley.Cohort,Madingley.Cohort)">
            <summary>
            Calculate the distance between two cohorts in multi-dimensional trait space (body mass, adult mass, juvenile mass)
            </summary>
            <param name="Cohort1">The first cohort to calculate distance to</param>
            <param name="Cohort2">The cohort to compare to</param>
            <returns>The relative distance in trait space</returns>
        </member>
        <member name="M:Madingley.CohortMerge.MergeToReachThreshold(Madingley.GridCellCohortHandler,System.Int32,System.Int32)">
            <summary>
            Merge cohorts until below a specified threshold number of cohorts in each grid cell
            </summary>
            <param name="gridCellCohorts">The cohorts within this grid cell</param>
            <param name="TotalNumberOfCohorts">The total number of cohorts in this grid cell</param>
            <param name="TargetCohortThreshold">The target threshold to reduce the number of cohorts to</param>
            <returns>The number of cohorts that have been merged</returns>
        </member>
        <member name="M:Madingley.CohortMerge.MergeToReachThresholdFast(Madingley.GridCellCohortHandler,System.Int32,System.Int32)">
            <summary>
            Merge cohorts until below a specified threshold number of cohorts in each grid cell
            </summary>
            <param name="gridCellCohorts">The cohorts within this grid cell</param>
            <param name="TotalNumberOfCohorts">The total number of cohorts in this grid cell</param>
            <param name="TargetCohortThreshold">The target threshold to reduce the number of cohorts to</param>
            <returns>The number of cohorts that have been merged</returns>
        </member>
        <member name="M:Madingley.CohortMerge.MergeForResponsiveDispersalOnly(Madingley.GridCellCohortHandler)">
            <summary>
            Merge cohorts for responsive dispersal only; merges identical cohorts, no matter how many times they have been merged before
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <returns>Number of cohorts merged</returns>
        </member>
        <member name="T:Madingley.ApplyCrossGridCellEcology">
            <summary>
            Class for applying changes from the cross-grid cell ecological processes. These are held in matrices of lists in the modelgrid structure.
            We simply loop through each cell, and check to see if there are any cohorts flagged as needing to be dispersed. If so, we point the cohort list
            in the new grid cell to this cohort, we delete the pointer to it and to the new grid cell in the model grid delta structures, and we delete the pointer 
            to it in the original cell
            
            We can also output diagnostics here (temporarily) as the whole grid needs to be completed before dispersal is enacted.
            </summary>
        </member>
        <member name="M:Madingley.ApplyCrossGridCellEcology.UpdateAllCrossGridCellEcology(Madingley.ModelGrid,System.UInt32@,Madingley.CrossCellProcessTracker,System.UInt32)">
            <summary>
            Apply all updates from the ecological processes to the properties of the acting cohort and to the environment
            </summary>
        </member>
        <member name="T:Madingley.EcologyCrossGridCell">
            <summary>
            A class to specify, initalise and run ecological processes across grid cells
            </summary>
        </member>
        <member name="F:Madingley.EcologyCrossGridCell.s2">
            <summary>
            A vector of stopwatch objects for timing the ecological processes
            </summary>
        </member>
        <member name="F:Madingley.EcologyCrossGridCell._DispersalFormulations">
            <summary>
            A sorted list of formulations of dispersal
            </summary>
        </member>
        <member name="F:Madingley.EcologyCrossGridCell.ApplyCrossGridCellEcologicalProcessResults">
            <summary>
            An instance of apply cross grid cell ecology
            </summary>
        </member>
        <member name="M:Madingley.EcologyCrossGridCell.InitializeCrossGridCellEcology(System.String,System.Boolean,Madingley.MadingleyModelInitialisation)">
            <summary>
            Initalise the ecological processes
            </summary>
        </member>
        <member name="M:Madingley.EcologyCrossGridCell.RunCrossGridCellEcology(System.UInt32[],Madingley.ModelGrid,System.Boolean,Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.UInt32)">
            <summary>
            Run ecological processes that operate across grid cells, for a particular grid cell. These should always occur after the within grid cell processes
            </summary>
        </member>
        <member name="M:Madingley.EcologyCrossGridCell.UpdateCrossGridCellEcology(Madingley.ModelGrid,System.UInt32@,Madingley.CrossCellProcessTracker,System.UInt32)">
            <summary>
            Update the properties of all cohorts across all grid cells
            </summary>
        </member>
        <member name="P:Madingley.EcologyCrossGridCell.DispersalFormulations">
            <summary>
            Get the sorted list of dispersal formulations
            </summary>
        </member>
        <member name="T:Madingley.EcologyCohort">
            <summary>
            A class to specify, initalise and run ecological processes pertaining to cohorts
            </summary>
        </member>
        <member name="F:Madingley.EcologyCohort.s2">
            <summary>
            A vector of stopwatch objects for timing the ecological processes
            </summary>
        </member>
        <member name="F:Madingley.EcologyCohort._MetabolismFormulations">
            <summary>
            A sorted list of formulations of metabolism
            </summary>
        </member>
        <member name="F:Madingley.EcologyCohort._EatingFormulations">
            <summary>
            A sorted list of formulations of eating
            </summary>
        </member>
        <member name="F:Madingley.EcologyCohort._MortalityFormulations">
            <summary>
            A sorted list of formulations of mortality
            </summary>
        </member>
        <member name="F:Madingley.EcologyCohort._ReproductionFormulations">
            <summary>
            A sorted list of formulations of reproduction
            </summary>
        </member>
        <member name="F:Madingley.EcologyCohort.ApplyEcologicalProcessResults">
            <summary>
            An instance of apply ecology
            </summary>
        </member>
        <member name="M:Madingley.EcologyCohort.InitializeEcology(System.Double,System.String,System.Boolean)">
            <summary>
            Initalise the ecological processes
            </summary>
        </member>
        <member name="M:Madingley.EcologyCohort.RunWithinCellEcology(Madingley.GridCellCohortHandler,Madingley.GridCellStockHandler,System.Int32[],System.Collections.Generic.SortedList{System.String,System.Double[]},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Double}},Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.UInt32,Madingley.ProcessTracker,Madingley.ThreadLockedParallelVariables@,System.Boolean,System.String,System.UInt32,Madingley.MadingleyModelInitialisation)">
            <summary>
            Run ecological processes that operate on cohorts within a single grid cell
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="gridCellStocks">The stocks in the current grid cell</param>
            <param name="actingCohort">The acting cohort</param>
            <param name="cellEnvironment">The environment in the current grid cell</param>
            <param name="deltas">A sorted list of deltas to track changes in abundances and biomasses during the ecological processes</param>
            <param name="madingleyCohortDefinitions">The definitions for cohort functional groups in the model</param>
            <param name="madingleyStockDefinitions">The definitions for stock functional groups in the model</param>
            <param name="currentTimestep">The current model time step</param>
            <param name="trackProcesses">An instance of the process tracker</param>
            <param name="partial">Thread-locked local variables</param>
            <param name="specificLocations">Whether the model is being run for specific locations</param>
            <param name="outputDetail">The level of output detail being used for this model run</param>
            <param name="currentMonth">The current model month</param>
            <param name="initialisation">The Madingley Model initialisation</param>
        </member>
        <member name="M:Madingley.EcologyCohort.UpdateEcology(Madingley.GridCellCohortHandler,Madingley.GridCellStockHandler,System.Int32[],System.Collections.Generic.SortedList{System.String,System.Double[]},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Double}},Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.UInt32,Madingley.ProcessTracker)">
            <summary>
            Update the properties of the acting cohort and of the environmental biomass pools after running the ecological processes for a cohort
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="gridCellStocks">The stocks in the current grid cell</param>
            <param name="actingCohort">The acting cohort</param>
            <param name="cellEnvironment">The environment of the current grid cell</param>
            <param name="deltas">The sorted list of deltas for the current grid cell</param>
            <param name="madingleyCohortDefinitions">The definitions for cohort functional groups in the model</param>
            <param name="madingleyStockDefinitions">The definitions for stock functional groups in the model</param>
            <param name="currentTimestep">The current model time step</param>
            <param name="tracker">A process tracker</param>
        </member>
        <member name="P:Madingley.EcologyCohort.MetabolismFormulations">
            <summary>
            Get the sorted list of metabolism formulations
            </summary>
        </member>
        <member name="P:Madingley.EcologyCohort.EatingFormulations">
            <summary>
            Get the sorted list of eating formulations
            </summary>
        </member>
        <member name="P:Madingley.EcologyCohort.MortalityFormulations">
            <summary>
            Get the sorted list of mortality formulations
            </summary>
        </member>
        <member name="P:Madingley.EcologyCohort.Reproductions">
            <summary>
            Get the sorted list of reproduction formulations
            </summary>
        </member>
        <member name="T:Madingley.EcologyStock">
            <summary>
            A class to specify, initialise and run ecological processes pertaining to stocks
            </summary>
        </member>
        <member name="F:Madingley.EcologyStock.MarineNPPtoAutotrophStock">
            <summary>
            An instance of the Autotroph Processor for this model
            </summary>
        </member>
        <member name="F:Madingley.EcologyStock.DynamicPlantModel">
            <summary>
            An instance of the plant model class
            </summary>
        </member>
        <member name="F:Madingley.EcologyStock.HANPP">
            <summary>
            An instance of the class for human appropriation of NPP
            </summary>
        </member>
        <member name="M:Madingley.EcologyStock.RunWithinCellEcology(Madingley.GridCellStockHandler,System.Int32[],System.Collections.Generic.SortedList{System.String,System.Double[]},System.Collections.Generic.SortedList{System.String,System.String},System.Tuple{System.String,System.Double,System.Double},Madingley.FunctionalGroupDefinitions,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.String,System.Boolean,Madingley.ProcessTracker,Madingley.GlobalProcessTracker,System.UInt32,System.String,System.Boolean,System.Boolean)">
             <summary>
             Run ecological processes that operate on stocks within a single grid cell
             </summary>
            <param name="gridCellStocks">The stocks in the current grid cell</param>
            <param name="actingStock">The acting stock</param>
            <param name="cellEnvironment">The stocks in the current grid cell</param>
            <param name="environmentalDataUnits">List of units associated with the environmental variables</param>
            <param name="humanNPPScenario">The human appropriation of NPP scenario to apply</param>
            <param name="madingleyStockDefinitions">The functional group definitions for stocks in the model</param>
            <param name="currentTimeStep">The current model time step</param>
            <param name="burninSteps">The number of time steps to spin the model up for before applying human impacts</param>
            <param name="impactSteps">The number of time steps to apply human impacts for</param>
            <param name="globalModelTimeStepUnit">The time step unit used in the model</param>
            <param name="trackProcesses">Whether to track properties of ecological processes</param>
            <param name="tracker">An instance of the ecological process tracker</param>
            <param name="globalTracker">An instance of the global process tracker</param>
            <param name="currentMonth">The current model month</param>
            <param name="outputDetail">The level of detail to use in outputs</param>
            <param name="specificLocations">Whether to run the model for specific locations</param>
            <param name="impactCell">Whether this cell should have human impacts applied</param>
        </member>
        <member name="T:Madingley.GridCellCohortHandler">
            <summary>
            Handles the cohorts in a grid cell
            </summary>
            <todoD>NOTE TO DT: CAN USE COLLECTIONBASE SYNTAX TO ELIMINATE A LOT OF CODE HERE</todoD>
            <todo>Create a wrapper class to handle our array of lists of gridCellCohorts within an individual grid cell</todo>
        </member>
        <member name="F:Madingley.GridCellCohortHandler.GridCellCohorts">
            <summary>
            A list of cohorts in the grid cell
            </summary>
        </member>
        <member name="M:Madingley.GridCellCohortHandler.#ctor">
            <summary>
            Create a new list of cohorts for the grid cell
            </summary>
        </member>
        <member name="M:Madingley.GridCellCohortHandler.#ctor(System.Int32)">
            <summary>
            Create a new list of cohorts of specified length corresponding to the number of functional groups
            </summary>
            <param name="NumFunctionalGroups">The number of functional groups for which there will be cohorts in this grid cell</param>
        </member>
        <member name="M:Madingley.GridCellCohortHandler.#ctor(System.Collections.Generic.List{Madingley.Cohort}[])">
            <summary>
            Update grid cell cohorts with a specified list of cohorts
            </summary>
            <param name="ExistingCohorts">A list of cohorts to update the grid cell cohorts with</param>
        </member>
        <member name="M:Madingley.GridCellCohortHandler.IndexOf(System.Collections.Generic.List{Madingley.Cohort})">
            <summary>
            Get the functional group index a specified cohort
            </summary>
            <param name="cohort">The cohort to return the functional group index for</param>
            <returns>The functional group index of the specified cohort</returns>
        </member>
        <member name="M:Madingley.GridCellCohortHandler.Insert(System.Int32,System.Collections.Generic.List{Madingley.Cohort})">
            <summary>
            Inserts a new list of cohorts at a specified functional group index - CURRENTLY  NOT SUPPORTED
            </summary>
            <param name="index">The index in the list of functional groups to insert the list of cohorts in</param>
            <param name="listOfCohorts">The list of cohorts to insert</param>
        </member>
        <member name="M:Madingley.GridCellCohortHandler.RemoveAt(System.Int32)">
            <summary>
            Removes a list of cohorts in a specified functional group - CURRENTLY NOT SUPPORTED
            </summary>
            <param name="functionalGroupIndex">The index of the functional group to remove the list of cohorts for</param>
        </member>
        <member name="M:Madingley.GridCellCohortHandler.Add(System.Collections.Generic.List{Madingley.Cohort})">
            <summary>
            Adds a list of cohorts at the end of the functional group indices - CURRENTLY NOT SUPPORTED
            </summary>
            <param name="listOfCohorts">The list of cohorts to add</param>
        </member>
        <member name="M:Madingley.GridCellCohortHandler.Clear">
            <summary>
            Currently not implemented
            </summary>
        </member>
        <member name="M:Madingley.GridCellCohortHandler.Contains(System.Collections.Generic.List{Madingley.Cohort})">
            <summary>
            Currently not implemented
            </summary>
            <param name="item">NA</param>
            <returns>NA</returns>
        </member>
        <member name="M:Madingley.GridCellCohortHandler.CopyTo(System.Collections.Generic.List{Madingley.Cohort}[],System.Int32)">
            <summary>
            Currently not implemented
            </summary>
            <param name="array">NA</param>
            <param name="arrayIndex">NA</param>
        </member>
        <member name="M:Madingley.GridCellCohortHandler.Remove(System.Collections.Generic.List{Madingley.Cohort})">
            <summary>
            Currently not implemented
            </summary>
            <param name="item">NA</param>
            <returns>NA</returns>
        </member>
        <member name="M:Madingley.GridCellCohortHandler.GetEnumerator">
            <summary>
            Returns an the grid cell cohorts as an IEnumerator 
            </summary>
            <returns>The grid cell cohorts as an IEnumerator</returns>
        </member>
        <member name="M:Madingley.GridCellCohortHandler.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Return an IEnumerable as an IEnumerator
            </summary>
            <returns>The IEnumerable as an IEnumerator</returns>
        </member>
        <member name="M:Madingley.GridCellCohortHandler.GetNumberOfCohorts">
            <summary>
            Gets the number of cohorts in this grid cell
            </summary>
        </member>
        <member name="P:Madingley.GridCellCohortHandler.Item(System.Int32)">
            <summary>
            Get or set the list of cohorts for a specified functional group index
            </summary>
            <param name="functionalGroupIndex">The index of the functional group to get or set the list of cohorts for</param>
            <returns>The list of cohorts in the specified functional group</returns>
        </member>
        <member name="P:Madingley.GridCellCohortHandler.Item(System.Int32[])">
            <summary>
            Gets or sets a particular cohort within the grid cell cohorts
            </summary>
            <param name="index">A vector of two values corresponding to the functional group index and the index of the desired cohort within this functional group</param>
            <returns>The specified cohort</returns>
        </member>
        <member name="P:Madingley.GridCellCohortHandler.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets a particular cohort within the grid cell cohorts
            </summary>
            <param name="functionalGroupIndex">The functional group index of the desired cohort</param>
            <param name="cohortIndex">The index of the cohort within the specified functional group</param>
            <returns>The specified cohort</returns>
        </member>
        <member name="P:Madingley.GridCellCohortHandler.Count">
            <summary>
            Gets the number of functional groups in the grid cell cohorts
            </summary>
        </member>
        <member name="P:Madingley.GridCellCohortHandler.IsReadOnly">
            <summary>
            Currently not implemented
            </summary>
        </member>
        <member name="T:Madingley.GridCellCohortsEnum">
            <summary>
            IEnumerator for the grid cell cohorts
            </summary>
        </member>
        <member name="F:Madingley.GridCellCohortsEnum.GridCellCohorts">
            <summary>
            The grid cell cohorts as a vector (with elements corresponding to functional groups) of lists of cohorts
            </summary>
        </member>
        <member name="F:Madingley.GridCellCohortsEnum.position">
            <summary>
            Current position in the vector of lists of cohorts
            </summary>
        </member>
        <member name="M:Madingley.GridCellCohortsEnum.#ctor(System.Collections.Generic.List{Madingley.Cohort}[])">
            <summary>
            Assign the passed set of grid cell cohorts to the internal vector of lists of cohorts 
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Madingley.GridCellCohortsEnum.MoveNext">
            <summary>
            Move to the next element in the vector of lists of cohorts
            </summary>
            <returns>True if the end of the list had not been reached</returns>
        </member>
        <member name="M:Madingley.GridCellCohortsEnum.Reset">
            <summary>
            Move back to the first element in the vector of lists of cohorts
            </summary>
        </member>
        <member name="M:Madingley.GridCellCohortsEnum.Dispose">
            <summary>
            Destructor for the grid cell cohorts enumerator
            </summary>
        </member>
        <member name="P:Madingley.GridCellCohortsEnum.System#Collections#IEnumerator#Current">
            <summary>
            Returns the list of cohorts for the current position (i.e. functional group) in the vector of lists of cohorts
            </summary>
        </member>
        <member name="P:Madingley.GridCellCohortsEnum.Current">
            <summary>
            Get the list of cohorts for the current position (i.e. functional group) in the vector of lists of cohorts
            </summary>
        </member>
        <member name="T:Madingley.ArraySDSConvert">
            <summary>
            Methods to convert between SDS objects and values, vectors and arrays
            <todoT>1. Write code to make sure that the dimensions and the grid sizes correspond</todoT>
            <todo>2. Write debug assertions for as many as evantualities as can be thought of</todo>
            <todo>3. Decide whether to exit with error if variable already exists</todo>
            <todo>4. IMPORTANT - dimensions values need to refer to cell centres. Need to think through implications of this</todo>
            </summary>
        </member>
        <member name="M:Madingley.ArraySDSConvert.AddVariable(Microsoft.Research.Science.Data.DataSet,System.String,System.String,System.Int32,System.String[],System.Double,System.Single[])">
            <summary>
            Adds a one-dimensional variable to the specified SDS object with floating point dimension data
            </summary>
            <param name="SDSObject">A reference to an SDS object</param>
            <param name="variableName">The name of the variable to create</param>
            <param name="units">Units of the data</param>
            <param name="numDimensions">The number of dimensions for the new variable</param>
            <param name="namesDimensions">A vector of names of the dimensions for the variable</param>
            <param name="missingValue">The missing value to apply to the new variable</param>
            <param name="dimension1Data">A vector of values of the first dimension</param>
        </member>
        <member name="M:Madingley.ArraySDSConvert.AddVariable(Microsoft.Research.Science.Data.DataSet,System.String,System.Int32,System.String[],System.Double,System.String[])">
            <summary>
            Adds a one-dimensional variable to the specified SDS object with string dimension data
            </summary>
            <param name="SDSObject">A reference to an SDS object</param>
            <param name="variableName">The name of the variable to create</param>
            <param name="numDimensions">The number of dimensions for the new variable</param>
            <param name="namesDimensions">A vector of names of the dimensions for the variable</param>
            <param name="missingValue">The missing value to apply to the new variable</param>
            <param name="dimension1Data">A string vector of values of the first dimension</param>
        </member>
        <member name="M:Madingley.ArraySDSConvert.AddVariable(Microsoft.Research.Science.Data.DataSet,System.String,System.Int32,System.String[],System.Double,System.Single[],System.Single[])">
            <summary>
            Adds a two-dimensional variable to the specified SDS object with floating point data for both dimensions
            </summary>
            <param name="SDSObject">A reference to an SDS object</param>
            <param name="variableName">The name of the variable to create</param>
            <param name="numDimensions">The number of dimensions for the new variable</param>
            <param name="namesDimensions">A vector of names of the dimensions for the variable</param>
            <param name="missingValue">The missing value to apply to the new variable</param>
            <param name="dimension1Data">A vector of values of the first dimension</param>
            <param name="dimension2Data">A vector of values of the second dimension</param>
        </member>
        <member name="M:Madingley.ArraySDSConvert.AddVariable(Microsoft.Research.Science.Data.DataSet,System.String,System.Int32,System.String[],System.Double,System.Single[],System.Single[],System.Single[])">
            <summary>
            Adds a three-dimensional variable to the specified SDS object with floating point data for all three dimensions
            </summary>
            <param name="SDSObject">A reference to an SDS object</param>
            <param name="variableName">The name of the variable to create</param>
            <param name="numDimensions">The number of dimensions for the new variable</param>
            <param name="namesDimensions">A vector of names of the dimensions for the variable</param>
            <param name="missingValue">The missing value to apply to the new variable</param>
            <param name="dimension1Data">A vector of values of the first dimension</param>
            <param name="dimension2Data">A vector of values of the second dimension</param>
            <param name="dimension3Data">A vector of values of the third dimension</param>
        </member>
        <member name="M:Madingley.ArraySDSConvert.AddVariable(Microsoft.Research.Science.Data.DataSet,System.String,System.Int32,System.String[],System.Double,System.Single[],System.Single[],System.Single[],System.Single[])">
            <summary>
            Adds a four-dimensional variable to the specified SDS object with floating point data for all four dimensions
            </summary>
            <param name="SDSObject">A reference to an SDS object</param>
            <param name="variableName">The name of the variable to create</param>
            <param name="numDimensions">The number of dimensions for the new variable</param>
            <param name="namesDimensions">A vector of names of the dimensions for the variable</param>
            <param name="missingValue">The missing value to apply to the new variable</param>
            <param name="dimension1Data">A vector of values for the first dimension</param>
            <param name="dimension2Data">A vector of values for the second dimension</param>
            <param name="dimension3Data">A vector of values for the third dimension</param>
            <param name="dimension4Data">A vector of values for the fourth dimension</param>
        </member>
        <member name="M:Madingley.ArraySDSConvert.ValueToSDS1D(System.Double,System.String,System.String,System.Double,Microsoft.Research.Science.Data.DataSet,System.Int32)">
            <summary>
            Adds a double value to an one-dimensional variable in an SDS object at the specified offset in the dimension
            </summary>
            <param name="dataToConvert">The value to add to the SDS object</param>
            <param name="outputVariableName">The name of the variable to add the data to</param>
            <param name="dimensionName">The name of the dimension variable of the output variable</param>
            <param name="missingValue">The value used for missing data</param>
            <param name="SDSObject">The SDS object to write to</param>
            <param name="dimensionOffset">The required offset in the dimension variable</param>
        </member>
        <member name="M:Madingley.ArraySDSConvert.ValueToSDS2D(System.Double,System.String,System.String[],System.Double,Microsoft.Research.Science.Data.DataSet,System.Int32,System.Int32)">
            <summary>
            Adds a double value to a two-dimensional variable in an SDS object at the specified offsets in both dimensions
            </summary>
            <param name="dataToConvert">The value to add to the SDS object</param>
            <param name="outputVariableName">The name of the variable to add the data to</param>
            <param name="dimensionNames">A vector containing the names of the dimensions of the output variable</param>
            <param name="missingValue">The value to be used for missing data</param>
            <param name="SDSObject">The SDS object to write to</param>
            <param name="dimension1Offset">The required offset in the first dimension</param>
            <param name="dimension2Offset">The required offset in the second dimension</param>
        </member>
        <member name="M:Madingley.ArraySDSConvert.ValueToSDS3D(System.Double,System.String,System.String[],System.Double,Microsoft.Research.Science.Data.DataSet,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a double value to a three-dimensional variable in an SDS object at the specified offsets in all three dimensions
            </summary>
            <param name="dataToConvert">The value to add to the SDS object</param>
            <param name="outputVariableName">The name of the variable to add the data to</param>
            <param name="dimensionNames">A vector containing the names of the dimensions of the output variable</param>
            <param name="missingValue">The value to be used for missing data</param>
            <param name="SDSObject">The SDS object to write to</param>
            <param name="dimension1Offset">The required offset in the first dimension</param>
            <param name="dimension2Offset">The required offset in the second dimension</param>
            <param name="dimension3Offset">The required offset in the third dimension</param>
        </member>
        <member name="M:Madingley.ArraySDSConvert.VectorToSDS1D(System.Double[],System.String,System.String,System.Single[],System.Double,Microsoft.Research.Science.Data.DataSet)">
            <summary>
            Adds a vector of double values to a one-dimensional variable in an SDS object
            </summary>
            <param name="dataToConvert">The vector of values to add</param>
            <param name="outputVariableName">The name of the variable to write to</param>
            <param name="dimensionName">The name of the dimension variable of the output variable</param>
            <param name="dimensionValues">The values of the dimension variable</param>
            <param name="missingValue">The value used for missing data</param>
            <param name="SDSObject">The SDS object to write to</param>
        </member>
        <member name="M:Madingley.ArraySDSConvert.VectorToSDS2D(System.Double[],System.String,System.String[],System.Single[],System.Single[],System.Double,Microsoft.Research.Science.Data.DataSet,System.Int32)">
            <summary>
            Adds a vector of values to a two-dimensional variable in an SDS object at the specified offset in the first dimension
            </summary>
            <param name="dataToConvert">The vector of values to add</param>
            <param name="outputVariableName">The name of the variable to write to</param>
            <param name="dimensionNames">A vector containing the names of the dimension variables</param>
            <param name="dimension1Data">The values of the first dimension variable</param>
            <param name="dimension2Data">The values of the second dimension</param>
            <param name="missingValue">The value used for missing data</param>
            <param name="SDSObject">The SDS object to write to</param>
            <param name="dimension1Offset">The required offset in the first dimension</param>
        </member>
        <member name="M:Madingley.ArraySDSConvert.Array2DToSDS2D(System.Double[0:,0:],System.String,System.Single[],System.Single[],System.Double,Microsoft.Research.Science.Data.DataSet)">
            <summary>
            Adds a geographical array of values to a two-dimensional variable in an SDS object
            </summary>
            <param name="dataToConvert">The array of values to add</param>
            <param name="ouputVariableName">The name of the variable to write to</param>
            <param name="lats">The values of the latitude dimension variable</param>
            <param name="lons">The values of the longitude dimension variable</param>
            <param name="missingValue">The value used for missing data</param>
            <param name="SDSObject">The SDS object to write to</param>
        </member>
        <member name="M:Madingley.ArraySDSConvert.Array2DToSDS2D(Madingley.ModelGrid,System.Collections.Generic.List{System.UInt32[]},System.String,System.String,System.String,System.String,Microsoft.Research.Science.Data.DataSet,Madingley.FunctionalGroupDefinitions,Madingley.MadingleyModelInitialisation)">
            <summary>
            Extract an array of values from a state variable in a model grid and add to a two-dimensional variable in an SDS object
            </summary>
            <param name="ecosystemModelGrid">The model grid to extract data from</param>
            <param name="cellIndices">List of indices of active cells in the model grid</param>
            <param name="gridVariableName">The name of the state variable in the model grid</param>
            <param name="traitValue">The trait value of the functional groups to get data for</param>
            <param name="variableType">The type of the state variable: 'stock' or 'cohort'</param>
            <param name="outputVariableName">The name of the variable to write to</param>
            <param name="SDSObject">The SDS object to write to</param>
            <param name="functionalGroupHandler">The functional group handler corresponding to cohorts or stocks</param>
            <param name="initialisation">The Madingley Model initialisation</param>
        </member>
        <member name="M:Madingley.ArraySDSConvert.Array2DToSDS3D(System.Double[0:,0:],System.String,System.String[],System.Int32,System.Double,Microsoft.Research.Science.Data.DataSet)">
            <summary>
            Outputs a two-dimensional array to a three-dimensional variable in an SDS object, with specified offset for the third dimension
            </summary>
            <param name="dataToConvert">An array of values to output</param>
            <param name="newVariableName">The name of the variable to be created or written to</param>
            <param name="dimensionNames">A vector containing the names of the dimensions of the output variable</param>
            <param name="thirdDimensionOffset">The offset to be applied in the third dimension</param>
            <param name="missingValue">The missing value to be used</param>
            <param name="SDSObject">A reference to an SDS object</param>
        </member>
        <member name="T:Madingley.Cohort">
            <summary>
            Class to hold properties of a single cohort
            </summary>
        </member>
        <member name="F:Madingley.Cohort._BirthTimeStep">
            <summary>
            Time step when the cohort was generated
            </summary>
        </member>
        <member name="F:Madingley.Cohort._MaturityTimeStep">
            <summary>
            The time step at which this cohort reached maturity
            </summary>
        </member>
        <member name="F:Madingley.Cohort._CohortID">
            <summary>
            A list of all cohort IDs ever associated with individuals in this current cohort
            </summary>
        </member>
        <member name="F:Madingley.Cohort._JuvenileMass">
            <summary>
            The mean juvenile mass of individuals in this cohort
            </summary>
        </member>
        <member name="F:Madingley.Cohort._AdultMass">
            <summary>
            The mean mature adult mass of individuals in this cohort
            </summary>
        </member>
        <member name="F:Madingley.Cohort._IndividualBodyMass">
            <summary>
            The mean body mass of an individual in this cohort
            </summary>
        </member>
        <member name="F:Madingley.Cohort._IndividualReproductivePotentialMass">
            <summary>
            Individual biomass assigned to reproductive potential
            </summary>
        </member>
        <member name="F:Madingley.Cohort._MaximumAchievedBodyMass">
            <summary>
            The maximum mean body mass ever achieved by individuals in this cohort
            </summary>
        </member>
        <member name="F:Madingley.Cohort._CohortAbundance">
            <summary>
            The number of individuals in the cohort
            </summary>
        </member>
        <member name="F:Madingley.Cohort._FunctionalGroupIndex">
            <summary>
            The index of the functional group that the cohort belongs to
            </summary>
        </member>
        <member name="F:Madingley.Cohort._Merged">
            <summary>
            Whether this cohort has ever been merged with another cohort
            </summary>
        </member>
        <member name="F:Madingley.Cohort._ProportionTimeActive">
            <summary>
            The proportion of the timestep for which this cohort is active
            </summary>
        </member>
        <member name="F:Madingley.Cohort._TrophicIndex">
            <summary>
            The trophic index for this cohort at this time
            </summary>
        </member>
        <member name="F:Madingley.Cohort._LogOptimalPreyBodySizeRatio">
            <summary>
            The optimal prey body size for individuals in this cohort
            </summary>
        </member>
        <member name="M:Madingley.Cohort.#ctor(System.Byte,System.Double,System.Double,System.Double,System.Double,System.Double,System.UInt16,System.Double,System.Int64@,System.Double,System.Boolean)">
            <summary>
            Constructor for the Cohort class: assigns cohort starting properties
            </summary>
            <param name="functionalGroupIndex">The functional group index of the cohort being generated</param>
            <param name="juvenileBodyMass">The mean juvenile body mass of individuals in the cohort</param>
            <param name="adultBodyMass">The mean mature adult body mass of individuals in the cohort</param>
            <param name="initialBodyMass">The intial mean body mass of individuals in this cohort</param>
            <param name="initialAbundance">The intial number of individuals in this cohort</param>
            <param name="optimalPreyBodySizeRatio">The optimal prey body mass (as a percentage of this cohorts mass) for individuals in this cohort</param>
            <param name="birthTimeStep">The birth time step for this cohort</param>
            <param name="proportionTimeActive">The proportion of time that the cohort will be active for</param>
            <param name="nextCohortID">The unique ID to assign to the next cohort created</param>
            <param name="trophicIndex">The trophic level index of the cohort</param>
            <param name="tracking">Whether the process tracker is enabled</param>
        </member>
        <member name="P:Madingley.Cohort.BirthTimeStep">
            <summary>
            Get time step when the cohort was generated
            </summary>
        </member>
        <member name="P:Madingley.Cohort.MaturityTimeStep">
            <summary>
            Get and set the time step at which this cohort reached maturity
            </summary>
        </member>
        <member name="P:Madingley.Cohort.CohortID">
            <summary>
            Get the list of all cohort IDs ever associated with individuals in this current cohort
            </summary>
        </member>
        <member name="P:Madingley.Cohort.JuvenileMass">
            <summary>
            Get the mean juvenile mass of individuals in this cohort
            </summary>
        </member>
        <member name="P:Madingley.Cohort.AdultMass">
            <summary>
            Get the mean mature adult mass of individuals in this cohort
            </summary>
        </member>
        <member name="P:Madingley.Cohort.IndividualBodyMass">
            <summary>
            Get or set the mean body mass of an individual in this cohort
            </summary>
        </member>
        <member name="P:Madingley.Cohort.IndividualReproductivePotentialMass">
            <summary>
            Get or set the individual biomass assigned to reproductive potential
            </summary>
        </member>
        <member name="P:Madingley.Cohort.MaximumAchievedBodyMass">
            <summary>
            Get or set the maximum mean body mass ever achieved by individuals in this cohort
            </summary>
        </member>
        <member name="P:Madingley.Cohort.CohortAbundance">
            <summary>
            Get or set the number of individuals in the cohort
            </summary>
        </member>
        <member name="P:Madingley.Cohort.FunctionalGroupIndex">
            <summary>
            Get the index of the functional group that the cohort belongs to
            </summary>
        </member>
        <member name="P:Madingley.Cohort.Merged">
            <summary>
            Get or set whether this cohort has ever been merged with another cohort
            </summary>
        </member>
        <member name="P:Madingley.Cohort.ProportionTimeActive">
            <summary>
            Get and set the proportion of time for which this cohort is active
            </summary>
        </member>
        <member name="P:Madingley.Cohort.TrophicIndex">
            <summary>
            Get and set the trophic index
            </summary>
        </member>
        <member name="P:Madingley.Cohort.LogOptimalPreyBodySizeRatio">
            <summary>
            Get and set the optimal prey body size for individuals in this cohort
            </summary>
        </member>
        <member name="T:Madingley.CreateSDSObject">
            <summary>
            Class for creating Scientific Dataset objects
            </summary>
        </member>
        <member name="M:Madingley.CreateSDSObject.CreateSDSInMemory(System.Boolean)">
            <summary>
            Create an SDS object in memory
            </summary>
            <param name="shared">Boolean indicating whether a shared dataset is required</param>
            <returns>The new dataset object</returns>
        </member>
        <member name="M:Madingley.CreateSDSObject.CreateSDS(System.String,System.String,System.String)">
            <summary>
            Create an SDS object as an output file
            </summary>
            <param name="sdsType">The type of output file to create, currently must be NetCDF</param>
            <param name="sdsName">The name to assign to the output file</param>
            <param name="outputPath">The path to the output folder</param>
            <returns>The new dataset object</returns>
        </member>
        <member name="T:Madingley.FunctionalGroupDefinitions">
            <summary>
            Reads in and performs look-ups on functional group definitions
            </summary>
            <remarks>Mass bins values currently defined as middle of each mass bins</remarks>
            <todoM>Throw error if there are any blanks in csv file</todoM>
        </member>
        <member name="F:Madingley.FunctionalGroupDefinitions.InternalData">
            <summary>
            An internal version of the dataset to query if necessary
            </summary>
        </member>
        <member name="F:Madingley.FunctionalGroupDefinitions.IndexLookupFromTrait">
            <summary>
            A dictionary to allow functional group indices to be looked up based on trait values
            </summary>
        </member>
        <member name="F:Madingley.FunctionalGroupDefinitions._FunctionalGroupProperties">
            <summary>
            A sorted list of all of the properties of functional groups and their values
            </summary>
        </member>
        <member name="F:Madingley.FunctionalGroupDefinitions.TraitLookupFromIndex">
            <summary>
            Dictionary to allow traits of functional groups to be looked up based on the functional group index
            </summary>
        </member>
        <member name="F:Madingley.FunctionalGroupDefinitions._AllFunctionalGroupsIndex">
            <summary>
            A list of the indices of all functional groups in the model
            </summary>
        </member>
        <member name="M:Madingley.FunctionalGroupDefinitions.#ctor(System.String,System.String)">
            <summary>
            Constructor for the functional group definitions: reads in the specified functional group definition file, 
            constructs lookup tables, mass ranges and initial cohort numbers in each functional group
            </summary>
            <param name="fileName">The name of the functional group definition file to be read in</param>
            <param name="outputPath">The path to the output folder, in which to copy the functional group definitions file</param>
        </member>
        <member name="M:Madingley.FunctionalGroupDefinitions.GetBiologicalPropertyOneFunctionalGroup(System.String,System.Int32)">
            <summary>
            Return the value of a biological parameter for a given parameter and functional group
            </summary>
            <param name="propertyName">The name of the biological parameter</param>
            <param name="functionalGroup">Functional group index</param>
            <returns>The value of the biological parameter for the specified functional group</returns>
        </member>
        <member name="M:Madingley.FunctionalGroupDefinitions.GetBiologicalPropertyAllFunctionalGroups(System.String)">
            <summary>
            Get values of a functional group property for all functional groups
            </summary>
            <param name="propertyName">The name of the property to get values for</param>
            <returns>The values of a functional group property for all functional groups</returns>
        </member>
        <member name="M:Madingley.FunctionalGroupDefinitions.GetTraits">
            <summary>
            Retrieves the values for all traits defined in the model
            </summary>
            <returns>String array of traits defined for the model</returns>
        </member>
        <member name="M:Madingley.FunctionalGroupDefinitions.GetUniqueTraitValues(System.String)">
            <summary>
            Retrieves the trait values for all traits defined in the model
            </summary>
            <param name="Trait">The trait for which trait values are to be found</param>
            <returns>String array of trait values for the specifiec trait</returns>
        </member>
        <member name="M:Madingley.FunctionalGroupDefinitions.GetTraitValuesAllFunctionalGroups(System.String)">
            <summary>
            Returns a string of Trait Names associated with the specified search trait for all functional group index value
            </summary>
            <param name="searchTrait">The name of the trait to get values for</param>
            <returns>The value of the specified trait for the specified functional group</returns>
        </member>
        <member name="M:Madingley.FunctionalGroupDefinitions.GetTraitNames(System.String,System.Int32)">
            <summary>
            Returns a string of Trait Names associated with the specified search trait and functional group index value
            </summary>
            <param name="searchTrait">The name of the trait to get values for</param>
            <param name="functionalGroupIndex">The functional group index to return the trait value for</param>
            <returns>The value of the specified trait for the specified functional group</returns>
        </member>
        <member name="M:Madingley.FunctionalGroupDefinitions.GetAllTraitNames">
            <summary>
            Gets a list of unique trait values for all functional groups
            </summary>
            <returns>A list of unique trait values</returns>
        </member>
        <member name="M:Madingley.FunctionalGroupDefinitions.GetTraitValues(System.String[],System.Int32)">
            <summary>
            Get the values of a set of specified traits for a specified functional group
            </summary>
            <param name="searchTraits">A vector of trait names to get values for</param>
            <param name="functionalGroupIndex">The functional group index to return trait values for</param>
            <returns>A vector of values of the specified traits for a specified functional group</returns>
        </member>
        <member name="M:Madingley.FunctionalGroupDefinitions.GetFunctionalGroupIndex(System.String[],System.String[],System.Boolean)">
            <summary>
            Get the functional group indices that have specified values of specified traits
            </summary>
            <param name="searchTraits">Vector of trait names to search for</param>
            <param name="searchTraitValues">Vector of trait values to search for</param>
            <param name="intersection">Whether the intersection of the indices for the traits should be returned, otherwise return the union of the indices</param>
            <returns>A vector of functional group indices with the specified values of the specified traits</returns>
        </member>
        <member name="M:Madingley.FunctionalGroupDefinitions.GetFunctionalGroupIndex(System.String,System.String,System.Boolean)">
            <summary>
            Function to return the integer index values for functional groups corresponding to given trait and trait value pair combinations.
            Overloaded to accept a single string rather than an array in the traits to search and the trait values - both must be single strings
            </summary>
            <param name="searchTraits">String of Trait names to search for trait values within</param>
            <param name="searchTraitValues">String of string Trait Values to find functional group indices for</param>
            <param name="intersection">Boolean statement indicating if you want the intersection of the indices. Only valid if more than one Trait and Trait Value pair.
            True means give intersection. False means give the union of indices</param>
            <returns>Int array containing functional group indices corresponding to the given search conditions</returns>
        </member>
        <member name="M:Madingley.FunctionalGroupDefinitions.GetNumberOfFunctionalGroups">
            <summary>
            Returns number of functional groups
            </summary>
            <returns>Number of functional groups</returns>
        </member>
        <member name="P:Madingley.FunctionalGroupDefinitions.FunctionalGroupProperties">
            <summary>
            Get and set the sorted list of all of the properties of functional groups and their values
            </summary>
        </member>
        <member name="P:Madingley.FunctionalGroupDefinitions.AllFunctionalGroupsIndex">
            <summary>
            Get the list of the indices of all functional groups in the model
            </summary>
        </member>
        <member name="T:Madingley.Reproduction">
            <summary>
            Performs reproduction
            </summary>
        </member>
        <member name="F:Madingley.Reproduction.Implementations">
            <summary>
            The available implementations of the reproduction process
            </summary>
        </member>
        <member name="M:Madingley.Reproduction.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor for Reproduction: fills the list of available implementations of reproduction
            </summary>
        </member>
        <member name="M:Madingley.Reproduction.InitializeEcologicalProcess(Madingley.GridCellCohortHandler,Madingley.GridCellStockHandler,Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.String)">
            <summary>
            Initialize an implementation of reproduction. This is only in here to satisfy the requirements of IEcologicalProcessWithinGridCells
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="gridCellStocks">The stocks in the current grid cell</param>
            <param name="madingleyCohortDefinitions">The definitions for cohort functional groups in the model</param>
            <param name="madingleyStockDefinitions">The definitions for stock functional groups in the model</param>
            <param name="implementationKey">The name of the reproduction implementation to initialize</param>
        </member>
        <member name="M:Madingley.Reproduction.RunEcologicalProcess(Madingley.GridCellCohortHandler,Madingley.GridCellStockHandler,System.Int32[],System.Collections.Generic.SortedList{System.String,System.Double[]},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Double}},Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.UInt32,Madingley.ProcessTracker,Madingley.ThreadLockedParallelVariables@,System.Boolean,System.String,System.UInt32,Madingley.MadingleyModelInitialisation)">
            <summary>
            Run reproduction
            </summary>
            <param name="gridCellCohorts">The cohorts in the current grid cell</param>
            <param name="gridCellStocks">The stocks in the current grid cell</param>
            <param name="actingCohort">The position of the acting cohort in the jagged array of grid cell cohorts</param>
            <param name="cellEnvironment">The environment in the current grid cell</param>
            <param name="deltas">The sorted list to track changes in biomass and abundance of the acting cohort in this grid cell</param>
            <param name="madingleyCohortDefinitions">The definitions for cohort functional groups in the model</param>
            <param name="madingleyStockDefinitions">The definitions for stock functional groups in the model</param>
            <param name="currentTimeStep">The current model time step</param>
            <param name="processTracker">An instance of ProcessTracker to hold diagnostics for eating</param>
            <param name="partial">Thread-locked variables for the parallelised version</param>
            <param name="specificLocations">Whether the model is being run for specific locations</param>
            <param name="outputDetail">The level of output detail being used for this model run</param>
            <param name="currentMonth">The current model month</param>
            <param name="initialisation">The Madingley Model initialisation</param>
        </member>
        <member name="T:Madingley.GridCellStockHandler">
            <summary>
            Handles the stocks in a grid cell
            </summary>
            <todoD>CAN USE COLLECTIONBASE SYNTAX TO ELIMINATE A LOT OF CODE HERE</todoD>
            <todo>Create a wrapper class to handle our array of lists of gridCellStocks within an individual grid cell</todo>
        </member>
        <member name="F:Madingley.GridCellStockHandler.GridCellStocks">
            <summary>
            A vector (with elements correpsonding to functional groups) of lists of stocks in the current grid cell
            </summary>
        </member>
        <member name="M:Madingley.GridCellStockHandler.#ctor">
            <summary>
            Overloaded constructor for the grid cell stock handler: initialises a new vector of lists of stocks
            </summary>
        </member>
        <member name="M:Madingley.GridCellStockHandler.#ctor(System.Int32)">
            <summary>
            Overloaded constructor for the grid cell stock handler: initialises a new vector of lists of stocks with number of elements equal to the number of functional groups 
            </summary>
            <param name="NumFunctionalGroups">The number of stock functional groups in the model</param>
        </member>
        <member name="M:Madingley.GridCellStockHandler.#ctor(System.Collections.Generic.List{Madingley.Stock}[])">
            <summary>
            Overloaded constructor for the grid cell stock handler: update the grid cell stocks with the a set of existing stocks
            </summary>
            <param name="ExistingStocks"></param>
        </member>
        <member name="M:Madingley.GridCellStockHandler.IndexOf(System.Collections.Generic.List{Madingley.Stock})">
            <summary>
            Get the functional group index of the passed list of stocks
            </summary>
            <param name="item">The list of stocks to get the functional group index for</param>
            <returns>The functional group index of the passed list of stocks</returns>
        </member>
        <member name="M:Madingley.GridCellStockHandler.Insert(System.Int32,System.Collections.Generic.List{Madingley.Stock})">
            <summary>
            NOT CURRENTLY USED
            </summary>
            <param name="index">NOT CURRENTLY USED</param>
            <param name="item">NOT CURRENTLY USED</param>
        </member>
        <member name="M:Madingley.GridCellStockHandler.RemoveAt(System.Int32)">
            <summary>
            NOT CURRENTLY USED
            </summary>
            <param name="index">NOT CURRENTLY USED</param>
        </member>
        <member name="M:Madingley.GridCellStockHandler.Add(System.Collections.Generic.List{Madingley.Stock})">
            <summary>
            NOT CURRENTLY USED
            </summary>
            <param name="item">NOT CURRENTLY USED</param>
        </member>
        <member name="M:Madingley.GridCellStockHandler.Clear">
            <summary>
            NOT CURRENTLY USED
            </summary>
        </member>
        <member name="M:Madingley.GridCellStockHandler.Contains(System.Collections.Generic.List{Madingley.Stock})">
            <summary>
            NOT CURRENTLY USED
            </summary>
            <param name="item">NOT CURRENTLY USED</param>
            <returns>NOT CURRENTLY USED</returns>
        </member>
        <member name="M:Madingley.GridCellStockHandler.CopyTo(System.Collections.Generic.List{Madingley.Stock}[],System.Int32)">
            <summary>
            NOT CURRENTLY USED
            </summary>
            <param name="array">NOT CURRENTLY USED</param>
            <param name="arrayIndex">NOT CURRENTLY USED</param>
        </member>
        <member name="M:Madingley.GridCellStockHandler.Remove(System.Collections.Generic.List{Madingley.Stock})">
            <summary>
            NOT CURRENTLY USED
            </summary>
            <param name="item">NOT CURRENTLY USED</param>
            <returns>NOT CURRENTLY USED</returns>
        </member>
        <member name="M:Madingley.GridCellStockHandler.GetEnumerator">
            <summary>
            Return the grid cell stocks as an IEnumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Madingley.GridCellStockHandler.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Return an IEnumerable as an IEnumerator
            </summary>
            <returns></returns>
        </member>
        <member name="P:Madingley.GridCellStockHandler.Item(System.Int32)">
            <summary>
            Get or set the list of stocks for a specified functional group index
            </summary>
            <param name="index">The functional group index</param>
            <returns>The list of stocks from the specified functional group index</returns>
        </member>
        <member name="P:Madingley.GridCellStockHandler.Item(System.Int32[])">
            <summary>
            Get or set the stock at a specified position within a specified functional group index
            </summary>
            <param name="index">Pair of values corresponding to the functional group index and the position of the stock within this functional group</param>
            <returns>The stock at the specified position</returns>
        </member>
        <member name="P:Madingley.GridCellStockHandler.Count">
            <summary>
            Get the number of stock functional groups
            </summary>
        </member>
        <member name="P:Madingley.GridCellStockHandler.IsReadOnly">
            <summary>
            NOT CURRENTLY USED
            </summary>
        </member>
        <member name="T:Madingley.GridCellStocksEnum">
            <summary>
            IEnumerator for the grid cell stocks
            </summary>
        </member>
        <member name="F:Madingley.GridCellStocksEnum.GridCellStocks">
            <summary>
            The grid cell stocks as a vector (with elements corresponding to functional groups) of lists of stocks
            </summary>
        </member>
        <member name="F:Madingley.GridCellStocksEnum.position">
            <summary>
            Current position in the vector of lists of stocks
            </summary>
        </member>
        <member name="M:Madingley.GridCellStocksEnum.#ctor(System.Collections.Generic.List{Madingley.Stock}[])">
            <summary>
            Assign the passed set of grid cell stocks to the internal vector of lists of stocks 
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Madingley.GridCellStocksEnum.MoveNext">
            <summary>
            Move to the next element in the vector of lists of stocks
            </summary>
            <returns>True if the end of the list had not been reached</returns>
        </member>
        <member name="M:Madingley.GridCellStocksEnum.Reset">
            <summary>
            Move back to the first element in the vector of lists of stocks
            </summary>
        </member>
        <member name="M:Madingley.GridCellStocksEnum.Dispose">
            <summary>
            Destructor for the grid cell stocks enumerator
            </summary>
        </member>
        <member name="P:Madingley.GridCellStocksEnum.System#Collections#IEnumerator#Current">
            <summary>
            Returns the list of stocks for the current position (i.e. functional group) in the vector of lists of stocks
            </summary>
        </member>
        <member name="P:Madingley.GridCellStocksEnum.Current">
            <summary>
            Get the list of stocks for the current position (i.e. functional group) in the vector of lists of stocks
            </summary>
        </member>
        <member name="T:Madingley.HumanAutotrophMatterAppropriation">
            <summary>
            Removes autotroph matter appropriated by humans from a grid cell's autotroph stocks
            </summary>
            <remarks>Assumes that autotroph matter is appropriated evenly from different stocks in proportion to their biomass</remarks>
        </member>
        <member name="M:Madingley.HumanAutotrophMatterAppropriation.#ctor">
            <summary>
            Constructor for human appropriation of autotroph matter
            </summary>
        </member>
        <member name="M:Madingley.HumanAutotrophMatterAppropriation.RemoveHumanAppropriatedMatter(System.Double,System.Collections.Generic.SortedList{System.String,System.Double[]},System.Tuple{System.String,System.Double,System.Double},Madingley.GridCellStockHandler,System.Int32[],System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.String)">
            <summary>
            Remove human appropriated matter from the grid cell autotroph stocks
            </summary>
            <param name="cellEnvironment">The environment in the current grid cell</param>
            <param name="humanNPPScenario">The type of NPP extraction to apply</param>
            <param name="gridCellStocks">The stocks in the current grid cell</param>
            <param name="actingStock">The position of the acting stock in the jagged array of grid cell stocks</param>
            <param name="currentTimestep">The current model time step</param>
            <param name="burninSteps">The number of steps to run before impact is simulated</param>
            <param name="impactSteps">The number of time steps to apply the impact for (for 'temporary' scenarios)</param>
            <param name="impactCell">Whether this cell should have human impacts applied</param>
            <remarks>Scenario types are: 'no' = no removal; 'hanpp' = appropriated NPP estimate from input map; constant = constant appropriation after burn-in; 
            temporary = constant after burn-in until specified time; value = proportion of plant biomass appropriated</remarks>
        </member>
        <member name="F:Madingley.InputModelState._GridCellCohorts">
            <summary>
            The handler for the cohorts in this grid cell
            </summary>
        </member>
        <member name="F:Madingley.InputModelState._GridCellStocks">
            <summary>
            The handler for the stocks in this grid cell
            </summary>
        </member>
        <member name="P:Madingley.InputModelState.GridCellCohorts">
            <summary>
            Get or set the cohorts in this grid cell
            </summary>
        </member>
        <member name="P:Madingley.InputModelState.GridCellStocks">
            <summary>
            Get or set the stocks in this grid cell
            </summary>
        </member>
        <member name="T:Madingley.MadingleyModelInitialisation">
            <summary>
            Initialization information for Madingley model simulations
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._GlobalModelTimeStepUnit">
            <summary>
            String identifying time step units to be used by the simulations
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._NumTimeSteps">
            <summary>
            The number of time steps to be run in the simulations
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._BurninTimeSteps">
            <summary>
            The number of time steps to run the model for before any impacts are applied
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._ImpactTimeSteps">
            <summary>
            For scenarios with temporary impacts, the number of time steps to apply the impact for
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._RecoveryTimeSteps">
            <summary>
            For scenarios with temporary impacts, the number of time steps to apply the impact for
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._InstantaneousTimeStep">
            <summary>
            For scenarios with instantaneous impacts, the time step in which to apply the impact
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._NumInstantaneousTimeStep">
            <summary>
            For scenarios with instantaneous impacts, the number of time steps to apply the impact for
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._CellSize">
            <summary>
            The size of cells to be used in the model grid
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._BottomLatitude">
            <summary>
            The lowest extent of the model grid in degrees
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._TopLatitude">
            <summary>
            The uppermost extent of the model grid in degrees
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._LeftmostLongitude">
            <summary>
            The leftmost extent of the model grid in degrees
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._RightmostLongitude">
            <summary>
            The rightmost extent of the model grid in degrees
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._RunInParallel">
            <summary>
            Whether to run the model for different grid cells in parallel
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._RunCellsInParallel">
            <summary>
            Whether to run the model for different grid cells in parallel
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._RunSimulationsInParallel">
            <summary>
            Whether to run the model for different simulations in parallel
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._RunRealm">
            <summary>
            Which realm to run the model for
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._DrawRandomly">
            <summary>
            Whether to draw cohort properties randomly when seeding them, and whether cohorts will undergo ecological processes in a random order
            </summary>
            <remarks>Value should be set in initialization file, but default value is true</remarks>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._ExtinctionThreshold">
            <summary>
            The threshold abundance below which cohorts will be made extinct
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._MergeDifference">
            <summary>
            The threshold difference between cohorts, within which they will be merged
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._MaxNumberOfCohorts">
            <summary>
            The maximum number of cohorts to be in the model, per grid cell, when it is running
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._DispersalOnly">
            <summary>
            Whether to run only dispersal (i.e. turn all other ecological processes off, and set dispersal probability to one temporarily)
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._PlanktonDispersalThreshold">
            <summary>
            The weight threshold (grams) below which marine organisms that are not obligate zooplankton will be dispersed planktonically
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._InitialisationFileStrings">
            <summary>
            Information from the initialization file
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._CohortFunctionalGroupDefinitions">
            <summary>
            The functional group definitions of cohorts in the model
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._StockFunctionalGroupDefinitions">
            <summary>
            The functional group definitions of stocks in the model
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._EnviroStack">
            <summary>
            The environmental layers for use in the model
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._OutputPath">
            <summary>
            The full path for the output files for a set of simulations
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._TrackProcesses">
            <summary>
            Whether to output detailed diagnostics for the ecological processes
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._TrackCrossCellProcesses">
            <summary>
            Whether to output detailed diagnostics for the cross cell ecological processes
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._TrackGlobalProcesses">
            <summary>
            Whether to output detailed diagnostics for the ecological processes
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._ProcessTrackingOutputs">
            <summary>
            The paths and filenames for the diagnostics for the ecological processes
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._Units">
            <summary>
            The string values for the units of each environmental data layer
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._ModelMassBins">
            <summary>
            An instance of the mass bin handler for the current model run
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._LiveOutputs">
            <summary>
            Whether to display live outputs using Dataset Viewer during the model runs
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._TrackMarineSpecifics">
            <summary>
            Whether or not to track trophic level biomass and flow information specific to the marine realm
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._OutputMetrics">
            <summary>
            Whether to output ecosystem-level functional metrics
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation.Utilities">
            <summary>
            Instance of Utilities for timestep conversions
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._ModelStates">
            <summary>
            Reads in and holds the state of the model as specified in the input file
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModelInitialisation._CellList">
            <summary>
            Pairs of longitude and latitude indices for all active cells in the model grid
            </summary>
        </member>
        <member name="M:Madingley.MadingleyModelInitialisation.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Reads the initalization file to get information for the set of simulations to be run
            </summary>
            <param name="initialisationFile">The name of the initialization file with information on the simulations to be run</param>
            <param name="outputPath">The path to folder in which outputs will be stored</param>
        </member>
        <member name="M:Madingley.MadingleyModelInitialisation.ReadAndCopyInitialisationFiles(System.String,System.String,System.String,System.String)">
            <summary>
            Reads in all initialisation files and copies them to the output directory for future reference
            </summary>
            <param name="initialisationFile">The name of the initialization file with information on the simulations to be run</param>
            <param name="outputPath">The path to folder in which outputs will be stored</param>
            <todo>Need to adjust this file to deal with incorrect inputs, extra columns etc by throwing an error</todo>
            <todo>Also need to strip leading spaces</todo>
        </member>
        <member name="M:Madingley.MadingleyModelInitialisation.ReadModelState(System.String,System.String)">
            <summary>
            Reads in and holds a model state from file
            </summary>
            <param name="modelStateFileSpecification">Filename of the setup file specifying the model state datafile</param>
        </member>
        <member name="M:Madingley.MadingleyModelInitialisation.CopyParameterValues(System.String)">
            <summary>
            Copy parameter values to a text file in the specified output directory
            </summary>
            <param name="outputDirectory">THe directory for outputs</param>
        </member>
        <member name="M:Madingley.MadingleyModelInitialisation.ReadSpecificLocations(System.String,System.String)">
            <summary>
            Read in the specified locations in which to run the model
            </summary>
            <param name="specificLocationsFile">The name of the file with specific locations information</param>
            <param name="outputPath">The path to the output folder in which to copy the specific locations file</param>
        </member>
        <member name="M:Madingley.MadingleyModelInitialisation.ReadEnvironmentalLayers(System.String,System.String)">
            <summary>
            Reads the environmental layers listed in the specified file containing a list of environmental layers
            </summary>
            <param name="environmentalLayerFile">The name of the file containing the list of environmental layers</param>
            <param name="outputPath">The path to folder in which outputs will be stored</param>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.GlobalModelTimeStepUnit">
            <summary>
            Get and set the string identifying time step units to be used by the simulations
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.NumTimeSteps">
            <summary>
            Get and set the number of time steps to be run in the simulations
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.BurninTimeSteps">
            <summary>
            Get and set the number of time steps to run the model for before any impacts are applied
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.ImpactTimeSteps">
            <summary>
            Get and set the number of time steps to apply the impact for, for scenarios with temporary impacts
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.RecoveryTimeSteps">
            <summary>
            Get and set the number of time steps to apply the impact for, for scenarios with temporary impacts
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.InstantaneousTimeStep">
            <summary>
            Get and set the time step in which to apply the impact, for scenarios with instantaneous impacts
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.NumInstantaneousTimeStep">
            <summary>
            Get and set the number of time steps to apply the impact for, for scenarios with instantaneous impacts
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.CellSize">
            <summary>
            Get and set the size of cells to be used in the model grid
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.BottomLatitude">
            <summary>
            Get and set the lowest extent of the model grid in degrees
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.TopLatitude">
            <summary>
            Get and set the uppermost extent of the model grid in degrees
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.LeftmostLongitude">
            <summary>
            Get and set the leftmost extent of the model grid in degrees
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.RightmostLongitude">
            <summary>
            Get and set the rightmost extent of the model grid in degrees
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.RunInParallel">
            <summary>
            Get and set whether to run the model for different grid cells in parallel
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.RunCellsInParallel">
            <summary>
            Get and set whether to run the model for different grid cells in parallel
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.RunSimulationsInParallel">
            <summary>
            Get and set whether to run the model for different grid cells in parallel
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.RunRealm">
            <summary>
            Get and set which realm to run the model for
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.DrawRandomly">
            <summary>
            Get and set whether to draw cohort properties randomly when seeding them, and whether cohorts will undergo ecological processes in a random order
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.ExtinctionThreshold">
            <summary>
            Get and set the threshold abundance below which cohorts will be made extinct
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.MergeDifference">
            <summary>
            Get and set the threshold difference between cohorts, within which they will be merged
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.MaxNumberOfCohorts">
            <summary>
             Get and set the maximum number of cohorts per grid cell
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.DispersalOnly">
            <summary>
            Get and set whether to run dispersal only
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.PlanktonDispersalThreshold">
            <summary>
            Get and set the weight threshold (grams) below which marine organisms that are not obligate zooplankton will be dispersed planktonically
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.InitialisationFileStrings">
            <summary>
            Get and set information from the initialization file
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.CohortFunctionalGroupDefinitions">
            <summary>
            Get and set the functional group definitions of cohorts in the model
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.StockFunctionalGroupDefinitions">
            <summary>
            Get and set the functional group definitions of stocks in the model
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.EnviroStack">
            <summary>
            Get and set the environmental layers for use in the model
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.OutputPath">
            <summary>
            Get and set the full path for the output files for a set of simulations
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.TrackProcesses">
            <summary>
            Get and set whether to output detailed diagnostics for the ecological processes
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.TrackCrossCellProcesses">
            <summary>
            Get and set whether to output detailed diagnostics for the cross cell ecological processes
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.TrackGlobalProcesses">
            <summary>
            Get and set whether to output detailed diagnostics for the ecological processes
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.ProcessTrackingOutputs">
            <summary>
            Get and set the paths and filenames for the diagnostics for the ecological processes
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.Units">
            <summary>
            Get and set the unit strings
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.ModelMassBins">
            <summary>
            Get the instance of the mass bin handler for the current model run
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.LiveOutputs">
            <summary>
            Get and set whether to display live outputs using Dataset Viewer during the model runs
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.TrackMarineSpecifics">
            <summary>
            Get and set whether or not to track trophic level biomass and flow information specific to the marine realm
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModelInitialisation.OutputMetrics">
            <summary>
            Get and set whether to output ecosystem-level functional metrics
            </summary>
        </member>
        <member name="T:Madingley.RevisedTerrestrialPlantModel">
            <summary>
            Revised version of Matt Smith's terrestrial carbon model
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.max_NPP">
            <summary>
            The maximum poossible NPP (kg C per m2 per year)
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.t1_NPP">
            <summary>
            First constant in the logistic function relating NPP to temperature in the Miami NPP model
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.t2_NPP">
            <summary>
            Second constant in the logistic function relating NPP to temperature in the Miami NPP model 
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.p_NPP">
            <summary>
            Constant in the saturating function relating NPP to precipitation in the Miami NPP model
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.FracStructScalar">
            <summary>
            Scalar relating the fraction of NPP devoted to structural tissue to the total amount of NPP
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.a_FracEvergreen">
            <summary>
            Coefficient for the quadratic term in the function relating fractional allocation in evergreen leaf matter to fraction of the year experiencing frost
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.b_FracEvergreen">
            <summary>
            Coefficient for the linear term in the function relating fractional allocation in evergreen leaf matter to fraction of the year experiencing frost
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.c_FracEvergreen">
            <summary>
            Intercept in the function relating fractional allocation in evergreen leaf matter to fraction of the year experiencing frost
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.m_EGLeafMortality">
            <summary>
            The slope of the relationship between temperature and evergreen leaf mortality rate
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.c_EGLeafMortality">
            <summary>
            The intercept of the relationship between temperature and evergreen leaf mortality rate
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.er_min">
            <summary>
            The minimum rate of evergreen leaf mortality
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.er_max">
            <summary>
            The maximum rate of evergreen leaf mortality
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.m_DLeafMortality">
            <summary>
            The slope of the relationship between temperature and deciduous leaf mortality rate
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.c_DLeafMortality">
            <summary>
            The intercept of the relationship between temperature and deciduous leaf mortality rate
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.dr_min">
            <summary>
            The minimum rate of deciduous leaf mortality
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.dr_max">
            <summary>
            The maximum rate of deciduous leaf mortality
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.m_FRootMort">
            <summary>
            The slope of the relationship between fine root mortality rate and temperature
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.c_FRootMort">
            <summary>
            The intercept of the relationship between fine root mortality rate and temperature
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.frm_min">
            <summary>
            The minimum rate of fine root mortality
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.frm_max">
            <summary>
            The maximum rate of fine root mortality
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.NPPScalar_Fire">
            <summary>
            Scalar relating fire mortality rate to NPP
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.NPPHalfSaturation_Fire">
            <summary>
            NPP at which fire mortality reaches half its maximum rate
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.LFSScalar_Fire">
            <summary>
            Scalar relating fire mortality rate to the fractional fire season length
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.LFSHalfSaturation_Fire">
            <summary>
            The fractional fire season length at which fire mortality reaches half its maximum rate
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.BaseScalar_Fire">
            <summary>
            Base scalar for the fire mortality function
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.MinReturnInterval">
            <summary>
            Minimum fire return interval
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.p2_StMort">
            <summary>
            Second parameter in the structural mortality function
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.p1_StMort">
            <summary>
            First parameter in the structural mortality function
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.stm_max">
            <summary>
            Maximum rate of structural mortality
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.stm_min">
            <summary>
            Minimum rate of structural mortality
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.MaxFracStruct">
            <summary>
            The maximum fraction of productivity that can be allocated to structural tissue
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.MassCarbonPerMassLeafDryMatter">
            <summary>
            Scalar to convert between mass of carbon and mass of leaf dry matter
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.MassLeafDryMatterPerMassLeafWetMatter">
            <summary>
            Scalar to convert between mass of lead dry and mass of leaf wet matter
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.m2Tokm2Conversion">
            <summary>
            Constant to convert from m2 to km2
            </summary>
        </member>
        <member name="F:Madingley.RevisedTerrestrialPlantModel.Utilities">
            <summary>
            Instance of the class to perform general functions
            </summary>
        </member>
        <member name="M:Madingley.RevisedTerrestrialPlantModel.#ctor">
            <summary>
            Constructor for the plant model
            </summary>
        </member>
        <member name="M:Madingley.RevisedTerrestrialPlantModel.InitialisePlantModelParameters">
            <summary>
            Initialise parameters for the plant model
            </summary>
        </member>
        <member name="M:Madingley.RevisedTerrestrialPlantModel.WriteOutParameterValues(System.IO.StreamWriter)">
            <summary>
            Write out the values of the parameters to an output file
            </summary>
            <param name="sw">A streamwriter object to write the parameter values to</param>
        </member>
        <member name="M:Madingley.RevisedTerrestrialPlantModel.CalculateEquilibriumLeafMass(System.Collections.Generic.SortedList{System.String,System.Double[]},System.Boolean)">
            <summary>
            Estimate the mass of leaves in a specified stock in the specified grid cell at equilibrium, given current environmental conditions
            </summary>
            <param name="cellEnvironment">The environment in the current grid cell</param>
            <param name="deciduous">Whether the leaves in the specified stock are deciduous</param>
            <returns>The equilibrium mass of leaves in the specified stock</returns>
        </member>
        <member name="M:Madingley.RevisedTerrestrialPlantModel.UpdateLeafStock(System.Collections.Generic.SortedList{System.String,System.Double[]},Madingley.GridCellStockHandler,System.Int32[],System.UInt32,System.Boolean,System.String,Madingley.ProcessTracker,Madingley.GlobalProcessTracker,System.UInt32,System.String,System.Boolean)">
            <summary>
            Update the leaf stock during a time step given the environmental conditions in the grid cell
            </summary>
            <param name="cellEnvironment">The environment in the current grid cell</param>
            <param name="gridCellStocks">The stocks in the current grid cell</param>
            <param name="actingStock">The position of the acting stock in the array of grid cell stocks</param>
            <param name="currentTimeStep">The current model time step</param>
            <param name="deciduous">Whether the acting stock consists of deciduous leaves</param>
            <param name="GlobalModelTimeStepUnit">The time step unit used in the model</param>
            <param name="tracker">Whether to track properties of the ecological processes</param>
            <param name="globalTracker">Whether to output data describing the global environment</param>
            <param name="currentMonth">The current model month</param>
            <param name="outputDetail">The level of detail to use in model outputs</param>
            <param name="specificLocations">Whether the model is being run for specific locations</param>
        </member>
        <member name="M:Madingley.RevisedTerrestrialPlantModel.CalculateMiamiNPP(System.Double,System.Double)">
            <summary>
            Calculate NPP in kg C per m2
            </summary>
            <param name="temperature">Current temperature, in degrees Celsius</param>
            <param name="precipitation">Current precipitation, in mm</param>
            <returns></returns>
        </member>
        <member name="M:Madingley.RevisedTerrestrialPlantModel.CalculateFracStruct(System.Double)">
            <summary>
            Calculate the fractional allocation of productivity to structural tissue
            </summary>
            <param name="NPP">Net primary productivity</param>
            <returns>The fractional allocation of productivity to structural tissue</returns>
        </member>
        <member name="M:Madingley.RevisedTerrestrialPlantModel.CalculateFracEvergreen(System.Double)">
            <summary>
            Calculate the fractional allocation of productivity to evergreen plant matter
            </summary>
            <param name="NDF">The proportion of the current year subject to frost</param>
            <returns>The fractional allocation of productivity to evergreen plant matter</returns>
        </member>
        <member name="M:Madingley.RevisedTerrestrialPlantModel.CalculateEvergreenAnnualLeafMortality(System.Double)">
            <summary>
            Calculate the mortality rate of evergreen leaves
            </summary>
            <param name="temperature">Current temperature, in degrees Celsius</param>
            <returns>The mortality rate of evergreen leaves</returns>
        </member>
        <member name="M:Madingley.RevisedTerrestrialPlantModel.CalculateDeciduousAnnualLeafMortality(System.Double)">
            <summary>
            Calculate the mortality rate of deciduous leaves
            </summary>
            <param name="temperature">Current temperature, in degrees Celsius</param>
            <returns>The mortality rate of deciduous leaves</returns>
        </member>
        <member name="M:Madingley.RevisedTerrestrialPlantModel.CalculateLeafFracAllocation(System.Double,System.Double)">
            <summary>
            Calculate the fraction of NPP allocated to non-structural tissue that is allocated to leaves
            </summary>
            <param name="LeafMortRate">The mortality rate of leaves</param>
            <param name="FRootMort">The mortality rate of fine roots</param>
            <returns>The fractional mortality of leaves</returns>
        </member>
        <member name="M:Madingley.RevisedTerrestrialPlantModel.CalculateFineRootMortalityRate(System.Double)">
            <summary>
            Calculate the mortality rate of fine roots
            </summary>
            <param name="temperature">Current temperature, in degrees Celsius</param>
            <returns>The mortality rate of fine roots</returns>
        </member>
        <member name="M:Madingley.RevisedTerrestrialPlantModel.CalculateFireMortalityRate(System.Double,System.Double)">
            <summary>
            Calculate the rate of plant mortality to fire
            </summary>
            <param name="NPP">Net Primary Productivity, in kg C per m2</param>
            <param name="FractionYearFireSeason">The fraction of the year subject to fires</param>
            <returns>The rate of plant mortality to fire</returns>
        </member>
        <member name="M:Madingley.RevisedTerrestrialPlantModel.CalculateStructuralMortality(System.Double)">
            <summary>
            Calculate the mortality rate of plant structural tissue
            </summary>
            <param name="AET">Actual evapotranspiration, in mm</param>
            <returns>The mortality rate of plant structural tissue</returns>
        </member>
        <member name="M:Madingley.RevisedTerrestrialPlantModel.CalculateLeafCarbon(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate leaf carbon, in kg C per m2
            </summary>
            <param name="NPP">Net Primary Productivity, in kg C per m2</param>
            <param name="FracStruct">Fractional allocation to structural tissue</param>
            <param name="LeafMortFrac">Fractional mortality of leaves</param>
            <param name="LeafMortRate">Rate of mortality of leaves</param>
            <param name="FireMortRate">Rate of mortality to fire</param>
            <param name="StMort">Rate of mortality of structural tissue</param>
            <returns>Leaf carbon, in kg C per m2</returns>
        </member>
        <member name="M:Madingley.RevisedTerrestrialPlantModel.CalculateLeafCFixation(System.Double,System.Double,System.Double)">
            <summary>
            Calculate the carbon fixed by leaves, in kg C per m2
            </summary>
            <param name="NPP">Net Primary Productivity, in kg C per m2</param>
            <param name="FracStruct">Fractional allocation to structural tissue</param>
            <param name="LeafMortFrac">Fractional mortality of leaves</param>
            <returns>The carbon fixed by leaves, in kg C per m2</returns>
        </member>
        <member name="M:Madingley.RevisedTerrestrialPlantModel.ConvertToLeafWetMass(System.Double,System.Double)">
            <summary>
            Convert from kg C per m2 to g of leaf wet matter in the entire grid cell
            </summary>
            <param name="kgCarbon">Value to convert, in kg C per m2</param>
            <param name="cellArea">The area of the grid cell</param>
            <returns>Value in g of wet matter in the grid cell</returns>
        </member>
        <member name="M:Madingley.RevisedTerrestrialPlantModel.ConvertToKgCarbonPerM2(System.Double,System.Double)">
            <summary>
            Convert from g of plant wet matter in the entire grid cell to kg C per m2
            </summary>
            <param name="leafWetMatter">The value to convert as total g wet matter in the grid cell</param>
            <param name="cellArea">The area of the grid cell</param>
            <returns>Value in kg C per m2</returns>
        </member>
        <member name="T:Madingley.DispersalTracker">
            <summary>
            Tracks results associated with cohort extinction
            </summary>
        </member>
        <member name="M:Madingley.DispersalTracker.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor for the dispersal tracker: sets up output file
            </summary>
            <param name="dispersalFilename">The filename for the output file</param>
            <param name="outputPath">The path to the output directory</param>
            <param name="outputFilesSuffix">The suffix to be applied to all outputs from this model simulation</param>
        </member>
        <member name="M:Madingley.DispersalTracker.RecordDispersal(System.UInt32[0:,0:,0:],System.UInt32[0:,0:,0:],System.Collections.Generic.List{System.Double}[0:,0:],System.UInt32,Madingley.ModelGrid)">
            <summary>
            Record dispersal events in the dispersal tracker
            </summary>
            <param name="inboundCohorts">The cohorts arriving in a grid cell in the current time step</param>
            <param name="outboundCohorts">The cohorts leaving a ce  ll in the current time step</param>
            <param name="outboundCohortWeights">The body masses of cohorts leaving the cell in the current time step</param>
            <param name="currentTimeStep">The current model time step</param>
            <param name="madingleyModelGrid">The model grid</param>
        </member>
        <member name="M:Madingley.DispersalTracker.CloseStreams">
            <summary>
            Close the output streams for the dispersal tracker
            </summary>
        </member>
        <member name="T:Madingley.CrossCellProcessTracker">
            <summary>
            Tracks diagnostics about the ecological processes
            </summary>
        </member>
        <member name="F:Madingley.CrossCellProcessTracker._TrackCrossCellProcesses">
            <summary>
            Whether to track cross-cell processes
            </summary>
        </member>
        <member name="F:Madingley.CrossCellProcessTracker._TrackDispersal">
            <summary>
            Instance of the dispersal tracker within the cross-cell tracker
            </summary>
        </member>
        <member name="M:Madingley.CrossCellProcessTracker.#ctor(System.Boolean,System.String,System.String,System.String)">
            <summary>
            Constructor for cross cell process tracker: Initialises the trackers for individual processes
            </summary>
            <param name="trackCrossCellProcesses">Whether to track cross-grid-cell ecological processes</param>
            <param name="filename">The name of the file to output data to</param>
            <param name="outputPath">The path to write the file to</param>
            <param name="outputFileSuffix">The suffix to apply to the output filename</param>
        </member>
        <member name="M:Madingley.CrossCellProcessTracker.RecordDispersalForACell(System.UInt32[0:,0:,0:],System.UInt32[0:,0:,0:],System.Collections.Generic.List{System.Double}[0:,0:],System.UInt32,Madingley.ModelGrid)">
            <summary>
            Record dispersal events in the dispersal tracker
            </summary>
            <param name="inboundCohorts">The cohorts arriving in a cell in the current time step</param>
            <param name="outboundCohorts">The cohorts leaving a cell in the current time step</param>
            <param name="outboundCohortWeights">The body masses of cohorts leaving the cell in the current time step</param>
            <param name="timestep">The current model time step</param>
            <param name="madingleyModelGrid">The model grid</param>
        </member>
        <member name="M:Madingley.CrossCellProcessTracker.CloseStreams">
            <summary>
            Close all tracker streams
            </summary>
        </member>
        <member name="P:Madingley.CrossCellProcessTracker.TrackCrossCellProcesses">
            <summary>
            Get or set whether to track cross-cell processes
            </summary>
        </member>
        <member name="P:Madingley.CrossCellProcessTracker.TrackDispersal">
            <summary>
            Get and set the reproduction tracker
            </summary>
        </member>
        <member name="T:Madingley.EatingTracker">
            <summary>
            Tracks results associated with the eating process
            </summary>
        </member>
        <member name="F:Madingley.EatingTracker.TrophicMassFlows">
            <summary>
            Array to hold flows of mass among trophic levels. Order is:
            Lat, Lon, From (group), To (group)
            </summary>
        </member>
        <member name="M:Madingley.EatingTracker.#ctor(System.UInt32,System.UInt32,System.String,System.String,System.String,System.Int32,Madingley.MadingleyModelInitialisation,System.Boolean)">
            <summary>
            Set up the tracker for outputing properties of the eating process
            </summary>
            <param name="numLats">The number of latitudes in the model grid</param>
            <param name="numLons">The number of longitudes in the model grid</param>
            <param name="trophicFlowsFilename">The filename to write data on trophic flows to</param>
            <param name="outputFilesSuffix">The suffix to apply to output files from this simulation</param>
            <param name="outputPath">The file path to write all outputs to</param>
            <param name="cellIndex">The index of the current cell within the list of all grid cells in this simulation</param>
            <param name="initialisation">The instance of the MadingleyModelInitialisation class for this simulation</param>
            <param name="MarineCell">Whether the current cell is a marine cell</param>
        </member>
        <member name="M:Madingley.EatingTracker.RecordPredationTrophicFlow(System.UInt32,System.UInt32,System.Int32,System.Int32,Madingley.FunctionalGroupDefinitions,System.Double,System.Double,System.Double,Madingley.MadingleyModelInitialisation,System.Boolean)">
            <summary>
            Record the flow of biomass between trophic levels during predation
            </summary>
            <param name="latIndex">The latitudinal index of the current grid cell</param>
            <param name="lonIndex">The longitudinal index of the current grid cell</param>
            <param name="fromFunctionalGroup">The index of the functional group that the biomass is flowing from (i.e. the prey)</param>
            <param name="toFunctionalGroup">The index of the functional group that the biomass is flowing to (i.e. the predator)</param>
            <param name="cohortFunctionalGroupDefinitions">The functional group definitions of cohorts in the model</param>
            <param name="massEaten">The total biomass eaten by the predator cohort</param>
            <param name="predatorBodyMass">The body mass of the predator doing the eating</param>
            <param name="preyBodyMass">The body mass of the prey being eaten</param>
            <param name="initialisation">The Madingley Model initialisation</param>
            <param name="MarineCell">Whether the current cell is a marine cell</param>
        </member>
        <member name="M:Madingley.EatingTracker.RecordHerbivoryTrophicFlow(System.UInt32,System.UInt32,System.Int32,Madingley.FunctionalGroupDefinitions,System.Double,System.Double,Madingley.MadingleyModelInitialisation,System.Boolean)">
            <summary>
            Record the flow of biomass between trophic levels during herbivory
            </summary>
            <param name="latIndex">The latitudinal index of the current grid cell</param>
            <param name="lonIndex">The longitudinal index of the current grid cell</param>
            <param name="toFunctionalGroup">The index of the functional group that the biomass is flowing to (i.e. the herbivore)</param>
            <param name="cohortFunctionalGroupDefinitions">The functional group definitions of cohorts in the model</param>
            <param name="massEaten">The total biomass eaten by the herbivore cohort</param>
            <param name="predatorBodyMass">The mass of the predator doing the eating</param>
            <param name="initialisation">The Madingley Model initialisation</param>
            <param name="MarineCell">Whether the current cell is a marine cell</param>
        </member>
        <member name="M:Madingley.EatingTracker.RecordPrimaryProductionTrophicFlow(System.UInt32,System.UInt32,System.Double)">
            <summary>
            Record the flow of biomass into the autotroph trophic level as a result of primary production
            </summary>
            <param name="latIndex">The latitudinal index of the current grid cell</param>
            <param name="lonIndex">The longitudinal index of the current grid cell</param>
            <param name="massEaten">The total biomass gained by the autotroph stock</param>
        </member>
        <member name="M:Madingley.EatingTracker.WriteTrophicFlows(System.UInt32,System.UInt32,System.UInt32,Madingley.MadingleyModelInitialisation,System.Boolean)">
            <summary>
            Write flows of matter among trophic levels to the output file at the end of the time step
            </summary>
            <param name="currentTimeStep">The current time step</param>
            <param name="numLats">The latitudinal dimension of the model grid in number of cells</param>
            <param name="numLons">The longitudinal dimension of the model grid in number of cells</param>
            <param name="initialisation">The Madingley Model initialisation</param>
            <param name="MarineCell">Whether the current cell is a marine cell</param>
        </member>
        <member name="M:Madingley.EatingTracker.CloseStreams">
            <summary>
            Close the streams for writing eating data
            </summary>
        </member>
        <member name="T:Madingley.EcosytemMetrics">
            <summary>
            Calculates ecosystem-level metrics
            </summary>
        </member>
        <member name="F:Madingley.EcosytemMetrics._TrophicIndexBinValues">
            <summary>
            The trophic level values associated with each of the trophic level bins
            </summary>
        </member>
        <member name="F:Madingley.EcosytemMetrics._NumberTrophicBins">
            <summary>
            The number of trophic level bins to use in calculating ecosystem-level metrics
            </summary>
        </member>
        <member name="F:Madingley.EcosytemMetrics._RServeProcess">
            <summary>
            Instance of the connection to R
            </summary>
        </member>
        <member name="M:Madingley.EcosytemMetrics.#ctor">
            <summary>
            Constructor for the ecosystem metrics class: sets up trophic level bins
            </summary>
        </member>
        <member name="M:Madingley.EcosytemMetrics.CloseRserve">
            <summary>
            Closes the connection to R (currently disabled)
            </summary>
        </member>
        <member name="M:Madingley.EcosytemMetrics.CalculateMeanTrophicLevelCell(Madingley.ModelGrid,System.Collections.Generic.List{System.UInt32[]},System.Int32)">
            <summary>
            Calculates the mean trophic level of all individual organisms in a grid cell
            </summary>
            <param name="ecosystemModelGrid">The model grid</param>
            <param name="cellIndices">The list of cell indices in the current model simulation</param>
            <param name="cellIndex">The index of the current cell in the list of cells to run</param>
            <returns>The mean trophic level of individuals in the grid cell</returns>
        </member>
        <member name="M:Madingley.EcosytemMetrics.CalculateTrophicDistribution(Madingley.ModelGrid,System.Collections.Generic.List{System.UInt32[]},System.Int32)">
            <summary>
            Return the distribution of biomasses among trophic level bins
            </summary>
            <param name="ecosystemModelGrid">The model grid</param>
            <param name="cellIndices">The list of cell indices to be run in the current model simulation</param>
            <param name="cellIndex">The index of the current cell in the list of cells to be run</param>
            <returns>The distribution of biomasses among trophic level bins</returns>
        </member>
        <member name="M:Madingley.EcosytemMetrics.CalculateFunctionalEvennessRao(Madingley.ModelGrid,Madingley.FunctionalGroupDefinitions,System.Collections.Generic.List{System.UInt32[]},System.Int32,System.String)">
            <summary>
            Calculate trophic evenness using the Rao Index
            </summary>
            <param name="ecosystemModelGrid">The model grid</param>
            <param name="cellIndices">The list of indices of cells to be run in the current simulation</param>
            <param name="cellIndex">The index of the current cell within the list of cells to be run</param>
            <returns>Trophic evenness</returns>
        </member>
        <member name="M:Madingley.EcosytemMetrics.CalculateArithmeticCommunityMeanBodyMass(Madingley.ModelGrid,System.Collections.Generic.List{System.UInt32[]},System.Int32)">
            <summary>
            Calculates the arithmetic community weighted mean body mass
            </summary>
            <param name="ecosystemModelGrid">The model grid</param>
            <param name="cellIndices">The list of indices of cells to be run in the current model simulation</param>
            <param name="cellIndex">The index of the current cell within the list of cells to be run</param>
            <returns>arithmetic community weighted mean body mass</returns>
        </member>
        <member name="M:Madingley.EcosytemMetrics.CalculateGeometricCommunityMeanBodyMass(Madingley.ModelGrid,System.Collections.Generic.List{System.UInt32[]},System.Int32)">
            <summary>
            Calculates the geometric community weighted mean body mass
            </summary>
            <param name="ecosystemModelGrid">The model grid</param>
            <param name="cellIndices">The list of indices of cells to be run in the current model simulation</param>
            <param name="cellIndex">The index of the current cell within the list of cells to be run</param>
            <returns>geometric community weighted mean body mass</returns>
        </member>
        <member name="M:Madingley.EcosytemMetrics.CalculateTrophicEvennessFRO(Madingley.ModelGrid,System.Collections.Generic.List{System.UInt32[]},System.Int32)">
            <summary>
            Calculates trophic evenness using the FRO Index of Mouillot et al.
            </summary>
            <param name="ecosystemModelGrid">The model grid</param>
            <param name="cellIndices">The list of indices of cells to be run in the current model simulation</param>
            <param name="cellIndex">The index of the current cell within the list of cells to be run</param>
            <returns>Trophic evenness</returns>
            <remarks>From Mouillot et al (2005) Functional regularity: a neglected aspect of functional diversity, Oecologia</remarks>
        </member>
        <member name="M:Madingley.EcosytemMetrics.CalculateFunctionalDiversity(Madingley.ModelGrid,Madingley.FunctionalGroupDefinitions,System.Collections.Generic.List{System.UInt32[]},System.Int32)">
            <summary>
            Calculates functional diversity of cohorts in a grid cell as functional richness and functional diveregence (using the Rao Index)
            </summary>
            <param name="ecosystemModelGrid">The model grid</param>
            <param name="cohortDefinitions">The functional group definitions for cohorts in the model</param>
            <param name="cellIndices">The list of cell indices in the current model simulation</param>
            <param name="cellIndex">The index of the current cell within the list of cells to run</param>
            <returns>A pair of values representing the functional richness and functional divergence (functional richness currently disabled!)</returns>
        </member>
        <member name="P:Madingley.EcosytemMetrics.TrophicIndexBinValues">
            <summary>
            Get and set the trophic level values associated with each of the trophic level bins
            </summary>
        </member>
        <member name="P:Madingley.EcosytemMetrics.NumberTrophicBins">
            <summary>
            Get and set the number of trophic level bins to use in calculating ecosystem-level metrics
            </summary>
        </member>
        <member name="T:Madingley.ExtinctionTracker">
            <summary>
            Tracks results associated with cohort extinction
            </summary>
        </member>
        <member name="M:Madingley.ExtinctionTracker.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Constructor for the eating tracker: sets up output file
            </summary>
            <param name="extinctionFilename">The filename for the output file</param>
            <param name="outputPath">The path to the output directory</param>
            <param name="outputFilesSuffix">The suffix to be applied to all outputs from this model simulation</param>
            <param name="cellIndex">The index of the current cell within the list of cells in this simulation</param>
        </member>
        <member name="M:Madingley.ExtinctionTracker.RecordExtinction(System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Collections.Generic.List{System.UInt32})">
            <summary>
            Record the extinction of a cohort in the output file
            </summary>
            <param name="latIndex">The latitudinal index of the current grid cell</param>
            <param name="lonIndex">The longitudinal index of the current grid cell</param>
            <param name="currentTimeStep">The current model time step</param>
            <param name="merged">Whether the cohort going extinct has ever been merged with another cohort</param>
            <param name="cohortID">The ID of the cohort going extinct</param>
        </member>
        <member name="F:Madingley.FeedingInteractions._FeedingInteractionsDS">
            <summary>
            Dataset to output the Massflows data
            </summary>
        </member>
        <member name="F:Madingley.FeedingInteractions.DataConverter">
            <summary>
            An instance of the class to convert data between arrays and SDS objects
            </summary>
        </member>
        <member name="F:Madingley.FeedingInteractions.SDSCreator">
            <summary>
            Instance of the class to create SDS objects
            </summary>
        </member>
        <member name="F:Madingley.FeedingInteractions.InteractionWriter">
            <summary>
            A streamwriter instance for outputting data on interactions between cohorts
            </summary>
        </member>
        <member name="F:Madingley.FeedingInteractions.SyncInteractionWriter">
            <summary>
            A synchronized version of the streamwriter for outuputting data on the interactions between cohorts
            </summary>
        </member>
        <member name="M:Madingley.FeedingInteractions.InitialiseInteractionsMatrix(Madingley.GridCellCohortHandler)">
            <summary>
            Initialises the feeding interactions matrix each timestep
            </summary>
        </member>
        <member name="M:Madingley.FeedingInteractions.RecordFeedingInteraction(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Record a cohort specific feeding interaction
            </summary>
        </member>
        <member name="M:Madingley.FeedingInteractions.RecordFeedingInteraction(System.String,System.UInt32,System.Int64,System.Int64,System.Double,System.Double)">
            <summary>
            Record a cohort specific feeding interaction
            </summary>
        </member>
        <member name="M:Madingley.FeedingInteractions.CloseStreams">
            <summary>
            Close the output streams for the reproduction tracker
            </summary>
        </member>
        <member name="T:Madingley.GlobalNPPTracker">
            <summary>
            Tracks flows of biomass into plant matter through net primary production
            </summary>
        </member>
        <member name="F:Madingley.GlobalNPPTracker.NPP">
            <summary>
            An array to hold gridded NPP values
            </summary>
        </member>
        <member name="F:Madingley.GlobalNPPTracker.HANPP">
            <summary>
            An array to hold gridded NPP values
            </summary>
        </member>
        <member name="F:Madingley.GlobalNPPTracker.DataConverter">
            <summary>
            An instance of the class to convert data between arrays and SDS objects
            </summary>
        </member>
        <member name="F:Madingley.GlobalNPPTracker.SDSCreator">
            <summary>
            Instance of the class to create SDS objects
            </summary>
        </member>
        <member name="F:Madingley.GlobalNPPTracker.NPPOutput">
            <summary>
            A dataset to store the NPP outputs to file
            </summary>
        </member>
        <member name="F:Madingley.GlobalNPPTracker.HANPPOutput">
            <summary>
            A dataset to store the NPP outputs to file
            </summary>
        </member>
        <member name="M:Madingley.GlobalNPPTracker.#ctor(System.String,System.Int32,System.Int32,System.Single[],System.Single[],System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Constructor for the global NPP tracker: sets up the output file and the data arrays
            </summary>
            <param name="outputPath">Path to the file to output NPP data to</param>
            <param name="numLats">The number of cells latitudinally in the NPP output grid</param>
            <param name="numLons">The number of cells longitudinally in the NPP output grid</param>
            <param name="lats">The latitudes of cells in the grid to output</param>
            <param name="lons">The longitudes of cells in the grid to output</param>
            <param name="latCellSize">The latitudinal cell size of the grid to output</param>
            <param name="lonCellSize">The longitudinal cell size of the grid to output</param>
            <param name="numTimeSteps">The number of time steps to output NPP data for</param>
        </member>
        <member name="M:Madingley.GlobalNPPTracker.RecordNPPValue(System.UInt32,System.UInt32,System.UInt32,System.Double)">
            <summary>
            Add the NPP value for this grid cell
            </summary>
            <param name="latIndex">The latitude index of the grid cell</param>
            <param name="lonIndex">The longitude index of the grid cell</param>
            <param name="val">The NPP value to be recorded</param>
        </member>
        <member name="M:Madingley.GlobalNPPTracker.RecordHANPPValue(System.UInt32,System.UInt32,System.UInt32,System.Double)">
            <summary>
            Add the HANPP value for this grid cell
            </summary>
            <param name="latIndex">The latitude index of the grid cell</param>
            <param name="lonIndex">The longitude index of the grid cell</param>
            <param name="val">The HANPP value to be recorded</param>
        </member>
        <member name="M:Madingley.GlobalNPPTracker.StoreNPPGrid(System.UInt32,System.UInt32)">
            <summary>
            Add the filled NPP grid the memory dataset ready to be written to file
            </summary>
            <param name="t">The current time step</param>
        </member>
        <member name="M:Madingley.GlobalNPPTracker.StoreHANPPGrid(System.UInt32,System.UInt32)">
            <summary>
            Add the filled NPP grid the memory dataset ready to be written to file
            </summary>
            <param name="t">The current time step</param>
        </member>
        <member name="M:Madingley.GlobalNPPTracker.CloseNPPFile">
            <summary>
            Close the connection to the file for outputting NPP flows
            </summary>
        </member>
        <member name="T:Madingley.GlobalProcessTracker">
            <summary>
            Tracks ecological processes
            </summary>
        </member>
        <member name="F:Madingley.GlobalProcessTracker._TrackProcesses">
            <summary>
            Whether to track processes
            </summary>
        </member>
        <member name="F:Madingley.GlobalProcessTracker._TrackNPP">
            <summary>
            An instance of the global NPP tracker
            </summary>
        </member>
        <member name="M:Madingley.GlobalProcessTracker.#ctor(System.UInt32,System.Single[],System.Single[],System.Collections.Generic.List{System.UInt32[]},System.Collections.Generic.SortedList{System.String,System.String},System.Boolean,Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.Double,System.String,System.String,Madingley.MassBinsHandler,System.Boolean,Madingley.MadingleyModelInitialisation,System.Single,System.Single)">
            <summary>
            Constructor for process tracker: Initialises the trackers for individual processes
            </summary>
            <param name="numTimesteps">The number of time steps in the model</param>
            <param name="lats">The latitudes of active grid cells in the model</param>
            <param name="lons">The longitudes of active grid cells in the model</param>
            <param name="cellIndices">List of indices of active cells in the model grid</param>
            <param name="Filenames">The filenames of the output files to write the tracking results to</param>
            <param name="trackProcesses">Whether to track processes</param>
            <param name="cohortDefinitions">The definitions for cohort functional groups in the model</param>
            <param name="missingValue">The missing value to use in process tracking output files</param>
            <param name="outputFileSuffix">The suffix to be applied to output files from process tracking</param>
            <param name="outputPath">The path to the folder to be used for process tracking outputs</param>
            <param name="trackerMassBins">The mass bins to use for categorising output data in the process trackers</param>
            <param name="specificLocations">Whether the model is being run for specific locations</param>
            <param name="initialisation">The Madingley Model initialisation</param>
            <param name="latCellSize">The size of grid cells latitudinally</param>
            <param name="lonCellSize">The size of grid cells longitudinally</param>
        </member>
        <member name="M:Madingley.GlobalProcessTracker.RecordNPP(System.UInt32,System.UInt32,System.UInt32,System.Double)">
            <summary>
            Record a flow of biomass to plants through net primary production
            </summary>
            <param name="latIndex">The latitudinal index of the current grid cell</param>
            <param name="lonIndex">The longitudinal index of the current grid cell</param>
            <param name="val">The NPP value</param>
        </member>
        <member name="M:Madingley.GlobalProcessTracker.StoreNPPGrid(System.UInt32,System.UInt32)">
            <summary>
            Write out the NPP-tracking data to file
            </summary>
            <param name="t">The current time step</param>
        </member>
        <member name="M:Madingley.GlobalProcessTracker.RecordHANPP(System.UInt32,System.UInt32,System.UInt32,System.Double)">
            <summary>
            Record a flow of biomass to plants through net primary production
            </summary>
            <param name="latIndex">The latitudinal index of the current grid cell</param>
            <param name="lonIndex">The longitudinal index of the current grid cell</param>
            <param name="val">The HANPP value</param>
        </member>
        <member name="M:Madingley.GlobalProcessTracker.StoreHANPPGrid(System.UInt32,System.UInt32)">
            <summary>
            Write out the HANPP-tracking data to file
            </summary>
            <param name="t">The current time step</param>
        </member>
        <member name="M:Madingley.GlobalProcessTracker.CloseNPPFile">
            <summary>
            Close the connection to the file for outputting NPP data
            </summary>
        </member>
        <member name="P:Madingley.GlobalProcessTracker.TrackProcesses">
            <summary>
            Get or set whether to track processes
            </summary>
        </member>
        <member name="P:Madingley.GlobalProcessTracker.TrackNPP">
            <summary>
            Get and set the instance of the global NPP tracker
            </summary>
        </member>
        <member name="T:Madingley.GrowthTracker">
            <summary>
            Track the growth of a cohort in a time step
            </summary>
        </member>
        <member name="F:Madingley.GrowthTracker.GrowthFilename">
            <summary>
            File to write data on growth to
            </summary>
        </member>
        <member name="F:Madingley.GrowthTracker.GrowthWriter">
            <summary>
            A streamwriter for writing out data on growth
            </summary>
        </member>
        <member name="M:Madingley.GrowthTracker.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Collections.Generic.List{System.UInt32[]},System.String,System.String,System.String,System.Int32)">
            <summary>
            Set up the tracker for outputing the growth of cohorts each time step
            </summary>
            <param name="numTimeSteps">The total number of timesteps for this simulation</param>
            <param name="numLats">The number of latitudes in the model grid</param>
            <param name="numLons">The number of longitudes in the model grid</param>
            <param name="cellIndices">List of indices of active cells in the model grid</param>
            <param name="growthFilename">The name of the file to write information about growth to</param>
            <param name="outputFilesSuffix">The suffix to apply to output files from this simulation</param>
            <param name="outputPath">The file path to write all outputs to</param>
            <param name="cellIndex">The index of the current cell in the list of all cells in this simulation</param>
        </member>
        <member name="M:Madingley.GrowthTracker.RecordGrowth(System.UInt32,System.UInt32,System.UInt32,System.Double,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Record the growth of the individuals in a cohort in the current time step
            </summary>
            <param name="latIndex">The latitudinal index of the current grid cell</param>
            <param name="lonIndex">The longitudinal index of the current grid cell</param>
            <param name="timeStep">The current time step</param>
            <param name="currentBodyMass">The current body mass of individuals in the cohort</param>
            <param name="functionalGroup">The index of the functional group that the cohort belongs to</param>
            <param name="netGrowth">The net growth of individuals in the cohort this time step</param>
            <param name="metabolism">The biomass lost by individuals in this cohort through metabolism</param>
            <param name="predation">The biomass gained by individuals in this cohort through predation</param>
            <param name="herbivory">The biomass gained by individuals in this cohort through herbivory</param>
        </member>
        <member name="M:Madingley.GrowthTracker.CloseStreams">
            <summary>
            Closes streams for writing growth data
            </summary>
        </member>
        <member name="T:Madingley.MetabolismTracker">
            <summary>
            Tracks variables associated with cohort metabolism
            </summary>
        </member>
        <member name="F:Madingley.MetabolismTracker.MetabolismFilename">
            <summary>
            File to write metabolism data to
            </summary>
        </member>
        <member name="F:Madingley.MetabolismTracker.MetabolismWriter">
            <summary>
            A streamwriter to write out data on metabolism
            </summary>
        </member>
        <member name="M:Madingley.MetabolismTracker.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Set up the metabolism tracker
            </summary>
            <param name="metabolismFilename">Name of the metabolism tracker file to write to</param>
            <param name="outputPath">The path to the folder in which the metabolism tracker data file will be stored</param>
            <param name="outputFilesSuffix">A suffix for the filename in the case that there is more than one scenario</param>
            <param name="cellIndex">The index of the current cell within the list of all cells in this simulation</param>
        </member>
        <member name="M:Madingley.MetabolismTracker.RecordMetabolism(System.UInt32,System.UInt32,System.UInt32,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Record the metabolic loss of individuals in a cohort
            </summary>
            <param name="latIndex">The latitudinal index of the current grid cell</param>
            <param name="lonIndex">The longitudinal index of the current grid cell</param>
            <param name="timeStep">The current time step</param>
            <param name="currentBodyMass">The current body mass of individuals in the cohort</param>
            <param name="functionalGroup">The index of the functional group that the cohort belongs to</param>
            <param name="temperature">The ambient temperature this cohort is experiencing</param>
            <param name="metabolicLoss">The metabolic loss of this cohort in this time step</param>
        </member>
        <member name="M:Madingley.MetabolismTracker.CloseStreams">
            <summary>
            Closes streams for writing metabolism data
            </summary>
        </member>
        <member name="T:Madingley.MortalityTracker">
            <summary>
            Track results associated with mortality
            </summary>
        </member>
        <member name="F:Madingley.MortalityTracker.MortalityFilename">
            <summary>
            Name of the file to write data on mortality to
            </summary>
        </member>
        <member name="F:Madingley.MortalityTracker.MortalityWriter">
            <summary>
            A streamwriter instance to output data on mortality
            </summary>
        </member>
        <member name="F:Madingley.MortalityTracker.SyncMortalityWriter">
            <summary>
            Synchronized version of the streamwriter to output mortality data
            </summary>
        </member>
        <member name="F:Madingley.MortalityTracker.MortalityList">
            <summary>
            List of mortality events for each cohort (keyed by cohort ID)
            </summary>
        </member>
        <member name="F:Madingley.MortalityTracker.RandomNumberGenerator">
            <summary>
            An instance of the simple random number generator
            </summary>
        </member>
        <member name="M:Madingley.MortalityTracker.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Collections.Generic.List{System.UInt32[]},System.String,System.String,System.String,System.Int32)">
            <summary>
            Set up properties of the mortality tracker
            </summary>
            <param name="numTimeSteps">The total number of time steps for this simulation</param>
            <param name="numLats">The number of latitudinal cells in the model grid</param>
            <param name="numLons">The number of longitudinal cells in the model grid</param>
            <param name="cellIndices">List of indices of active cells in the model grid</param>
            <param name="mortalityFilename">The filename to write data on mortality to</param>
            <param name="outputFileSuffix">The suffix to apply to all output files from this model run</param>
            <param name="outputPath">The path to write all output files to</param>
            <param name="cellIndex">The index of the current cell in the list of all cells to run the model for</param>
        </member>
        <member name="M:Madingley.MortalityTracker.RecordMortality(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Double,System.Double,System.UInt32,System.UInt32,System.Double,System.String)">
            <summary>
            Record a mortality event associated with a cohort to memory
            </summary>
            <param name="latIndex">The latitudinal index of the current grid cell</param>
            <param name="lonIndex">The longitudinal index of the current grid cell</param>
            <param name="birthStep">The time step that the cohort came into existence</param>
            <param name="timestep">The current time step</param>
            <param name="currentMass">The current body mass of individuals in the cohort with dying individuals</param>
            <param name="adultMass">The adult body mass of individuals in the cohort with dying individuals</param>
            <param name="functionalGroup">The index of the functional group that the cohort belongs to</param>
            <param name="cohortID">The unique ID of the cohort</param>
            <param name="numberDied">The number of individuals </param>
            <param name="mortalitySource"></param>
        </member>
        <member name="M:Madingley.MortalityTracker.OutputMortalityProfile(System.UInt32)">
            <summary>
            Output the mortality profile of a cohort becoming extinct
            </summary>
            <param name="cohortID">The ID of the cohort becoming extinct</param>
        </member>
        <member name="T:Madingley.OutputCell">
            <summary>
            A class to perform all operations involved in outputting the results to console, screen or file
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.ModelOutputDetail">
            <summary>
            An instance of the enumerator to designate output detail level
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.DataSetToViewLive">
            <summary>
            A dataset to store the live screen view
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.BasicOutputMemory">
            <summary>
            A version of the basic outputs dataset to hold data for output in memory while running the model
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.MassBinsOutputMemory">
            <summary>
            A memory version of the mass bins output to store data during the model run
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.TrackedCohortsOutputMemory">
            <summary>
            A memory version of the tracked cohorts output to hold data during the model run
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.CohortTraitIndices">
            <summary>
            Holds a list of the functional group indices correpsonding to each unique cohort trait
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.CohortTraitIndicesMarine">
            <summary>
            Holds a list of the functional group indices correpsonding to each unique cohort trait in the marine realm
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.StockTraitIndices">
            <summary>
            Holds a list of the functional group indices corresponding to each unique stock trait
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.StockTraitIndicesMarine">
            <summary>
            Holds a list of the functional group indices corresponding to each unique stock trait
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.TotalLivingBiomass">
            <summary>
            The total living biomass in the model
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.TotalLivingBiomassDensity">
            <summary>
            The total living biomass in the model
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.TotalHeterotrophBiomassDensity">
            <summary>
            The total heterotroph biomass in the model
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.TotalHeterotrophAbundanceDensity">
            <summary>
            The total heterotroph abundance in the model
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.TotalIncomingNPP">
            <summary>
            Total NPP incoming from the marine model
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.TotalDensitiesOut">
            <summary>
            Total densities of all cohorts within each combination of cohort traits
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.TotalDensitiesMarineOut">
            <summary>
            Total densities of all cohorts within each combination of cohort traits (marine)
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.TotalBiomassDensitiesOut">
            <summary>
            Total biomass densities of all cohorts within each combination of cohort traits
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.TotalBiomassDensitiesMarineOut">
            <summary>
            Total biomass densities of all cohorts within each combination of cohort traits
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.AbundancesInMassBins">
            <summary>
            List of vectors of abundances in mass bins corresponding with each unique trait value
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.BiomassesInMassBins">
            <summary>
            List of vectors of biomasses in mass bins corresponding with each unique trait value
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.AbundancesInJuvenileAdultMassBins">
            <summary>
            List of arrays of abundance in juvenile vs. adult mass bins correpsonding with each unique trait value
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.BiomassesInJuvenileAdultMassBins">
            <summary>
            List of arrays of biomass in juvenile vs. adult mass bins correpsonding with each unique trait value
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.MassBinNumber">
            <summary>
            The number of mass bins to use in model outputs
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.MassBins">
            <summary>
            The mass bins to use in model outputs
            </summary>
        </member>
        <member name="F:Madingley.OutputCell._MassBinHandler">
            <summary>
            The mass bin handler for the mass bins to use in the model output
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.MaximumYValue">
            <summary>
            The upper limit for the y-axis of the live output
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.TimeSteps">
            <summary>
            The time steps in this model simulation
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.TrackedCohorts">
            <summary>
            List to hold cohort IDs of tracked cohorts
            </summary>
        </member>
        <member name="F:Madingley.OutputCell._OutputPath">
            <summary>
            The path to the output folder
            </summary>
        </member>
        <member name="F:Madingley.OutputCell._OutputSuffix">
            <summary>
            The suffix to apply to all outputs from this grid cell
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.CohortTraits">
            <summary>
            The cohort traits to be considered in the outputs
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.CohortTraitValues">
            <summary>
            All unique values of the traits to be considered in outputs (terrestrial only)
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.CohortTraitValuesMarine">
            <summary>
            All unique values of the traits to be considered in marine outputs
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.StockTraits">
            <summary>
            The stock traits to be considered in the outputs
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.StockTraitsMarine">
            <summary>
            The marine stock traits to be considered in the outputs
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.StockTraitValues">
            <summary>
            All unique values of the traits to be considered in the outputs
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.StockTraitValuesMarine">
            <summary>
            All unique values of the traits to be considered in the marine outputs
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.TrackedCohortIndividualMasses">
            <summary>
            Vector of individual body masses of the tracked cohorts
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.TrackedCohortAbundances">
            <summary>
            Vector of abundances of the tracked cohorts
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.DataConverter">
            <summary>
            Instance of the class to convert data between arrays and SDS objects
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.SDSCreator">
            <summary>
            Intance of the class to create SDS objects
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.GridViewer">
            <summary>
            An instance of the class to view grid results
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.LiveOutputs">
            <summary>
            Whether to display live outputs during the model run
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.TrackMarineSpecifics">
            <summary>
             Track marine specific functional groups (i.e. plankton, baleen whales)
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.PlanktonSizeThreshold">
            <summary>
            The size threshold for determining whether an organism is planktonic
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.OutputMetrics">
            <summary>
            Indicates whether to output metric information
            </summary>
        </member>
        <member name="F:Madingley.OutputCell.Metrics">
            <summary>
            Instance of the class to calculate ecosystem metrics
            </summary>
        </member>
        <member name="M:Madingley.OutputCell.#ctor(System.String,Madingley.MadingleyModelInitialisation,System.Int32)">
            <summary>
            Constructor for the cell output class
            </summary>
            <param name="outputDetail">The level of detail to include in the ouputs: 'low', 'medium' or 'high'</param>
            <param name="modelInitialisation">Model initialisation object</param>
            <param name="cellIndex">The index of the current cell in the list of all cells to run the model for</param>
        </member>
        <member name="M:Madingley.OutputCell.SpawnDatasetViewer(System.UInt32)">
            <summary>
            Spawn dataset viewer for the live outputs
            </summary>
            <param name="NumTimeSteps">The number of time steps in the model run</param>
        </member>
        <member name="M:Madingley.OutputCell.SetUpOutputs(Madingley.ModelGrid,Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.UInt32,System.String,System.Collections.Generic.List{System.UInt32[]},System.Int32,System.Boolean)">
            <summary>
            Set up all outputs (live, console and file) prior to the model run
            </summary>
            <param name="ecosystemModelGrid">The model grid that output data will be derived from</param>
            <param name="cohortFunctionalGroupDefinitions">The definitions for cohort functional groups</param>
            <param name="stockFunctionalGroupDefinitions">The definitions for stock functional groups</param>
            <param name="numTimeSteps">The number of time steps in the model run</param>
            <param name="outputFilesSuffix">The suffix to be applied to all output files from the current model run</param>
            <param name="cellIndices">List of indices of active cells in the model grid</param>
            <param name="cellIndex">The number of the current grid cell in the list of indices of active cells</param>
            <param name="marineCell">Whether the current cell is a marine cell</param>
        </member>
        <member name="M:Madingley.OutputCell.InitialiseTraitBasedOutputs(Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.Boolean)">
            <summary>
            Set up the necessary architecture for generating outputs arranged by trait value
            </summary>
            <param name="cohortFunctionalGroupDefinitions">Functional group definitions for cohorts in the model</param>
            <param name="stockFunctionalGroupDefinitions">Functional group definitions for stocks in the model</param>
            <param name="marineCell">Whether the current cell is a marine cell</param>
        </member>
        <member name="M:Madingley.OutputCell.SetUpLowLevelOutputs(System.UInt32,Madingley.ModelGrid)">
            <summary>
            Sets up the outputs associated with all levels of output detail
            </summary>
            <param name="numTimeSteps">The number of time steps in the model run</param>
            <param name="ecosystemModelGrid">The model grid</param>
        </member>
        <member name="M:Madingley.OutputCell.SetupMediumLevelOutputs(Madingley.ModelGrid,System.Boolean)">
            <summary>
            Sets up the outputs associated with medium and high levels of output detail
            </summary>
            <param name="ecosystemModelGrid">The model grid</param>
            <param name="marineCell">Whether the current cell is a marine cell</param>
        </member>
        <member name="M:Madingley.OutputCell.SetUpHighLevelOutputs(Madingley.ModelGrid,System.Collections.Generic.List{System.UInt32[]},System.Int32,Madingley.FunctionalGroupDefinitions,System.Boolean)">
            <summary>
            Sets up the outputs associated with the high level of output detail
            </summary>
            <param name="ecosystemModelGrid">The model grid</param>
            <param name="cellIndices">The indices of active cells in the model grid</param>
            <param name="cellNumber">The index of the current cell in the list of active cells</param>
            <param name="cohortFunctionalGroupDefinitions">The functional group definitions for cohorts in the model</param>
            <param name="marineCell">Whether the current cell is a marine cell</param>
        </member>
        <member name="M:Madingley.OutputCell.CalculateOutputs(Madingley.ModelGrid,Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.Collections.Generic.List{System.UInt32[]},System.Int32,System.Collections.Generic.SortedList{System.String,System.Double},Madingley.MadingleyModelInitialisation,System.UInt32,System.Boolean)">
            <summary>
            Calculates the variables to output
            </summary>
            <param name="ecosystemModelGrid">The model grid to get output data from</param>
            <param name="cohortFunctionalGroupDefinitions">Definitions of the cohort functional groups in the model</param>
            <param name="stockFunctionalGroupDefinitions">Definitions of the stock functional groups in the model</param>
            <param name="cellIndices">List of indices of active cells in the model grid</param>
            <param name="cellNumber">The number of the current cell in the list of indices of active cells</param>
            <param name="globalDiagnosticVariables">The sorted list of global diagnostic variables in the model</param>
            <param name="initialisation">The Madingley Model initialisation</param>
            <param name="month">The current month in the model run</param>
            <param name="marineCell">Whether the current cell is a marine cell</param>
        </member>
        <member name="M:Madingley.OutputCell.CalculateLowLevelOutputs(Madingley.ModelGrid,System.Collections.Generic.List{System.UInt32[]},System.Int32,System.Collections.Generic.SortedList{System.String,System.Double},Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,Madingley.MadingleyModelInitialisation,System.UInt32,System.Boolean)">
            <summary>
            Calculate outputs associated with low-level outputs
            </summary>
            <param name="ecosystemModelGrid">The model grid</param>
            <param name="cellIndices">The list of indices of active cells in the model grid</param>
            <param name="cellIndex">The position of the current cell in the list of active cells</param>
            <param name="globalDiagnosticVariables">The global diagnostic variables for this model run</param>
            <param name="cohortFunctionalGroupDefinitions">The functional group definitions of cohorts in the model</param>
            <param name="stockFunctionalGroupDefinitions">The functional group definitions of stocks in the model</param>
            <param name="initialisation">The Madingley Model initialisation</param>
            <param name="month">The current month in the model run</param>
            <param name="MarineCell">Whether the current cell is a marine cell</param>
        </member>
        <member name="M:Madingley.OutputCell.CalculateHighLevelOutputs(Madingley.ModelGrid,System.Collections.Generic.List{System.UInt32[]},System.Int32,System.Boolean)">
            <summary>
            Calculate outputs associated with high-level outputs
            </summary>
            <param name="ecosystemModelGrid">The model grid</param>
            <param name="cellIndices">List of indices of active cells in the model grid</param>
            <param name="cellIndex">The number of the current cell in the list of active cells</param>
            <param name="marineCell">Whether the current cell is a marine cell</param>
        </member>
        <member name="M:Madingley.OutputCell.InitialOutputs(Madingley.ModelGrid,Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.Collections.Generic.List{System.UInt32[]},System.Int32,System.Collections.Generic.SortedList{System.String,System.Double},System.UInt32,Madingley.MadingleyModelInitialisation,System.UInt32,System.Boolean)">
            <summary>
            Write to the output file values of the output variables before the first time step
            </summary>
            <param name="ecosystemModelGrid">The model grid to get data from</param>C:\madingley-ecosystem-model\Madingley\Output and tracking\PredationTracker.cs
            <param name="cohortFunctionalGroupDefinitions">The definitions of cohort functional groups in the model</param>
            <param name="stockFunctionalGroupDefinitions">The definitions of stock functional groups in the model</param>
            <param name="cellIndices">List of indices of active cells in the model grid</param>
            <param name="cellNumber">The number of the current cell in the list of indices of active cells</param>
            <param name="globalDiagnosticVariables">List of global diagnostic variables</param>
            <param name="numTimeSteps">The number of time steps in the model run</param>
            <param name="initialisation">The Madingley Model initialisation</param>
            <param name="month">The current month in the model run</param>
            <param name="marineCell">Whether the current cell is a marine cell</param>
        </member>
        <member name="M:Madingley.OutputCell.InitialLiveOutputs(Madingley.ModelGrid,System.Boolean)">
            <summary>
            Generates the intial output to the live dataset view
            </summary>
            <param name="ecosystemModelGrid">The model grid</param>
            <param name="marineCell">Whether the current cell is a marine cell</param>
        </member>
        <member name="M:Madingley.OutputCell.InitialFileOutputs(Madingley.ModelGrid,Madingley.FunctionalGroupDefinitions,System.Boolean,System.Collections.Generic.List{System.UInt32[]},System.Int32)">
            <summary>
            Generates the initial file outputs
            </summary>
            <param name="ecosystemModelGrid">The model grid</param>
            <param name="cohortFunctionalGroupDefinitions">The functional group definitions for cohorts in the model</param>
            <param name="MarineCell">Whether the current cell is a marine cell</param>
            <param name="cellIndices">The list of all cells to run the model for</param>
            <param name="cellIndex">The index of the current cell in the list of all cells to run the model for</param>
        </member>
        <member name="M:Madingley.OutputCell.TimeStepOutputs(Madingley.ModelGrid,Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.Collections.Generic.List{System.UInt32[]},System.Int32,System.Collections.Generic.SortedList{System.String,System.Double},Timing.StopWatch,System.UInt32,System.UInt32,Madingley.MadingleyModelInitialisation,System.UInt32,System.Boolean)">
            <summary>
            Write to the output file values of the output variables during the model time steps
            </summary>
            <param name="ecosystemModelGrid">The model grid to get data from</param>
            <param name="cohortFunctionalGroupDefinitions">The definitions of the cohort functional groups in the model</param>
            <param name="stockFunctionalGroupDefinitions">The definitions of the stock  functional groups in the model</param>
            <param name="cellIndices">List of indices of active cells in the model grid</param>
            <param name="cellNumber">The number of the current cell in the list of indices of active cells</param>
            <param name="globalDiagnosticVariables">List of global diagnostic variables</param>
            <param name="timeStepTimer">The timer for the current time step</param>
            <param name="numTimeSteps">The number of time steps in the model run</param>
            <param name="currentTimestep">The current model time step</param>
            <param name="initialisation">The Madingley Model initialisation</param>
            <param name="month">The current month in the model run</param>
            <param name="marineCell">Whether the current cell is a marine cell</param>
        </member>
        <member name="M:Madingley.OutputCell.TimeStepLiveOutputs(System.UInt32,System.UInt32,Madingley.ModelGrid,System.Boolean)">
            <summary>
            Generate the live outputs for the current time step
            </summary>
            <param name="numTimeSteps">The number of time steps in the model run</param>
            <param name="currentTimeStep">The current time step</param>
            <param name="ecosystemModelGrid">The model grid</param>
            <param name="marineCell">Whether the current cell is a marine cell</param>
        </member>
        <member name="M:Madingley.OutputCell.TimeStepConsoleOutputs(System.UInt32,Timing.StopWatch)">
            <summary>
            Generates the console outputs for the current time step
            </summary>
            <param name="currentTimeStep">The current time step</param>
            <param name="timeStepTimer">The timer for the current time step</param>
        </member>
        <member name="M:Madingley.OutputCell.TimeStepFileOutputs(Madingley.ModelGrid,Madingley.FunctionalGroupDefinitions,System.UInt32,System.Boolean,System.Collections.Generic.List{System.UInt32[]},System.Int32)">
            <summary>
            Generate file outputs for the current time step
            </summary>
            <param name="ecosystemModelGrid">The model grid</param>
            <param name="cohortFunctionalGroupDefinitions">The functional group definitions for cohorts in the model</param>
            <param name="currentTimeStep">The current time step</param>
            <param name="MarineCell">Whether the current cell is a marine cell</param>
            <param name="cellIndices">The list of all cells to run the model for</param>
            <param name="cellIndex">The index of the current cell in the list of all cells to run the model for</param>
        </member>
        <member name="M:Madingley.OutputCell.FinalOutputs(Madingley.ModelGrid,Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.Collections.Generic.List{System.UInt32[]},System.Int32,System.Collections.Generic.SortedList{System.String,System.Double},Madingley.MadingleyModelInitialisation,System.UInt32,System.Boolean)">
            <summary>
            Write to the output file values of the output variables at the end of the model run
            </summary>
            <param name="EcosystemModelGrid">The model grid to get data from</param>
            <param name="CohortFunctionalGroupDefinitions">Definitions of the cohort functional groups in the model</param>
            <param name="StockFunctionalGroupDefinitions">Definitions of the stock functional groups in the model</param>
            <param name="cellIndices">List of indices of active cells in the model grid</param>
            <param name="cellNumber">The number of the current cell in the list of indices of active cells</param>
            <param name="GlobalDiagnosticVariables">List of global diagnostic variables</param>
            <param name="initialisation">The Madingley Model initialisation</param>
            <param name="month">The current month in the model run</param>
            <param name="marineCell">Whether the current cell is a marine cell</param>
        </member>
        <member name="M:Madingley.OutputCell.CalculateMassBinOutputs(Madingley.ModelGrid,System.Collections.Generic.List{System.UInt32[]},System.Int32,System.Boolean)">
            <summary>
            Calculates the abundances and biomasses within mass bins for all functional groups in the cohort indices array
            </summary>
            <param name="ecosystemModelGrid">The model grid</param>
            <param name="cellIndices">List of indices of active cells in the model grid</param>
            <param name="cellIndex">The number of the current cell in the list of indices of active cells</param>
            <param name="marineCell">Whether the current cell is a marine cell</param>
        </member>
        <member name="M:Madingley.OutputCell.CalculateAllCombinations(System.String[],System.String[])">
            <summary>
            Returns an array of strings for all unique combinations of the strings where strings from R1 vector appear in the first column.
            </summary>
            <param name="R1"></param>
            <param name="R2"></param>
            <returns>Vector of vector of string combinations</returns>
        </member>
        <member name="M:Madingley.OutputCell.CalculateAllCombinations(System.String[],System.String[],System.String[])">
            <summary>
            Overloaded method that returns an array of strings for all unique combinations of the strings where strings from R1 vector appear in the first column.
            </summary>
            <param name="R1"></param>
            <param name="R2"></param>
            <param name="R3"></param>
            <returns>Vector of vector of string combinations</returns>
        </member>
        <member name="P:Madingley.OutputCell.OutputPath">
            <summary>
            Get the path to the output folder
            </summary>
        </member>
        <member name="P:Madingley.OutputCell.OutputSuffix">
            <summary>
            Get the suffix for ouputs for this grid cell
            </summary>
        </member>
        <member name="T:Madingley.OutputCell.OutputDetailLevel">
            <summary>
            Designates the level of output detail
            </summary>
        </member>
        <member name="F:Madingley.OutputGlobal.ModelOutputDetail">
            <summary>
            An instance of the enumerator to designate output detail level
            </summary>
        </member>
        <member name="F:Madingley.OutputGlobal.BasicOutput">
            <summary>
            A dataset to store the basic outputs to file
            </summary>
        </member>
        <member name="F:Madingley.OutputGlobal.TimeSteps">
            <summary>
            The time steps in this model simulation
            </summary>
        </member>
        <member name="F:Madingley.OutputGlobal._OutputPath">
            <summary>
            The path to the output folder
            </summary>
        </member>
        <member name="F:Madingley.OutputGlobal._OutputSuffix">
            <summary>
            The suffix to apply to all outputs from this grid cell
            </summary>
        </member>
        <member name="F:Madingley.OutputGlobal.TotalAbundance">
            <summary>
            The total abundance across all cohorts in the grid cell
            </summary>
        </member>
        <member name="F:Madingley.OutputGlobal.TotalLivingBiomass">
            <summary>
            The total living biomass of all cohorts and stock in the grid cell
            </summary>
        </member>
        <member name="F:Madingley.OutputGlobal.TotalBiomass">
            <summary>
            The total biomass, living and non-living in the grid cell
            </summary>
        </member>
        <member name="F:Madingley.OutputGlobal.OrganicPoolOut">
            <summary>
            The total biomass in the organic pool
            </summary>
        </member>
        <member name="F:Madingley.OutputGlobal.RespiratoryPoolOut">
            <summary>
            The total biomass in the respiratory pool
            </summary>
        </member>
        <member name="F:Madingley.OutputGlobal.TotalNumberOfCohorts">
            <summary>
            Total number of cohorts in the grid cell
            </summary>
        </member>
        <member name="F:Madingley.OutputGlobal.TotalNumberOfStocks">
            <summary>
            Total number of stocks in the grid cell
            </summary>
        </member>
        <member name="F:Madingley.OutputGlobal.NumberOfCohortsExtinct">
            <summary>
            Number of cohorts that became extinct in a time step
            </summary>
        </member>
        <member name="F:Madingley.OutputGlobal.NumberOfCohortsProduced">
            <summary>
            Number of cohorts produced in a time step
            </summary>
        </member>
        <member name="F:Madingley.OutputGlobal.NumberOfCohortsCombined">
            <summary>
            Number of cohorts merged in a time step
            </summary>
        </member>
        <member name="F:Madingley.OutputGlobal.DataConverter">
            <summary>
            An instance of the class to convert data between arrays and SDS objects
            </summary>
        </member>
        <member name="F:Madingley.OutputGlobal.SDSCreator">
            <summary>
            Instance of the class to create SDS objects
            </summary>
        </member>
        <member name="M:Madingley.OutputGlobal.#ctor(System.String,Madingley.MadingleyModelInitialisation)">
            <summary>
            Constructor for the global output class
            </summary>
            <param name="outputDetail">The level of detail to be used in model outputs</param>
            <param name="modelInitialisation">Model intialisation object</param>
        </member>
        <member name="M:Madingley.OutputGlobal.SetupOutputs(System.UInt32,Madingley.ModelGrid,System.String)">
            <summary>
            Set up all outputs (live, console and file) prior to the model run
            </summary>
            <param name="numTimeSteps">The number of time steps in the model run</param>
            <param name="ecosystemModelGrid">The model grid</param>
            <param name="outputFilesSuffix">The suffix to be applied to all output files</param>
        </member>
        <member name="M:Madingley.OutputGlobal.CalculateOutputs(Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,Madingley.ModelGrid,System.Collections.Generic.List{System.UInt32[]},System.Collections.Generic.SortedList{System.String,System.Double},Madingley.MadingleyModelInitialisation)">
            <summary>
            Calculates the variables to output
            </summary>
            <param name="cohortFunctionalGroupDefinitions">The functional group definitions of cohorts in the model</param>
            <param name="stockFunctionalGroupDefinitions">The functional group definitions of stocks in the model</param>
            <param name="ecosystemModelGrid">The model grid</param>
            <param name="cellIndices">The list of indices of active cells in the model grid</param>
            <param name="globalDiagnosticVariables">Global diagnostic variables</param>
            <param name="initialisation">The Madingley Model initialisation</param>
        </member>
        <member name="M:Madingley.OutputGlobal.InitialOutputs(Madingley.ModelGrid,Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.Collections.Generic.List{System.UInt32[]},System.Collections.Generic.SortedList{System.String,System.Double},Madingley.MadingleyModelInitialisation)">
            <summary>
            Generates the initial model outputs before the first time step
            </summary>
            <param name="ecosystemModelGrid">The model grid</param>
            <param name="cohortFunctionalGroupDefinitions">The functional group definitions of cohorts in the model</param>
            <param name="stockFunctionalGroupDefinitions">The functional group definitions of stocks in the model</param>
            <param name="cellIndices">The list of indices of active cells in the model grid</param>
            <param name="globalDiagnosticVariables">A list of global diagnostic variables</param>
            <param name="initialisation">The Madingley Model initialisation</param>
        </member>
        <member name="M:Madingley.OutputGlobal.InitialConsoleOutputs">
            <summary>
            Generates the initial console outputs
            </summary>
        </member>
        <member name="M:Madingley.OutputGlobal.InitialFileOutptus(Madingley.ModelGrid)">
            <summary>
            Generates the initial file outputs
            </summary>
            <param name="ecosystemModelGrid">The model grid</param>
        </member>
        <member name="M:Madingley.OutputGlobal.TimeStepOutputs(Madingley.ModelGrid,System.UInt32,System.UInt32,Timing.StopWatch,Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.Collections.Generic.List{System.UInt32[]},System.Collections.Generic.SortedList{System.String,System.Double},Madingley.MadingleyModelInitialisation)">
            <summary>
            Generates the outputs for the current time step
            </summary>
            <param name="ecosystemModelGrid">The model grid</param>
            <param name="currentTimeStep">The current model time step</param>
            <param name="currentMonth">The current month in the model run</param>
            <param name="timeStepTimer">The timer for the current time step</param>
            <param name="cohortFunctionalGroupDefinitions">The functional group definitions of cohorts in the model</param>
            <param name="stockFunctionalGroupDefinitions">The functional group definitions of stocks in the model</param>
            <param name="cellIndices">List of indices of active cells in the model grid</param>
            <param name="globalDiagnosticVariables">The global diagnostic variables for the model run</param>
            <param name="initialisation">The Madingley Model initialisation</param>
        </member>
        <member name="M:Madingley.OutputGlobal.TimeStepConsoleOutputs(System.UInt32,System.UInt32,Timing.StopWatch)">
            <summary>
            Generates the console outputs for the current time step
            </summary>
            <param name="currentTimeStep">The current model time step</param>
            <param name="currentMonth">The current month in the model run</param>
            <param name="timeStepTimer">The timer for the current time step</param>
        </member>
        <member name="M:Madingley.OutputGlobal.TimeStepFileOutputs(Madingley.ModelGrid,System.UInt32)">
            <summary>
            Generates the file outputs for the current time step
            </summary>
            <param name="ecosystemModelGrid">The model grid</param>
            <param name="currentTimeStep">The current model time step</param>
        </member>
        <member name="M:Madingley.OutputGlobal.FinalOutputs">
            <summary>
             Write to the output file values of the output variables at the end of the model run
            </summary>
        </member>
        <member name="P:Madingley.OutputGlobal.OutputPath">
            <summary>
            Get the path to the output folder
            </summary>
        </member>
        <member name="P:Madingley.OutputGlobal.OutputSuffix">
            <summary>
            Get the suffix for ouputs for this grid cell
            </summary>
        </member>
        <member name="T:Madingley.OutputGlobal.OutputDetailLevel">
            <summary>
            Designates the level of output detail
            </summary>
        </member>
        <member name="F:Madingley.OutputGrid.ModelOutputDetail">
            <summary>
            An instance of the enumerator to designate output detail level
            </summary>
        </member>
        <member name="F:Madingley.OutputGrid.DataSetToViewLive">
            <summary>
            A dataset to store the live screen view
            </summary>
        </member>
        <member name="F:Madingley.OutputGrid._OutputPath">
            <summary>
            The path to the output folder
            </summary>
        </member>
        <member name="F:Madingley.OutputGrid.GridOutput">
            <summary>
            Dataset object to handle grid-based outputs
            </summary>
        </member>
        <member name="F:Madingley.OutputGrid.CohortTraits">
            <summary>
            The cohort traits to be considered in the outputs
            </summary>
        </member>
        <member name="F:Madingley.OutputGrid.CohortTraitValues">
            <summary>
            All unique values of the traits to be considered in outputs
            </summary>
        </member>
        <member name="F:Madingley.OutputGrid.StockTraits">
            <summary>
            The stock traits to be considered in the outputs
            </summary>
        </member>
        <member name="F:Madingley.OutputGrid.StockTraitValues">
            <summary>
            All unique values of the traits to be considered in the outputs
            </summary>
        </member>
        <member name="F:Madingley.OutputGrid.CohortTraitIndices">
            <summary>
            Holds a list of the functional group indices correpsonding to each unique cohort trait
            </summary>
        </member>
        <member name="F:Madingley.OutputGrid.StockTraitIndices">
            <summary>
            Holds a list of the functional group indices corresponding to each unique stock trait
            </summary>
        </member>
        <member name="F:Madingley.OutputGrid.LogBiomassDensityGridCohorts">
            <summary>
            Grid of (log) total biomass densities of cohorts in individual grid cells
            </summary>
        </member>
        <member name="F:Madingley.OutputGrid.LogBiomassDensityGridStocks">
            <summary>
            Grid of (log) total biomass densities of stocks in individual grid cells
            </summary>
        </member>
        <member name="F:Madingley.OutputGrid.LogBiomassDensityGrid">
            <summary>
            Grid of (log) total biomass densities of both stocks and cohorts in individual grid cells
            </summary>
        </member>
        <member name="F:Madingley.OutputGrid.LogAbundanceDensityGridCohorts">
            <summary>
            Grod of (log) abundance densities of cohorts in individual grid cells
            </summary>
        </member>
        <member name="F:Madingley.OutputGrid.BiomassDensityGrid">
            <summary>
            Grids of total biomass densities in individual grid cells, arranged by trait value
            </summary>
        </member>
        <member name="F:Madingley.OutputGrid.AbundanceDensityGrid">
            <summary>
            Grids of total densities in individual grid cells, arranged by trait value
            </summary>
        </member>
        <member name="F:Madingley.OutputGrid.MetricsGrid">
            <summary>
            Grids of ecosystem metric values in individual grid cells, arranged by metric name
            </summary>
        </member>
        <member name="F:Madingley.OutputGrid.TimeSteps">
            <summary>
            The time steps in this model simulation
            </summary>
        </member>
        <member name="F:Madingley.OutputGrid.DataConverter">
            <summary>
            An instance of the class to convert data between arrays and SDS objects
            </summary>
        </member>
        <member name="F:Madingley.OutputGrid.SDSCreator">
            <summary>
            Instance of the class to create SDS objects
            </summary>
        </member>
        <member name="F:Madingley.OutputGrid.GridViewer">
            <summary>
            An instance of the class for viewing grid results
            </summary>
        </member>
        <member name="F:Madingley.OutputGrid.LiveOutputs">
            <summary>
            Whether to display live outputs during this model run
            </summary>
        </member>
        <member name="F:Madingley.OutputGrid.OutputMetrics">
            <summary>
            Indicates whether to output metric information
            </summary>
        </member>
        <member name="F:Madingley.OutputGrid.Metrics">
            <summary>
            Instance of the class to calculate ecosystem metrics
            </summary>
        </member>
        <member name="M:Madingley.OutputGrid.SpawnDatasetViewer">
            <summary>
            Spawn dataset viewer for the live outputs
            </summary>
        </member>
        <member name="M:Madingley.OutputGrid.InitialiseTraitBasedOutputs(Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions)">
            <summary>
            Set up the necessary architecture for generating outputs arranged by trait value
            </summary>
            <param name="cohortFunctionalGroupDefinitions">Functional group definitions for cohorts in the model</param>
            <param name="stockFunctionalGroupDefinitions">Functional group definitions for stocks in the model</param>
        </member>
        <member name="P:Madingley.OutputGrid.OutputPath">
            <summary>
            Get the path to the output folder
            </summary>
        </member>
        <member name="T:Madingley.OutputGrid.OutputDetailLevel">
            <summary>
            Designates the level of output detail
            </summary>
        </member>
        <member name="F:Madingley.OutputModelState._OutputPath">
            <summary>
            The path to the output folder
            </summary>
        </member>
        <member name="F:Madingley.OutputModelState.StateOutput">
            <summary>
            Dataset object to handle grid-based outputs
            </summary>
        </member>
        <member name="F:Madingley.OutputModelState.DataConverter">
            <summary>
            An instance of the class to convert data between arrays and SDS objects
            </summary>
        </member>
        <member name="F:Madingley.OutputModelState.SDSCreator">
            <summary>
            Instance of the class to create SDS objects
            </summary>
        </member>
        <member name="F:Madingley.OutputModelState.StateWriter">
            <summary>
            A streamwriter instance for outputting data on interactions between cohorts
            </summary>
        </member>
        <member name="F:Madingley.OutputModelState.SyncStateWriter">
            <summary>
            A synchronized version of the streamwriter for outuputting data on the interactions between cohorts
            </summary>
        </member>
        <member name="P:Madingley.OutputModelState.OutputPath">
            <summary>
            Get the path to the output folder
            </summary>
        </member>
        <member name="T:Madingley.PredationTracker">
            <summary>
            Tracks the predation ecological process
            </summary>
        </member>
        <member name="F:Madingley.PredationTracker._MassFlows">
            <summary>
            The flow of mass between prey and predator
            </summary>
        </member>
        <member name="F:Madingley.PredationTracker._MassBins">
            <summary>
            Vector of mass bins to be used in the predation tracker
            </summary>
        </member>
        <member name="F:Madingley.PredationTracker._NumMassBins">
            <summary>
            The number of mass bins to track predation for
            </summary>
        </member>
        <member name="F:Madingley.PredationTracker._MissingValue">
            <summary>
            Missing data value to be used in the mass flows output
            </summary>
        </member>
        <member name="F:Madingley.PredationTracker.MassFlowsDataSet">
            <summary>
            Dataset to output the Massflows data
            </summary>
        </member>
        <member name="F:Madingley.PredationTracker.DataConverter">
            <summary>
            An instance of the class to convert data between arrays and SDS objects
            </summary>
        </member>
        <member name="F:Madingley.PredationTracker.SDSCreator">
            <summary>
            Instance of the class to create SDS objects
            </summary>
        </member>
        <member name="M:Madingley.PredationTracker.#ctor(System.UInt32,System.Collections.Generic.List{System.UInt32[]},System.String,Madingley.FunctionalGroupDefinitions,System.Double,System.String,System.String,Madingley.MassBinsHandler,System.Int32)">
            <summary>
            Set up the predation tracker
            </summary>_
            <param name="numTimeSteps">The total number of timesteps for this simulation</param>
            <param name="cellIndices">List of indices of active cells in the model grid</param>
            <param name="massFlowsFilename">Filename for outputs of the flows of mass between predators and prey</param>
            <param name="cohortDefinitions">The functional group definitions for cohorts in the model</param>
            <param name="missingValue">The missing value to be used in the output file</param>
            <param name="outputFileSuffix">The suffix to be applied to the output file</param>
            <param name="outputPath">The path to write the output file to</param>
            <param name="trackerMassBins">The mass bin handler containing the mass bins to be used for predation tracking</param>
            <param name="cellIndex">The index of the current cell in the list of all cells to run the model for</param>
        </member>
        <member name="M:Madingley.PredationTracker.RecordFlow(System.UInt32,System.Double,System.Double,System.Double)">
            <summary>
            Record mass flow in an eating event
            </summary>
            <param name="timestep">The current model time step</param>
            <param name="preyBiomass">The individual body mass of the prey</param>
            <param name="predatorBiomass">The individual body mass of the predator</param>
            <param name="massFlow">The amount of mass consumed in the predation event</param>
        </member>
        <member name="M:Madingley.PredationTracker.AddTimestepFlows(System.Int32)">
            <summary>
            Add the mass flows from the current timestep to the dataset
            </summary>
            <param name="timeStep">the current timestep</param>
        </member>
        <member name="M:Madingley.PredationTracker.ResetPredationTracker">
            <summary>
            Resets the mass flows data array
            </summary>
        </member>
        <member name="M:Madingley.PredationTracker.CloseStreams">
            <summary>
            Close the predation tracker
            </summary>
        </member>
        <member name="P:Madingley.PredationTracker.MassFlows">
            <summary>
            Get and set the flow of mass between prey and predator
            </summary>
        </member>
        <member name="P:Madingley.PredationTracker.MissingValue">
            <summary>
            Get and set the missing data value to be used in the mass flows output
            </summary>
        </member>
        <member name="T:Madingley.ProcessTracker">
            <summary>
            Tracks diagnostics about the ecological processes
            </summary>
        </member>
        <member name="F:Madingley.ProcessTracker._TrackProcesses">
            <summary>
            Whether to track processes
            </summary>
        </member>
        <member name="F:Madingley.ProcessTracker._TrackReproduction">
            <summary>
            Instance of the reproduction tracker within the process tracker
            </summary>
        </member>
        <member name="F:Madingley.ProcessTracker._TrackPredation">
            <summary>
            Instance of predation tracker
            </summary>
        </member>
        <member name="F:Madingley.ProcessTracker._TrackEating">
            <summary>
            Instance of the eating tracker
            </summary>
        </member>
        <member name="F:Madingley.ProcessTracker._TrackGrowth">
            <summary>
            Instance of the growth tracker
            </summary>
        </member>
        <member name="F:Madingley.ProcessTracker._TrackMortality">
            <summary>
            Instance of the mortality tracker
            </summary>
        </member>
        <member name="F:Madingley.ProcessTracker._TrackExtinction">
            <summary>
            An instance of the extinction tracker
            </summary>
        </member>
        <member name="F:Madingley.ProcessTracker._TrackMetabolism">
            <summary>
            An instance of the metabolism tracker
            </summary>
        </member>
        <member name="M:Madingley.ProcessTracker.#ctor(System.UInt32,System.Single[],System.Single[],System.Collections.Generic.List{System.UInt32[]},System.Collections.Generic.SortedList{System.String,System.String},System.Boolean,Madingley.FunctionalGroupDefinitions,System.Double,System.String,System.String,Madingley.MassBinsHandler,System.Boolean,System.Int32,Madingley.MadingleyModelInitialisation,System.Boolean,System.Single,System.Single)">
            <summary>
            Constructor for process tracker: Initialises the trackers for individual processes
            </summary>
            <param name="numTimesteps">The number of time steps in the model</param>
            <param name="lats">The latitudes of active grid cells in the model</param>
            <param name="lons">The longitudes of active grid cells in the model</param>
            <param name="cellIndices">List of indices of active cells in the model grid</param>
            <param name="Filenames">The filenames of the output files to write the tracking results to</param>
            <param name="trackProcesses">Whether to track processes</param>
            <param name="cohortDefinitions">The definitions for cohort functional groups in the model</param>
            <param name="missingValue">The missing value to use in process tracking output files</param>
            <param name="outputFileSuffix">The suffix to be applied to output files from process tracking</param>
            <param name="outputPath">The path to the folder to be used for process tracking outputs</param>
            <param name="trackerMassBins">The mass bins to use for categorising output data in the process trackers</param>
            <param name="specificLocations">Whether the model is being run for specific locations</param>
            <param name="cellIndex">The index of the current cell in the list of all cells to run the model for</param>
            <param name="initialisation">The Madingley Model initialisation</param>
            <param name="marineCell">Whether the current cell is a marine cell</param>
            <param name="latCellSize">The size of grid cells in the latitudinal direction</param>
            <param name="lonCellSize">The size of grid cells in the longitudinal direction</param>
        </member>
        <member name="M:Madingley.ProcessTracker.RecordNewCohort(System.UInt32,System.UInt32,System.UInt32,System.Double,System.Double,System.Int32,System.Collections.Generic.List{System.UInt32},System.UInt32)">
            <summary>
            Record a new cohort in the reproduction tracker
            </summary>
            <param name="latIndex">The latitudinal index of the current grid cell</param>
            <param name="lonIndex">The longitudinal index of the current grid cell</param>
            <param name="timestep">The current model time step</param>
            <param name="offspringCohortAbundance">The number of individuals in the new cohort</param>
            <param name="parentCohortAdultMass">The adult body mass of the parent cohort</param>
            <param name="functionalGroup">The functional group that the parent and offspring cohorts belong to</param>
            <param name="parentCohortIDs">All cohort IDs associated with the acting parent cohort</param>
            <param name="offspringCohortID">The cohort ID that has been assigned to the produced offspring cohort</param>
        </member>
        <member name="M:Madingley.ProcessTracker.TrackMaturity(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Double,System.Double,System.Int32)">
            <summary>
            Track the maturity of a cohort in the reproduction tracker
            </summary>
            <param name="latIndex">The latitudinal index of the current grid cell</param>
            <param name="lonIndex">The longitudinal index of the current grid cell</param>
            <param name="timestep">The current model time step</param>
            <param name="birthTimestep">The birth time step of the cohort reaching maturity</param>
            <param name="juvenileMass">The juvenile mass of the cohort reaching maturity</param>
            <param name="adultMass">The adult mass of the cohort reaching maturity</param>
            <param name="functionalGroup">The functional group of the cohort reaching maturity</param>
        </member>
        <member name="M:Madingley.ProcessTracker.TrackPredationTrophicFlow(System.UInt32,System.UInt32,System.Int32,System.Int32,Madingley.FunctionalGroupDefinitions,System.Double,System.Double,System.Double,Madingley.MadingleyModelInitialisation,System.Boolean)">
            <summary>
            Track the flow of mass between trophic levels during a predation event
            </summary>
            <param name="latIndex">The latitudinal index of the current grid cell</param>
            <param name="lonIndex">The longitudinal index of the current grid cell</param>
            <param name="fromFunctionalGroup">The index of the functional group being eaten</param>
            <param name="toFunctionalGroup">The index of the functional group that the predator belongs to</param>
            <param name="cohortFunctionalGroupDefinitions">The functional group definitions of cohorts in the model</param>
            <param name="massEaten">The mass eaten during the predation event</param>
            <param name="predatorBodyMass">The body mass of the predator doing the eating</param>
            <param name="preyBodyMass">The body mass of the prey doing the eating</param>
            <param name="initialisation">The Madingley Model initialisation</param>
            <param name="marineCell">Whether the current cell is a marine cell</param>
        </member>
        <member name="M:Madingley.ProcessTracker.TrackHerbivoryTrophicFlow(System.UInt32,System.UInt32,System.Int32,Madingley.FunctionalGroupDefinitions,System.Double,System.Double,Madingley.MadingleyModelInitialisation,System.Boolean)">
            <summary>
            Track the flow of mass between trophic levels during a herbivory event
            </summary>
            <param name="latIndex">The latitudinal index of the current grid cell</param>
            <param name="lonIndex">The longitudinal index of the current grid cell</param>
            <param name="toFunctionalGroup">The index of the functional group that the predator belongs to</param>
            <param name="cohortFunctionalGroupDefinitions">The functional group definitions of cohorts in the model</param>
            <param name="massEaten">The mass eaten during the herbivory event</param>
            <param name="predatorBodyMass">The body mass of the predator doing the eating</param>
            <param name="initialisation">The Madingley Model initialisation</param>
            <param name="marineCell">Whether the current cell is a marine cell</param>
        </member>
        <member name="M:Madingley.ProcessTracker.TrackPrimaryProductionTrophicFlow(System.UInt32,System.UInt32,System.Double)">
            <summary>
            Track the flow of mass between trophic levels during primary production of autotrophs
            </summary>
            <param name="latIndex">The latitudinal index of the current grid cell</param>
            <param name="lonIndex">The longitudinal index of the current grid cell</param>
            <param name="massEaten">The mass gained through primary production</param>
        </member>
        <member name="M:Madingley.ProcessTracker.WriteTimeStepTrophicFlows(System.UInt32,System.UInt32,System.UInt32,Madingley.MadingleyModelInitialisation,System.Boolean)">
            <summary>
            Write trophic flow data from the current time step to file 
            </summary>
            <param name="currentTimeStep">The current model time step</param>
            <param name="numLats">The number of grid cells, latitudinally, in the simulation</param>
            <param name="numLons">The number of grid cells, longitudinally, in the simulation</param>
            <param name="initialisation">The Madingley Model initialisation</param>
            <param name="marineCell">Whether the current cell is a marine cell</param>
        </member>
        <member name="M:Madingley.ProcessTracker.TrackTimestepGrowth(System.UInt32,System.UInt32,System.UInt32,System.Double,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Track growth of individuals in a cohort using the growth tracker
            </summary>
            <param name="latIndex">The latitudinal index of the current grid cell</param>
            <param name="lonIndex">The longitudinal index of the current grid cell</param>
            <param name="timeStep">The current model time step</param>
            <param name="currentBodyMass">The current body mass of individuals in the cohort</param>
            <param name="functionalGroup">The funcitonal group of the cohort being tracked</param>
            <param name="netGrowth">The net growth of individuals in the cohort this time step</param>
            <param name="metabolism">The mass lost to indivduals in the cohort through metabolism</param>
            <param name="predation">The mass gained by individuals in the cohort through predation</param>
            <param name="herbivory">The mass gained by individuals in the cohort through herbivory</param>
        </member>
        <member name="M:Madingley.ProcessTracker.RecordPredationMassFlow(System.UInt32,System.Double,System.Double,System.Double)">
            <summary>
            Records the flow of mass between a prey and its predator during a predation event
            </summary>
            <param name="currentTimeStep">The current model time step</param>
            <param name="preyBodyMass">The individual body mass of the prey</param>
            <param name="predatorBodyMass">The individual body mass of the predator</param>
            <param name="massFlow">The flow of mass between predator and prey</param>
        </member>
        <member name="M:Madingley.ProcessTracker.EndTimeStepPredationTracking(System.UInt32)">
            <summary>
            Adds the mass flows from predation in the current time step to the output file and then resets the mass flow tracker
            </summary>
            <param name="currentTimeStep">The current model time step</param>
        </member>
        <member name="M:Madingley.ProcessTracker.RecordHerbivoryMassFlow(System.UInt32,System.Double,System.Double)">
            <summary>
            Records the flow of mass between primary producers and herbivores during a herbivory event
            </summary>
            <param name="currentTimeStep">The current model time step</param>
            <param name="herbivoreBodyMass">The individual body mass of the herbivore</param>
            <param name="massFlow">The flow of mass between the primary producer and the herbivore</param>
        </member>
        <member name="M:Madingley.ProcessTracker.EndTimeStepHerbvioryTracking(System.UInt32)">
            <summary>
            Adds the mass flows from herbivory in the current time step to the output file and then resets the mass flow tracker
            </summary>
            <param name="currentTimeStep"></param>
        </member>
        <member name="M:Madingley.ProcessTracker.RecordMortality(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Double,System.Double,System.UInt32,System.UInt32,System.Double,System.String)">
            <summary>
            Record an instance of mortality in the output file
            </summary>
            <param name="latIndex">The latitudinal index of the current grid cell</param>
            <param name="lonIndex">The longitudinal index of the current grid cell</param>
            <param name="birthTimeStep">The time step in which this cohort was born</param>
            <param name="timeStep">The current model time step</param>
            <param name="currentMass">The current body mass of individuals in the cohort</param>
            <param name="adultMass">The adult mass of individuals in the cohort</param>
            <param name="functionalGroup">The functional group of the cohort suffering mortality</param>
            <param name="cohortID">The ID of the cohort suffering mortality</param>
            <param name="numberDied">The number of individuals dying in this mortality event</param>
            <param name="mortalitySource">The type of mortality causing the individuals to die</param>
        </member>
        <member name="M:Madingley.ProcessTracker.OutputMortalityProfile(System.UInt32)">
            <summary>
            Output the mortality profile of a cohort becoming extinct
            </summary>
            <param name="cohortID">The ID of the cohort becoming extinct</param>
        </member>
        <member name="M:Madingley.ProcessTracker.RecordExtinction(System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Collections.Generic.List{System.UInt32})">
            <summary>
            Record the extinction of a cohort
            </summary>
            <param name="latIndex">The latitudinal index of the current grid cell</param>
            <param name="lonIndex">The longitudinal index of the current grid cell</param>
            <param name="currentTimeStep">THe current time step</param>
            <param name="merged">Whether the cohort becoming extinct has ever been merged</param>
            <param name="cohortIDs">The IDs of all cohorts that have contributed individuals to the cohort going extinct</param>
        </member>
        <member name="M:Madingley.ProcessTracker.TrackTimestepMetabolism(System.UInt32,System.UInt32,System.UInt32,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Tracks the mass lost by individuals in a cohort in a time step through metabolism
            </summary>
            <param name="latIndex">The latitudinal index of the current grid cell</param>
            <param name="lonIndex">The longitudinal index of the current grid cell</param>
            <param name="timeStep">The current model time step</param>
            <param name="currentBodyMass">The body mass of individuals in the acting cohort</param>
            <param name="functionalGroup">The functional group index of the acting cohort</param>
            <param name="temperature">The ambient temperature in the grid cell</param>
            <param name="metabolicLoss">The mass lost by individuals through metabolism</param>
        </member>
        <member name="M:Madingley.ProcessTracker.CloseStreams(System.Boolean)">
            <summary>
            Close all tracker streams
            </summary>
        </member>
        <member name="P:Madingley.ProcessTracker.TrackProcesses">
            <summary>
            Get or set whether to track processes
            </summary>
        </member>
        <member name="P:Madingley.ProcessTracker.TrackReproduction">
            <summary>
            Get and set the reproduction tracker
            </summary>
        </member>
        <member name="P:Madingley.ProcessTracker.TrackPredation">
            <summary>
            Get and set the predation tracker
            </summary>
        </member>
        <member name="P:Madingley.ProcessTracker.TrackEating">
            <summary>
            Get and set the eating tracker
            </summary>
        </member>
        <member name="P:Madingley.ProcessTracker.TrackGrowth">
            <summary>
            Get and set the growth tracker
            </summary>
        </member>
        <member name="P:Madingley.ProcessTracker.TrackMortality">
            <summary>
            Get and set the mortality tracker
            </summary>
        </member>
        <member name="P:Madingley.ProcessTracker.TrackExtinction">
            <summary>
            Get and set the instance of the extinction tracker
            </summary>
        </member>
        <member name="P:Madingley.ProcessTracker.TrackMetabolism">
            <summary>
            Get and set the instance of the metabolism tracker
            </summary>
        </member>
        <member name="T:Madingley.ReproductionTracker">
            <summary>
            Tracks results associated with the reproduction process
            </summary>
        </member>
        <member name="F:Madingley.ReproductionTracker.NewCohortsFilename">
            <summary>
            File to write data on newly produced cohorts to
            </summary>
        </member>
        <member name="F:Madingley.ReproductionTracker.MaturityFilename">
            <summary>
            File to write data on maturity of cohorts to
            </summary>
        </member>
        <member name="F:Madingley.ReproductionTracker.NewCohortWriter">
            <summary>
            A streamwriter instance for outputting data on newly produced cohorts
            </summary>
        </member>
        <member name="F:Madingley.ReproductionTracker.SyncNewCohortWriter">
            <summary>
            Synchronized version of the streamwriter for outputting data on newly produced cohorts
            </summary>
        </member>
        <member name="F:Madingley.ReproductionTracker.MaturityWriter">
            <summary>
            A streamwriter instance for outputting data on maturity of cohorts
            </summary>
        </member>
        <member name="F:Madingley.ReproductionTracker.SyncMaturityWriter">
            <summary>
            A synchronized version of the streamwriter for outuputting data on the maturity of cohorts
            </summary>
        </member>
        <member name="M:Madingley.ReproductionTracker.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Collections.Generic.List{System.UInt32[]},System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Sets up properties of the reproduction tracker
            </summary>
            <param name="numTimeSteps">The total number of timesteps for this simulation</param>
            <param name="numLats">The number of latitudes in the model grid</param>
            <param name="numLons">The number of longitudes in the model grid</param>
            <param name="cellIndices">List of indices of active cells in the model grid</param>
            <param name="newCohortsFilename">The filename to write information about new cohorts to</param>
            <param name="maturityFilename">The filename to write information about cohorts reaching maturity</param>
            <param name="outputFileSuffix">The suffix to apply to all output files from this model run</param>
            <param name="outputPath">The path to write all output files to</param>
            <param name="cellIndex">The index of the current cell in the list of all cells to run the model for</param>
        </member>
        <member name="M:Madingley.ReproductionTracker.RecordNewCohort(System.UInt32,System.UInt32,System.UInt32,System.Double,System.Double,System.Int32,System.Collections.Generic.List{System.UInt32},System.UInt32)">
            <summary>
            Records information about new cohorts spawned in the model
            </summary>
            <param name="latIndex">The latitude index of the grid cell in which the cohort was spawned</param>
            <param name="lonIndex">The longitude index of the grid cell in which the cohort was spawned</param>
            <param name="timestep">The model timestep in which the spawning happened</param>
            <param name="offspringCohortAbundance">The abundance of the offspring cohort</param>
            <param name="parentCohortAdultMass">The adult mass of the parent cohort</param>
            <param name="functionalGroup">The functional group of the offspring cohort</param>
            <param name="parentCohortIDs">The cohort IDs associated with the parent cohort</param>
            <param name="offspringCohortID">The cohort ID used for the new offspring cohort</param>
        </member>
        <member name="M:Madingley.ReproductionTracker.TrackMaturity(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Double,System.Double,System.Int32)">
            <summary>
            Record information about cohorts reaching maturity in the model
            </summary>
            <param name="latIndex">The latitude index of the grid cell in which the cohort was spawned</param>
            <param name="lonIndex">The longitude index of the grid cell in which the cohort was spawned</param>
            <param name="timestep">The model timestep in which the spawning happened</param>
            <param name="birthTimestep">The timestep in which the cohort was born</param>
            <param name="juvenileMass">The mass at which the cohort was born</param>
            <param name="adultMass">The maturity mass of the cohort</param>
            <param name="functionalGroup">The functional group of the cohort</param>
        </member>
        <member name="M:Madingley.ReproductionTracker.CloseStreams">
            <summary>
            Close the output streams for the reproduction tracker
            </summary>
        </member>
        <member name="T:Madingley.RunSimulations">
            <summary>
            Runs simulations of the Madingley model
            </summary>
        </member>
        <member name="M:Madingley.RunSimulations.RunAllSimulations(System.String,System.String,System.String,Madingley.ScenarioParameterInitialisation,System.String)">
            <summary>
            Runs the specified number of simulations for each of the specified scenarios
            </summary>
            <param name="simulationInitialisationFilename">Filename of the file from which to read initialisation information</param>
            <param name="scenarios">Contains scenario information for this set of simulations</param>
            <param name="outputPath">The path to which outputs should be written</param>
        </member>
        <member name="M:Madingley.RunSimulations.RunSimulation(Madingley.ScenarioParameterInitialisation,System.Int32,Madingley.MadingleyModelInitialisation,System.String,System.Int32)">
            <summary>
            Runs a single simulation of the Madingley model
            </summary>
            <param name="scenarios">Parameter information and simulation number for all scenarios to be run</param>
            <param name="scenarioIndex">The index of the scenario to be run in this simulation</param>
            <param name="initialiseMadingley">Model initialization information for all simulations</param>
            <param name="outputFileSuffix">Suffix to be applied to the names of files written out by this simulation</param>
            <param name="simulation">The index of the simulation being run</param>
        </member>
        <member name="T:Madingley.ScenarioParameterInitialisation">
            <summary>
            Reads the file specifying which scenarios will be run, and stores this information
            </summary>
        </member>
        <member name="F:Madingley.ScenarioParameterInitialisation._scenarioNumber">
            <summary>
            The number of scenarios to be run
            </summary>
        </member>
        <member name="F:Madingley.ScenarioParameterInitialisation._scenarioParameters">
            <summary>
            Parameters for all scenarios in the model run
            </summary>
        </member>
        <member name="M:Madingley.ScenarioParameterInitialisation.#ctor(System.String,System.String)">
            <summary>
            Constructor for ScenarioParameterInitialisation: reads in scenario parameters from a specified file
            </summary>
            <param name="scenarioParameterFile">The name of the scenario parameters file, which must be in the 'Model setup' directory</param>
            <param name="outputPath">The directory to write output files to</param>
        </member>
        <member name="P:Madingley.ScenarioParameterInitialisation.scenarioNumber">
            <summary>
            Get the number of scenarios to be run
            </summary>
        </member>
        <member name="P:Madingley.ScenarioParameterInitialisation.scenarioParameters">
            <summary>
            Get the parameters for all scenarios in the model run
            </summary>
        </member>
        <member name="T:Madingley.Stock">
            <summary>
            Hold individual stocks
            </summary>
        </member>
        <member name="F:Madingley.Stock._FunctionalGroupIndex">
            <summary>
            The index of the functional group that the stock belongs to
            </summary>
        </member>
        <member name="F:Madingley.Stock._IndividualBodyMass">
            <summary>
            The mean body mass of an individual in this stock
            </summary>
        </member>
        <member name="F:Madingley.Stock._TotalBiomass">
            <summary>
            The total biomass of the stock
            </summary>
        </member>
        <member name="M:Madingley.Stock.#ctor(System.Byte,System.Double,System.Double)">
            <summary>
            Constructor for stock class. Assigns stock starting properties
            </summary>
            <param name="functionalGroupIndex">The functional group index of the stock being generated</param>
            <param name="individualMass">The individual mass of the stock</param>
            <param name="initialTotalBiomass">The initial total biomass of the stock</param>
        </member>
        <member name="P:Madingley.Stock.FunctionalGroupIndex">
            <summary>
            Get and set the functional group that the stock belongs to
            </summary>
        </member>
        <member name="P:Madingley.Stock.IndividualBodyMass">
            <summary>
            Get and set the mean body mass of an individual in this stock
            </summary>
        </member>
        <member name="P:Madingley.Stock.TotalBiomass">
            <summary>
            Get and set the total biomass of this stock
            </summary>
        </member>
        <member name="T:Madingley.ClimateVariablesCalculator">
            <summary>
            Calculates derived climate variables for which no input data exist
            </summary>
        </member>
        <member name="M:Madingley.ClimateVariablesCalculator.#ctor">
            <summary>
            Constructor the climate variables calculator
            </summary>
        </member>
        <member name="M:Madingley.ClimateVariablesCalculator.MonthlyActualEvapotranspirationSoilMoisture(System.Double,System.Double[],System.Double[])">
            <summary>
            Calculates monthly water balance variables: actual evapotranspiration, soil water deficit,
            and the an approximation for the length of the fire season.
            Actual Evapotranspiration and soil moisture was calculated by following Prentice et al (1993)
            "A simulation model for the transient effects of climate change on forest landscapes",
            Ecological Modelling, 65, 51-70, but using potential evapotranspiration rates calculated elsewhere
            (normally the Penman Monteith equation).
            The approximate length of the fire season was calculated using equations (2) and (4) of 
            Thonicke et al. (2001). "The role of fire disturbance for global vegetation dynamics: coupling
            fire into a Dynamic Global Vegetation Model". Global Ecology and Biogeography, 10, 661-677.
            </summary>
            <param name="AvailableWaterCapacity">The available water capacity of the soil (mm)</param>
            <param name="Precipitation">Mean monthly precipitation (mm)</param>
            <param name="MonthlyTemperatures">Mean monthly temperatures, degrees celcius</param>
            <returns>A Tuple containing i) monthly actual evapotranspiration (mm), ii) soil water deficit (mm) and, iii) fire season length (between 0 and 360 days) </returns>
        </member>
        <member name="M:Madingley.ClimateVariablesCalculator.CalculatePotentialEvapotranspiration(System.Double)">
            <summary>
            Calculates the monthly potential evapotranspiration according to
            Malmstrom VH (1969) A new approach to the classification of climate. J Geog 68:351–357.
            </summary>
            <param name="Temperature">Mean monthly temperature, degrees Celsius</param>
            <returns>Potential Monthly Evapotranspiration, mm</returns>
        </member>
        <member name="M:Madingley.ClimateVariablesCalculator.GetNDF(System.Double[],System.Double[],System.Double)">
            <summary>
            Estimates the fraction of the year in which the temperature drops below zero at some time in the day
            according to the the CRU CL 2.0 gridded climate dataset (For details of this dataset see CRU2p0Dataset.txt)
            </summary>
            <param name="monthlyFrostDays">A vector containing the number of frost days each month</param>
            <param name="monthlyTemperature">A vector containing average temperatures for each month</param>
            <param name="missingValue">The missing value used in the the environmental datasets</param>
            <returns>The fraction of the year in which temperature drops below zero at some point in the day</returns>
        </member>
        <member name="M:Madingley.ClimateVariablesCalculator.ApproximateNDF(System.Double[])">
            <summary>
            Calculates the number of days frost using an alternative algorithm to that in ClimateLookup
            that is based on mean annual temperature data alone. This will probably be a coarse representation
            of the number of frost days but will do for now.
            </summary>
            <param name="MATData">Mean monthly temperatures, degrees celcius</param>
            <returns>Fraction of the year that experiences frost</returns>
        </member>
        <member name="T:Madingley.MassBinsHandler">
            <summary>
            Handles the mass bins to be used in model outputs
            </summary>
        </member>
        <member name="F:Madingley.MassBinsHandler.NumMassBins">
            <summary>
            The number of mass bins to be used for outputs
            </summary>
        </member>
        <member name="F:Madingley.MassBinsHandler.MassBins">
            <summary>
            A vector containing the masses correpsonding to the mass bins
            </summary>
        </member>
        <member name="M:Madingley.MassBinsHandler.SetUpMassBins(System.String,System.String)">
            <summary>
            Sets up mass bins based on an input file
            </summary>
            <param name="massBinsFile">The filename containing the mass bin information</param>
            <param name="outputPath">The path to the output folder to copy the mass bins definition file to</param>
        </member>
        <member name="M:Madingley.MassBinsHandler.GetSpecifiedMassBins">
            <summary>
            Returns the mass bins copied from file
            </summary>
            <returns>the mass bins copied from file</returns>
        </member>
        <member name="T:Madingley.NonStaticSimpleRNG">
            <summary>
            SimpleRNG is a simple random number generator based on 
            George Marsaglia's MWC (multiply with carry) generator.
            Although it is very simple, it passes Marsaglia's DIEHARD
            series of random number generator tests.
            
            Written by John D. Cook 
            http://www.johndcook.com
            </summary>
        </member>
        <member name="F:Madingley.NonStaticSimpleRNG.m_w">
            <summary>
            Integer for George Marsaglia's MWC algorithm 
            </summary>
        </member>
        <member name="F:Madingley.NonStaticSimpleRNG.m_z">
            <summary>
            Integer for George Marsaglia's MWC algorithm
            </summary>
        </member>
        <member name="M:Madingley.NonStaticSimpleRNG.#ctor">
            <summary>
            Constructor the random number generator: sets default values for the integers for George Marsaglia's MWC algorithm
            </summary>
        </member>
        <member name="M:Madingley.NonStaticSimpleRNG.SetSeed(System.UInt32,System.UInt32)">
            <summary>
            Set the seed of the random number generator using the specified integers
            </summary>
            <param name="u">An integer</param>
            <param name="v">An integer</param>
        </member>
        <member name="M:Madingley.NonStaticSimpleRNG.SetSeed(System.UInt32)">
            <summary>
            Set the seed of the random number generator using the specified integer
            </summary>
            <param name="u">An integer</param>
        </member>
        <member name="M:Madingley.NonStaticSimpleRNG.SetSeedFromSystemTime">
            <summary>
            Set the seed of the random number generator based on the system time
            </summary>
        </member>
        <member name="M:Madingley.NonStaticSimpleRNG.GetUniform">
            <summary>
            A random draw from a uniform distribution between 0 and 1
            </summary>
            <returns>A random draw from a uniform distribution between 0 and 1</returns>
            <remarks>This will not return either 0 or 1</remarks>
        </member>
        <member name="M:Madingley.NonStaticSimpleRNG.GetUint">
            <summary>
            Get a random unsigned integer using uses George Marsaglia's MWC algorithm
            </summary>
            <returns>A random unsigned integer using uses George Marsaglia's MWC algorithm</returns>
            <remarks>See http://www.bobwheeler.com/statistics/Password/MarsagliaPost.txt </remarks>
        </member>
        <member name="M:Madingley.NonStaticSimpleRNG.GetNormal">
            <summary>
            A random draw from a normal distribution with mean 0 and standard deviation 1
            </summary>
            <returns>A random draw from a normal distribution with mean 0 and standard deviation 1</returns>
        </member>
        <member name="M:Madingley.NonStaticSimpleRNG.GetNormal(System.Double,System.Double)">
            <summary>
            A random draw from a normal distribution
            </summary>
            <param name="mean">The mean of the normal distribution</param>
            <param name="standardDeviation">The standard deviation of the normal distribution</param>
            <returns>A random draw from a normal distribution</returns>
        </member>
        <member name="M:Madingley.NonStaticSimpleRNG.GetExponential">
            <summary>
            A random draw from an exponential distribution with mean 1
            </summary>
            <returns>A random draw from an exponential distribution with mean 1</returns>
        </member>
        <member name="M:Madingley.NonStaticSimpleRNG.GetExponential(System.Double)">
            <summary>
            A random draw from the exponential distribution
            </summary>
            <param name="mean">The mean of the exponential distribution</param>
            <returns>A random draw from the exponential distribution</returns>
        </member>
        <member name="M:Madingley.NonStaticSimpleRNG.GetGamma(System.Double,System.Double)">
            <summary>
            A random draw from the gamma distribution
            </summary>
            <param name="shape">The shape parameter of the gamma distribution</param>
            <param name="scale">The scale parameter of the gamma distribution</param>
            <returns>A random draw from the gamma distribution</returns>
        </member>
        <member name="M:Madingley.NonStaticSimpleRNG.GetChiSquare(System.Double)">
            <summary>
            A random draw from the chi-square distribution
            </summary>
            <param name="degreesOfFreedom">The degrees of freedom</param>
            <returns>A random draw from the chi-square distribution</returns>
            <remarks>A chi squared distribution with n degrees of freedom is a gamma distribution with shape n/2 and scale 2</remarks>
        </member>
        <member name="M:Madingley.NonStaticSimpleRNG.GetInverseGamma(System.Double,System.Double)">
            <summary>
            A random draw from the inverse-gamma distribution
            </summary>
            <param name="shape">The shape parameter of the inverse-gamma distribution</param>
            <param name="scale">The scale parameter of the inverse-gamma distribution</param>
            <returns>A random draw from the inverse-gamma distribution</returns>
        </member>
        <member name="M:Madingley.NonStaticSimpleRNG.GetWeibull(System.Double,System.Double)">
            <summary>
            A random draw from the Weibull distribution
            </summary>
            <param name="shape">The shape parameter of the Weibull distribution</param>
            <param name="scale">The scale parameter of the Weibull distribution</param>
            <returns>A random draw from the Weibull distribution</returns>
        </member>
        <member name="M:Madingley.NonStaticSimpleRNG.GetCauchy(System.Double,System.Double)">
            <summary>
            A random draw from the Cauchy distribution
            </summary>
            <param name="median">The median of the Cauchy distribution</param>
            <param name="scale">The scale parameter of the Cauchy distribution</param>
            <returns>A random draw from the Cauchy distribution</returns>
        </member>
        <member name="M:Madingley.NonStaticSimpleRNG.GetLaplace(System.Double,System.Double)">
            <summary>
            A random draw from the Laplace distribution
            </summary>
            <param name="mean">The mean of the Laplace distribution</param>
            <param name="scale">The scale parameter of the Laplace distribution</param>
            <returns>A random draw from the Laplace distribution</returns>
            <remarks>The Laplace distribution is also known as the double exponential distribution</remarks>
        </member>
        <member name="M:Madingley.NonStaticSimpleRNG.GetLogNormal(System.Double,System.Double)">
            <summary>
            A random draw from a lognormal distribution
            </summary>
            <param name="mu">Mean of the lognormal distribution</param>
            <param name="sigma">Standard deviation of the lognormal distribution</param>
            <returns>A random draw from a lognormal distribution</returns>
        </member>
        <member name="M:Madingley.NonStaticSimpleRNG.GetBeta(System.Double,System.Double)">
            <summary>
            A random draw from the beta distribution
            </summary>
            <param name="a">Beta distribution 'a' parameter</param>
            <param name="b">Beta distribution 'b' parameter</param>
            <returns>A random draw from the beta distribution</returns>
        </member>
        <member name="T:Madingley.ModelGrid">
            <summary>
            A class containing the model grid (composed of individual grid cells) along with grid attributes.
            The model grid is referenced by [Lat index, Lon index]\
            <todoD>Check Set and Get state variable methods</todoD>
            </summary>
        </member>
        <member name="F:Madingley.ModelGrid._GridCellRarefaction">
            <summary>
            The rarefaction of grid cells to be applied to active cells in the model grid
            </summary>
        </member>
        <member name="F:Madingley.ModelGrid._NumLatCells">
            <summary>
            The number of latitudinal cells in the model grid
            </summary>
        </member>
        <member name="F:Madingley.ModelGrid._NumLonCells">
            <summary>
            The number of longitudinal cells in the model grid
            </summary>
        </member>
        <member name="F:Madingley.ModelGrid._Lats">
            <summary>
            The bottom (southern-most) latitude of each row of grid cells
            </summary>
        </member>
        <member name="F:Madingley.ModelGrid._Lons">
            <summary>
            The left (western-most) longitude of each column of grid cells
            </summary>
        </member>
        <member name="F:Madingley.ModelGrid.InternalGrid">
            <summary>
            Array of grid cells
            </summary>
        </member>
        <member name="F:Madingley.ModelGrid.DeltaFunctionalGroupDispersalArray">
            <summary>
            An array of lists of the functional group indices of each cohort to disperse. Array corresponds to grid cells. The lists correspond to individual cohorts to disperse.
            </summary>
        </member>
        <member name="F:Madingley.ModelGrid.DeltaCohortNumberDispersalArray">
            <summary>
            An array of lists of the positions within functional groups of each cohort to disperse. Array corresponds 
            to grid cells. The lists correspond to individual cohorts to disperse.
            </summary>
        </member>
        <member name="F:Madingley.ModelGrid.DeltaCellToDisperseToArray">
            <summary>
            An array of lists of paired longitude and latitude indices for the grid cells that each cohort will 
            to. Array corresponds to grid cells. The lists correspond to paired latitude and longitude indices that 
            each cohort will disperse to.
            </summary>
        </member>
        <member name="F:Madingley.ModelGrid.DeltaCellExitDirection">
            <summary>
            An array of lists of exit directions for the grid cells that each cohort will disperse from
            Array corresponds to grid cells. The lists correspond to a numeric value indicating exit direction.
            </summary>
        </member>
        <member name="F:Madingley.ModelGrid.DeltaCellEntryDirection">
            <summary>
            An array of lists of entry directions for the grid cells that each cohort will disperse to
            Array corresponds to grid cells. The lists correspond to a numeric value indicating entry direction.
            </summary>
        </member>
        <member name="F:Madingley.ModelGrid.CellsForDispersal">
            <summary>
            An array of lists of cells that cohorts in a given grid cell can potentially disperse to (i.e. adjacent cells
            in the same realm). Array corresponds to focal grid cells. Lists correspond to cells that cohorts could
            disperse to from these focal cells.
            </summary>
        </member>
        <member name="F:Madingley.ModelGrid.CellsForDispersalDirection">
            <summary>
            Analagous to the array of lists CellsForDispersal, but instead of containing the identities of the cells that are dispersable to,
            instead each array element contains a uint list which is coded to correspond to directions:
            1. N, 2. NE, 3. E, 4. SE, 5. S, 6. SW, 7 W, 8, NW.
            Each item in the list corresponds to the analagous item in CellsForDispersal, and indicates to which direction the cell for dispersal lies. 
            This is used by the advective dispersal class, in order to check whether advective dispersal in a particular direction can actually occur.
            </summary>
        </member>
        <member name="F:Madingley.ModelGrid.CellHeightsKm">
            <summary>
            The heights of grid cells in each latitudinal band
            </summary>
        </member>
        <member name="F:Madingley.ModelGrid.CellWidthsKm">
            <summary>
            The widths of grid cells in each latitudinal band
            </summary>
        </member>
        <member name="F:Madingley.ModelGrid.RandomNumberGenerator">
            <summary>
            An instance of the simple random number generator class
            </summary>
        </member>
        <member name="F:Madingley.ModelGrid.Utilities">
            <summary>
            Instance of the class to perform general functions
            </summary>
        </member>
        <member name="M:Madingley.ModelGrid.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Collections.Generic.SortedList{System.String,Madingley.EnviroData},Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.Collections.Generic.SortedList{System.String,System.Double},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor for model grid: assigns grid properties and initialises the grid cells
            </summary>
            <param name="minLat">Minimum grid latitude (degrees)</param>
            <param name="minLon">Minimum grid longitude (degrees, currently -180 to 180)</param>
            <param name="maxLat">Maximum grid latitude (degrees)</param>
            <param name="maxLon">Maximum grid longitude (degrees, currently -180 to 180)</param>
            <param name="latCellSize">Latitudinal resolution of grid cell</param>
            <param name="lonCellSize">Longitudinal resolution of grid cell</param>
            <param name="cellRarefaction">The rarefaction to be applied to active grid cells in the model</param>
            <param name="enviroStack">Environmental data layers</param>
            <param name="cohortFunctionalGroups">The functional group definitions for cohorts in the model</param>
            <param name="stockFunctionalGroups">The functional group definitions for stocks in the model</param>
            <param name="globalDiagnostics">Global daignostic variables</param>
            <param name="tracking">Whether process-tracking is enabled</param>
            <param name="DrawRandomly">Whether the model is set to use a random draw</param>
            <param name="specificLocations">Whether the model is to be run for specific locations</param>
        </member>
        <member name="M:Madingley.ModelGrid.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Collections.Generic.List{System.UInt32[]},System.Collections.Generic.SortedList{System.String,Madingley.EnviroData},Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.Collections.Generic.SortedList{System.String,System.Double},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Overloaded constructor for model grid to construct the grid for specific locations
            </summary>
            <param name="minLat">Minimum grid latitude (degrees)</param>
            <param name="minLon">Minimum grid longitude (degrees, currently -180 to 180)</param>
            <param name="maxLat">Maximum grid latitude (degrees)</param>
            <param name="maxLon">Maximum grid longitude (degrees, currently -180 to 180)</param>
            <param name="latCellSize">Latitudinal size of grid cells</param>
            <param name="lonCellSize">Longitudinal size of grid cells</param>
            <param name="cellList">List of indices of active cells in the model grid</param>
            <param name="enviroStack">List of environmental data layers</param>
            <param name="cohortFunctionalGroups">The functional group definitions for cohorts in the model</param>
            <param name="stockFunctionalGroups">The functional group definitions for stocks in the model</param>
            <param name="globalDiagnostics">Global diagnostic variables</param>
            <param name="tracking">Whether process tracking is enabled</param>
            <param name="specificLocations">Whether the model is to be run for specific locations</param>
            <param name="runInParallel">Whether model grid cells will be run in parallel</param>
        </member>
        <member name="M:Madingley.ModelGrid.InterpolateMissingValues">
            <summary>
            Estimates missing environmental data for grid cells by interpolation
            </summary>
        </member>
        <member name="M:Madingley.ModelGrid.GetInterpolatedValues(System.UInt32,System.UInt32,System.Double,System.Double,System.String,System.Double)">
            <summary>
            Calculate the weighted average of surrounding grid cell data, where those grid cells are of the specified realm and contain
            non missing data values
            </summary>
            <param name="latIndex">Index of the latitude cell for which the weighted average over surrounding cells is requested</param>
            <param name="lonIndex">Index of the longitude cell for which the weighted average over surrounding cells is requested</param>
            <param name="lat">Latitude of the cell for which the weighted value is requested</param>
            <param name="lon">Longitude of the cell for which the weighted value is requested</param>
            <param name="dataName">Names of the data for which weighted value is requested</param>
            <param name="realm">Realm of the grid cell for which data is to be averaged over</param>
            <returns>The weighted average value of the specified data type across surrounding grid cells of the specified realm</returns>
        </member>
        <member name="M:Madingley.ModelGrid.FillWithInterpolatedValues(System.UInt32,System.UInt32,System.Double,System.Double,System.String,System.Double)">
            <summary>
            Calculate the weighted average of surrounding grid cell data, where those grid cells are of the specified realm and contain
            non missing data values
            </summary>
            <param name="latIndex">Index of the latitude cell for which the weighted average over surrounding cells is requested</param>
            <param name="lonIndex">Index of the longitude cell for which the weighted average over surrounding cells is requested</param>
            <param name="lat">Latitude of the cell for which the weighted value is requested</param>
            <param name="lon">Longitude of the cell for which the weighted value is requested</param>
            <param name="dataName">Names of the data for which weighted value is requested</param>
            <param name="realm">Realm of the grid cell for which data is to be averaged over</param>
            <returns>The weighted average value of the specified data type across surrounding grid cells of the specified realm</returns>
        </member>
        <member name="M:Madingley.ModelGrid.SeedGridCellStocksAndCohorts(System.Collections.Generic.List{System.UInt32[]},Madingley.InputModelState,Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions)">
            <summary>
            Seed the stocks and cohorts from output from a previous simulation
            </summary>
            <param name="cellIndices">A list of the active cells in the model grid</param>
            <param name="cohortFunctionalGroupDefinitions">The functional group definitions for cohorts in the model</param>
            <param name="stockFunctionalGroupDefinitions">The functional group definitions for stocks in the model</param>
            <param name="globalDiagnostics">A list of global diagnostic variables</param>
            <param name="nextCohortID">The ID number to be assigned to the next produced cohort</param>
            <param name="tracking">Whether process-tracking is enabled</param>
            <param name="DrawRandomly">Whether the model is set to use a random draw</param>
            <param name="dispersalOnly">Whether to run dispersal only (i.e. to turn off all other ecological processes</param>
            <param name="processTrackers">An instance of the ecological process tracker</param>
        </member>
        <member name="M:Madingley.ModelGrid.SeedGridCellStocksAndCohorts(System.Collections.Generic.List{System.UInt32[]},Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.Collections.Generic.SortedList{System.String,System.Double},System.Int64@,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Seed the stocks and cohorts for all active cells in the model grid
            </summary>
            <param name="cellIndices">A list of the active cells in the model grid</param>
            <param name="cohortFunctionalGroupDefinitions">The functional group definitions for cohorts in the model</param>
            <param name="stockFunctionalGroupDefinitions">The functional group definitions for stocks in the model</param>
            <param name="globalDiagnostics">A list of global diagnostic variables</param>
            <param name="nextCohortID">The ID number to be assigned to the next produced cohort</param>
            <param name="tracking">Whether process-tracking is enabled</param>
            <param name="DrawRandomly">Whether the model is set to use a random draw</param>
            <param name="dispersalOnly">Whether to run dispersal only (i.e. to turn off all other ecological processes</param>
            <param name="dispersalOnlyType">For dispersal only runs, the type of dispersal to apply</param>
        </member>
        <member name="M:Madingley.ModelGrid.GetGridCellStocks(System.UInt32,System.UInt32)">
            <summary>
            Returns the stocks within the specified grid cell
            </summary>
            <param name="latIndex">Latitude index</param>
            <param name="lonIndex">Longitude index</param>
            <returns>The stock handler for the specified grid cell</returns>
        </member>
        <member name="M:Madingley.ModelGrid.SetGridCellStocks(Madingley.GridCellStockHandler,System.UInt32,System.UInt32)">
            <summary>
            Sets the stocks in the specified grid cell to the passed stocks
            </summary>
            <param name="newGridCellStocks">New stocks for the grid cell</param>
            <param name="latIndex">Latitude index</param>
            <param name="lonIndex">Longitude index</param>
        </member>
        <member name="M:Madingley.ModelGrid.GetGridCellCohorts(System.UInt32,System.UInt32)">
            <summary>
            Returns the array (indexed by functional group) of lists of gridCellCohorts for the specified grid cell
            </summary>
            <param name="latIndex">Latitude index of grid cell</param>
            <param name="lonIndex">Longitude index of grid cell</param>
            <returns>Arry (indexed by functional group) of lists of gridCellCohorts</returns>
        </member>
        <member name="M:Madingley.ModelGrid.GetGridCellIndividualCohort(System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            Extracts an individual cohort from a particular grid cell
            </summary>
            <param name="latIndex">Latitude index of grid cell</param>
            <param name="lonIndex">Longitude index of grid cell</param>
            <param name="functionalGroup">Functional group of cohort</param>
            <param name="positionInList">Index of cohort position in the list</param>
            <returns></returns>
        </member>
        <member name="M:Madingley.ModelGrid.DeleteGridCellIndividualCohort(System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            Remove an individual cohort from a functionall group; necessary due to dispersal moving cohorts from one cell to another
            </summary>
            <param name="latIndex">Grid cell latitude index</param>
            <param name="lonIndex">Grid cell longitude index</param>
            <param name="functionalGroup">Cohort functional group</param>
            <param name="positionInList">Position of cohort in the list of that functional group</param>
        </member>
        <member name="M:Madingley.ModelGrid.DeleteGridCellIndividualCohorts(System.UInt32,System.UInt32,System.Collections.Generic.List{System.UInt32},System.Collections.Generic.List{System.UInt32})">
            <summary>
            Delete a specified list of cohorts from a grid cell
            </summary>
            <param name="latIndex">The latitudinal index of the grid cell to delete cohorts from</param>
            <param name="lonIndex">The longitudinal index of the grid cell to delete cohorts from</param>
            <param name="cohortFGsToDelete">A list of the functional groups that each cohort to delete belongs to</param>
            <param name="cohortNumbersToDelete">A list of the positions with each functional group that each cohort to delete occupies</param>
            <remarks>This is inefficient and needs double-checking for errors</remarks>
        </member>
        <member name="M:Madingley.ModelGrid.SetGridCellCohorts(Madingley.GridCellCohortHandler,System.UInt32,System.UInt32)">
            <summary>
            Replace the gridCellCohorts in a grid cell with a new list of gridCellCohorts
            </summary>
            <param name="newGridCellCohorts">The new list of gridCellCohorts</param>
            <param name="latIndex">Grid cell latitude index</param>
            <param name="lonIndex">Grid cell longitude index</param>
        </member>
        <member name="M:Madingley.ModelGrid.AddNewCohortToGridCell(System.UInt32,System.UInt32,System.Int32,Madingley.Cohort)">
            <summary>
            Add a new cohort to an existing list of cohorts in the grid cell - or create a new list if there is not one present
            </summary>
            <param name="latIndex">Latitude index of the grid cell</param>
            <param name="lonIndex">Longitude index of the grid cell</param>
            <param name="functionalGroup">Functional group of the cohort (i.e. array index)</param>
            <param name="cohortToAdd">The cohort object to add</param>
        </member>
        <member name="M:Madingley.ModelGrid.GetEnviroLayer(System.String,System.UInt32,System.UInt32,System.UInt32,System.Boolean@)">
            <summary>
            Return the value of a specified environmental layer from an individual grid cell
            </summary>
            <param name="variableName">The name of the environmental lyaer</param>
            <param name="timeInterval">The desired time interval within the environmental variable (i.e. 0 if it is a yearly variable
            or the month index - 0=Jan, 1=Feb etc. - for monthly variables)</param>
            <param name="latCellIndex">The latitudinal cell index</param>
            <param name="lonCellIndex">The longitudinal cell index</param>
            <param name="variableExists">Returns false if the environmental layer does not exist, true if it does</param>
            <returns>The value of the environmental layer, or a missing value if the environmental layer does not exist</returns>
        </member>
        <member name="M:Madingley.ModelGrid.SetEnviroLayer(System.String,System.UInt32,System.Double,System.UInt32,System.UInt32)">
            <summary>
            Set the value of a specified environmental layer in an individual grid cell
            </summary>
            <param name="variableName">The name of the environmental layer</param>
            <param name="timeInterval">The time interval within the environmental variable to set (i.e. 0 if it is a yearly variable
            or the month index - 0=Jan, 1=Feb etc. - for monthly variables)</param>
            <param name="setValue">The value to set</param>
            <param name="latCellIndex">The latitudinal cell index</param>
            <param name="lonCellIndex">The longitudinal cell index</param>
            <returns>True if the value is set successfully, false otherwise</returns>
        </member>
        <member name="M:Madingley.ModelGrid.SetDeltas(System.String,System.String,System.Double,System.UInt32,System.UInt32)">
            <summary>
            Set the value of a given delta type for the specified ecological process within the specified grid cell
            </summary>
            <param name="deltaType">The type of delta value to set (e.g. 'biomass', 'abundance' etc.)</param>
            <param name="ecologicalProcess">The name of the ecological process to set the value of delta for</param>
            <param name="setValue">The value to set</param>
            <param name="latCellIndex">The latitudinal index of the cell</param>
            <param name="lonCellIndex">The longitudinal index of the cell</param>
            <returns>True if the value is set successfully, false otherwise</returns>
        </member>
        <member name="M:Madingley.ModelGrid.StateVariableGridTotal(System.String,System.String,System.Int32[],System.Collections.Generic.List{System.UInt32[]},System.String,Madingley.MadingleyModelInitialisation)">
            <summary>
            Get the total of a state variable for specific cells
            </summary>
            <param name="variableName">The name of the variable</param>
            <param name="traitValue">The functional group trait value to get data for</param>
            <param name="functionalGroups">A vector of functional group indices to consider</param>
            <param name="cellIndices">List of indices of active cells in the model grid</param>
            <param name="stateVariableType">A string indicating the type of state variable; 'cohort' or 'stock'</param>
            <param name="initialisation">The Madingley Model intialisation</param>
            <returns>Summed value of variable over whole grid</returns>
            <todo>Overload to work with vector and array state variables</todo>
        </member>
        <member name="M:Madingley.ModelGrid.GetStateVariable(System.String,System.String,System.Int32[],System.UInt32,System.UInt32,System.String,Madingley.MadingleyModelInitialisation)">
            <summary>
            Gets a state variable for specified functional groups of specified entity types in a specified grid cell
            </summary>
            <param name="variableName">The name of the variable to get: 'biomass' or 'abundance'</param>
            <param name="traitValue">The functional group trait value to get data for</param>
            <param name="functionalGroups">The functional group indices to get the state variable for</param>
            <param name="latCellIndex">The latitudinal index of the cell</param>
            <param name="lonCellIndex">The longitudinal index of the cell</param>
            <param name="stateVariableType">The type of entity to return the state variable for: 'stock' or 'cohort'</param>
            <param name="modelInitialisation">The Madingley Model initialisation</param>
            <returns>The state variable for specified functional groups of specified entity types in a specified grid cell</returns>
        </member>
        <member name="M:Madingley.ModelGrid.GetStateVariableDensity(System.String,System.String,System.Int32[],System.UInt32,System.UInt32,System.String,Madingley.MadingleyModelInitialisation)">
            <summary>
            Gets a state variable density for specified functional groups of specified entity types in a specified grid cell
            </summary>
            <param name="variableName">The name of the variable to get: 'biomass' or 'abundance'</param>
            <param name="traitValue">The functional group trait value to get data for</param>
            <param name="functionalGroups">The functional group indices to get the state variable for</param>
            <param name="latCellIndex">The latitudinal index of the cell</param>
            <param name="lonCellIndex">The longitudinal index of the cell</param>
            <param name="stateVariableType">The type of entity to return the state variable for: 'stock' or 'cohort'</param>
            <param name="modelInitialisation">The Madingley Model initialisation</param>
            <returns>The state variable density for specified functional groups of specified entity types in a specified grid cell</returns>
        </member>
        <member name="M:Madingley.ModelGrid.StateVariableGridMeanDensity(System.String,System.String,System.Int32[],System.Collections.Generic.List{System.UInt32[]},System.String,Madingley.MadingleyModelInitialisation)">
            <summary>
            Get the mean density of a state variable for specific cells
            </summary>
            <param name="variableName">The name of the variable</param>
            <param name="traitValue">The functional group trait value to get data for</param>
            <param name="functionalGroups">A vector of functional group indices to consider</param>
            <param name="cellIndices">List of indices of active cells in the model grid</param>
            <param name="stateVariableType">A string indicating the type of state variable; 'cohort' or 'stock'</param>
            <param name="initialisation">The Madingley Model initialisation</param>
            <returns>Mean density of variable over whole grid</returns>
        </member>
        <member name="M:Madingley.ModelGrid.GetStateVariableGrid(System.String,System.String,System.Int32[],System.Collections.Generic.List{System.UInt32[]},System.String,Madingley.MadingleyModelInitialisation)">
            <summary>
            Return an array of values for a single state variable over specific cells
            </summary>
            <param name="variableName">Variable name</param>
            <param name="traitValue">The trait values of functional groups to get data for</param>
            <param name="functionalGroups">A vector of functional group indices to consider</param>
            <param name="cellIndices">List of indices of active cells in the model grid</param>
            <param name="stateVariableType">A string indicating the type of state variable; 'cohort' or 'stock'</param>
            <param name="initialisation">The Madingley Model initialisation</param>
            <returns>Array of state variable values for each grid cell</returns>
        </member>
        <member name="M:Madingley.ModelGrid.GetStateVariableGridDensityPerSqKm(System.String,System.String,System.Int32[],System.Collections.Generic.List{System.UInt32[]},System.String,Madingley.MadingleyModelInitialisation)">
            <summary>
            Return an array of values for a single state variable over specific cells, given in densities per km^2
            </summary>
            <param name="variableName">Variable name</param>
            <param name="traitValue">The functional group trait value to get data for</param>
            <param name="functionalGroups">A vector of functional group indices to consider</param>
            <param name="cellIndices">List of indices of active cells in the model grid</param>
            <param name="stateVariableType">A string indicating the type of state variable; 'cohort' or 'stock'</param>
            <param name="initialisation">The Madingley Model initialisation</param>
            <returns>Array of state variable values for each grid cell</returns>
        </member>
        <member name="M:Madingley.ModelGrid.GetStateVariableGridLog(System.String,System.String,System.Int32[],System.Collections.Generic.List{System.UInt32[]},System.String,Madingley.MadingleyModelInitialisation)">
            <summary>
            Return an array of log(values + 1) for a state variable for particular functional groups over specific cells. State variable (currently only biomass or abundance) must be >= 0 in all grid cells
            </summary>
            <param name="variableName">The name of the variable</param>
            <param name="traitValue">The functional group trait value to get data for</param>
            <param name="functionalGroups">A vector of functional group indices to consider</param>
            <param name="cellIndices">List of indices of active cells in the model grid</param>
            <param name="stateVariableType">A string indicating the type of state variable; 'cohort' or 'stock'</param>
            <param name="initialisation">The Madingley Model initialisation</param>
            <returns>Array of log(state variable values +1 ) for each grid cell</returns>
        </member>
        <member name="M:Madingley.ModelGrid.GetStateVariableGridLogDensityPerSqKm(System.String,System.String,System.Int32[],System.Collections.Generic.List{System.UInt32[]},System.String,Madingley.MadingleyModelInitialisation)">
            <summary>
            Return an array of log(values + 1) for a state variable for particular functional groups over specific cells. State variable (currently only biomass or abundance) must be >= 0 in all grid cells
            </summary>
            <param name="variableName">The name of the variable</param>
            <param name="traitValue">The functional group trait value to get data for</param>
            <param name="functionalGroups">A vector of functional group indices to consider</param>
            <param name="cellIndices">List of indices of active cells in the model grid</param>
            <param name="stateVariableType">A string indicating the type of state variable; 'cohort' or 'stock'</param>
            <param name="initialisation">The Madingley Model intialisation</param>
            <returns>Array of log(state variable values +1 ) for each grid cell</returns>
        </member>
        <member name="M:Madingley.ModelGrid.GetLonIndex(System.Double)">
            <summary>
            Returns, for a given longitude, the appropriate longitude index in the grid
            ASSUMES THAT LONGITUDES IN THE MODEL GRID OBJECT REFER TO LOWER LEFT CORNERS!!!
            </summary>
            <param name="myLon">Longitude, in degrees</param>
            <returns>longitude index in the model grid</returns>
        </member>
        <member name="M:Madingley.ModelGrid.GetCellLongitude(System.UInt32)">
            <summary>
            Return the longitude of a cell at a particular lon. index
            </summary>
            <param name="cellLonIndex">The longitudinal index (i.e. row) of the cell</param>
            <returns>Returns the longitude of the bottom of the cell, in degrees</returns>
        </member>
        <member name="M:Madingley.ModelGrid.GetCellLatitude(System.UInt32)">
            <summary>
            Return the latitude of a cell at a particular lat. index
            </summary>
            <param name="cellLatIndex">The latitudinal index (i.e. row) of the cell</param>
            <returns>Returns the latitude of the bottom of the cell, in degrees</returns>
        </member>
        <member name="M:Madingley.ModelGrid.GetLatIndex(System.Double)">
            <summary>
            Returns, for a given latitude, the appropriate latitude index in the grid
            ASSUMES THAT LATITUDES IN THE MODEL GRID OBJECT REFER TO LOWER LEFT CORNERS!!!
            </summary>
            <param name="myLat">Latitude, in degrees</param>
            <returns>latitude index in the model grid</returns>
        </member>
        <member name="M:Madingley.ModelGrid.GetCellEnvironment(System.UInt32,System.UInt32)">
            <summary>
            A method to return the values for all environmental data layers for a particular grid cell
            </summary>
            <param name="cellLatIndex">Latitude index of grid cell</param>
            <param name="cellLonIndex">Longitude index of grid cell</param>
            <returns>A sorted list containing environmental data layer names and values</returns>
        </member>
        <member name="M:Madingley.ModelGrid.GetCellDeltas(System.String,System.UInt32,System.UInt32)">
            <summary>
            A method to return delta values for the specified delta type in a particular grid cell
            </summary>
            <param name="deltaType">The delta type to return</param>
            <param name="cellLatIndex">Latitude index of grid cell</param>
            <param name="cellLonIndex">Longitude index of grid cell</param>
            <returns>A sorted list containing deltas</returns>
        </member>
        <member name="M:Madingley.ModelGrid.GetCellDeltas(System.UInt32,System.UInt32)">
            <summary>
            A method to return all delta values in a particular grid cell
            </summary>
            <param name="cellLatIndex">Latitude index of grid cell</param>
            <param name="cellLonIndex">Longitude index of grid cell</param>
            <returns>A sorted list of sorted lists containing deltas</returns>
        </member>
        <member name="M:Madingley.ModelGrid.GetEnviroGrid(System.String,System.UInt32)">
            <summary>
            Get a grid of values for an environmental data layer
            </summary>
            <param name="enviroVariable"> The name of the environmental data layer</param>
            <param name="timeInterval">The desired time interval within the environmental variable (i.e. 0 if it is a yearly variable
            or the month index - 0=Jan, 1=Feb etc. - for monthly variables)</param>
            <returns>The values in each grid cell</returns>
        </member>
        <member name="M:Madingley.ModelGrid.GetEnviroGrid(System.String,System.UInt32,System.Collections.Generic.List{System.UInt32[]})">
            <summary>
            Get a grid of values for an environmental data layer in specific cells
            </summary>
            <param name="enviroVariable">The name of the environmental data layer to return</param>
            <param name="timeInterval">The desired time interval for which to get data (i.e. 0 if it is a yearly variable
            or the month index - 0=Jan, 1=Feb etc. - for monthly variables)</param>
            <param name="cellIndices">List of active cells in the model grid</param>
            <returns>The values in each grid cell</returns>
        </member>
        <member name="M:Madingley.ModelGrid.GetEnviroGridTotal(System.String,System.UInt32)">
            <summary>
            Return the total over the whole grid for an environmental variable
            </summary>
            <param name="enviroVariable">The environmental variable</param>
            <param name="timeInterval">The desired time interval within the environmental variable (i.e. 0 if it is a yearly variable
            or the month index - 0=Jan, 1=Feb etc. - for monthly variables)</param>
            <returns>The total of the variable over the whole grid</returns>
        </member>
        <member name="M:Madingley.ModelGrid.GetEnviroGridTotal(System.String,System.UInt32,System.Collections.Generic.List{System.UInt32[]})">
            <summary>
            Return the sum of an environmental variable over specific cells
            </summary>
            <param name="enviroVariable">The environmental variable</param>
            <param name="timeInterval">The desired time interval within the environmental variable (i.e. 0 if it is a yearly variable
            or the month index - 0=Jan, 1=Feb etc. - for monthly variables)</param>
            <param name="cellIndices">List of active cells in the model grid</param>
            <returns>The total of the variable over the whole grid</returns>
        </member>
        <member name="M:Madingley.ModelGrid.CheckTopPerimeterTraversable(System.UInt32,System.UInt32,System.Double)">
            <summary>
            Check to see if the top perimeter of the cell is traversable for dispersal (i.e. is from the same realm)
            </summary>
            <param name="latCell">The latitudinal cell index</param>
            <param name="lonCell">The longitudinal cell index</param>
            <param name="gridCellRealm">The grid cell realm</param>
        </member>
        <member name="M:Madingley.ModelGrid.CheckTopRightPerimeterTraversable(System.UInt32,System.UInt32,System.UInt32,System.Double)">
            <summary>
            Check to see if the top right perimeter of the cell is traversable for dispersal (i.e. is from the same realm)
            </summary>
            <param name="latCell">The latitudinal cell index</param>
            <param name="lonCell">The longitudinal cell index</param>
            <param name="lonCellToGoTo">The index of the cell to go to (needs to take into account grid wrapping)</param>
            <param name="gridCellRealm">The grid cell realm</param>
        </member>
        <member name="M:Madingley.ModelGrid.CheckRightPerimeterTraversable(System.UInt32,System.UInt32,System.UInt32,System.Double)">
            <summary>
            Check to see if the right perimeter of the cell is traversable for dispersal (i.e. is from the same realm)
            </summary>
            <param name="latCell">The latitudinal cell index</param>
            <param name="lonCell">The longitudinal cell index</param>
            <param name="lonCellToGoTo">The index of the cell to go to (needs to take into account grid wrapping)</param>
            <param name="gridCellRealm">The grid cell realm</param>
        </member>
        <member name="M:Madingley.ModelGrid.CheckBottomRightPerimeterTraversable(System.UInt32,System.UInt32,System.UInt32,System.Double)">
            <summary>
            Check to see if the bottom right perimeter of the cell is traversable for dispersal (i.e. is from the same realm)
            </summary>
            <param name="latCell">The latitudinal cell index</param>
            <param name="lonCell">The longitudinal cell index</param>
            <param name="lonCellToGoTo">The index of the cell to go to (needs to take into account grid wrapping)</param>
            <param name="gridCellRealm">The grid cell realm</param>
        </member>
        <member name="M:Madingley.ModelGrid.CheckBottomPerimeterTraversable(System.UInt32,System.UInt32,System.Double)">
            <summary>
            Check to see if the right perimeter of the cell is traversable for dispersal (i.e. is from the same realm)
            </summary>
            <param name="latCell">The latitudinal cell index</param>
            <param name="lonCell">The longitudinal cell index</param>
            <param name="gridCellRealm">The grid cell realm</param>
        </member>
        <member name="M:Madingley.ModelGrid.CheckBottomLeftPerimeterTraversable(System.UInt32,System.UInt32,System.UInt32,System.Double)">
            <summary>
            Check to see if the bottom left perimeter of the cell is traversable for dispersal (i.e. is from the same realm)
            </summary>
            <param name="latCell">The latitudinal cell index</param>
            <param name="lonCell">The longitudinal cell index</param>
            <param name="lonCellToGoTo">The index of the cell to go to (needs to take into account grid wrapping)</param>
            <param name="gridCellRealm">The grid cell realm</param>
        </member>
        <member name="M:Madingley.ModelGrid.CheckLeftPerimeterTraversable(System.UInt32,System.UInt32,System.UInt32,System.Double)">
            <summary>
            Check to see if the left perimeter of the cell is traversable for dispersal (i.e. is from the same realm)
            </summary>
            <param name="latCell">The latitudinal cell index</param>
            <param name="lonCell">The longitudinal cell index</param>
            <param name="lonCellToGoTo">The index of the cell to go to (needs to take into account grid wrapping)</param>
            <param name="gridCellRealm">The grid cell realm</param>
        </member>
        <member name="M:Madingley.ModelGrid.CheckTopLeftPerimeterTraversable(System.UInt32,System.UInt32,System.UInt32,System.Double)">
            <summary>
            Check to see if the top left perimeter of the cell is traversable for dispersal (i.e. is from the same realm)
            </summary>
            <param name="latCell">The latitudinal cell index</param>
            <param name="lonCell">The longitudinal cell index</param>
            <param name="lonCellToGoTo">The index of the cell to go to (needs to take into account grid wrapping)</param>
            <param name="gridCellRealm">The grid cell realm</param>
        </member>
        <member name="M:Madingley.ModelGrid.CalculatePerimeterLengthsAndCellsDispersableTo">
            <summary>
            Calculate the dispersable perimeter lengths of each of the grid cells
            </summary>
        </member>
        <member name="M:Madingley.ModelGrid.GetRandomGridCellToDisperseTo(System.UInt32,System.UInt32)">
            <summary>
            Given a grid cell from where a cohort is dispersing, select at random a grid cell for it to disperse to from those that exist within the 
            same realm
            </summary>
            <param name="fromCellLatIndex">The latitudinal index of the cell from which the cohort is dispersing</param>
            <param name="fromCellLonIndex">The longitudinal index of the cell from which the cohort is dispersing</param>
            <returns></returns>
        </member>
        <member name="M:Madingley.ModelGrid.CheckDispersalNorth(System.UInt32,System.UInt32)">
            <summary>
            Get the longitudinal and latitudinal indices of the cell that lies to the north of the focal grid cell, if a viable cell to disperse to
            </summary>
            <param name="fromCellLatIndex">The latitudinal index of the focal grid cell</param>
            <param name="fromCellLonIndex">The longitudinal index of the focal grid cell</param>
            <returns>The longitudinal and latitudinal cell indcies of the cell that lies to the north of the focal grid cell</returns>
        </member>
        <member name="M:Madingley.ModelGrid.CheckDispersalEast(System.UInt32,System.UInt32)">
            <summary>
            Get the longitudinal and latitudinal indices of the cell that lies to the east of the focal grid cell, if a viable cell to disperse to
            </summary>
            <param name="fromCellLatIndex">The latitudinal index of the focal grid cell</param>
            <param name="fromCellLonIndex">The longitudinal index of the focal grid cell</param>
            <returns>The longitudinal and latitudinal cell indices of the cell that lies to the east of the focal grid cell</returns>
        </member>
        <member name="M:Madingley.ModelGrid.CheckDispersalSouth(System.UInt32,System.UInt32)">
            <summary>
            Get the longitudinal and latitudinal indices of the cell that lies to the south of the focal grid cell, if a viable cell to disperse to
            </summary>
            <param name="fromCellLatIndex">The latitudinal index of the focal grid cell</param>
            <param name="fromCellLonIndex">The longitudinal index of the focal grid cell</param>
            <returns>The longitudinal and latitudinal cell indcies of the cell that lies to the south of the focal grid cell</returns>
        </member>
        <member name="M:Madingley.ModelGrid.CheckDispersalWest(System.UInt32,System.UInt32)">
            <summary>
            Get the longitudinal and latitudinal indices of the cell that lies to the west of the focal grid cell, if a viable cell to disperse to
            </summary>
            <param name="fromCellLatIndex">The latitudinal index of the focal grid cell</param>
            <param name="fromCellLonIndex">The longitudinal index of the focal grid cell</param>
            <returns>The longitudinal and latitudinal cell indcies of the cell that lies to the west of the focal grid cell</returns>
        </member>
        <member name="M:Madingley.ModelGrid.CheckDispersalNorthEast(System.UInt32,System.UInt32)">
            <summary>
            Get the longitudinal and latitudinal indices of the cell that lies to the northeast of the focal grid cell, if a viable cell to disperse to
            </summary>
            <param name="fromCellLatIndex">The latitudinal index of the focal grid cell</param>
            <param name="fromCellLonIndex">The longitudinal index of the focal grid cell</param>
            <returns>The longitudinal and latitudinal cell indcies of the cell that lies to the northeast of the focal grid cell</returns>
        </member>
        <member name="M:Madingley.ModelGrid.CheckDispersalSouthEast(System.UInt32,System.UInt32)">
            <summary>
            Get the longitudinal and latitudinal indices of the cell that lies to the southeast of the focal grid cell, if a viable cell to disperse to
            </summary>
            <param name="fromCellLatIndex">The latitudinal index of the focal grid cell</param>
            <param name="fromCellLonIndex">The longitudinal index of the focal grid cell</param>
            <returns>The longitudinal and latitudinal cell indcies of the cell that lies to the southeast of the focal grid cell</returns>
        </member>
        <member name="M:Madingley.ModelGrid.CheckDispersalSouthWest(System.UInt32,System.UInt32)">
            <summary>
            Get the longitudinal and latitudinal indices of the cell that lies to the southwest of the focal grid cell, if a viable cell to disperse to
            </summary>
            <param name="fromCellLatIndex">The latitudinal index of the focal grid cell</param>
            <param name="fromCellLonIndex">The longitudinal index of the focal grid cell</param>
            <returns>The longitudinal and latitudinal cell indcies of the cell that lies to the southwest of the focal grid cell</returns>
        </member>
        <member name="M:Madingley.ModelGrid.CheckDispersalNorthWest(System.UInt32,System.UInt32)">
            <summary>
            Get the longitudinal and latitudinal indices of the cell that lies to the northwest of focal grid cell, if a viable cell to disperse to
            </summary>
            <param name="fromCellLatIndex">The latitudinal index of the focal grid cell</param>
            <param name="fromCellLonIndex">The longitudinal index of the focal grid cell</param>
            <returns>The longitudinal and latitudinal cell indcies of the cell that lies to the northwest of the focal grid cell</returns>
        </member>
        <member name="P:Madingley.ModelGrid.GlobalMissingValue">
            <summary>
            Get the global missing value
            </summary>
        </member>
        <member name="P:Madingley.ModelGrid.MinLatitude">
            <summary>
            Get the lower latitude of the lowest cell of the grid
            </summary>
        </member>
        <member name="P:Madingley.ModelGrid.MinLongitude">
            <summary>
            Get the leftmost longitude of the leftmost cell of the grid
            </summary>
        </member>
        <member name="P:Madingley.ModelGrid.MaxLatitude">
            <summary>
            Get the lowest latitude of the highest cell in the grid
            </summary>
        </member>
        <member name="P:Madingley.ModelGrid.MaxLongitude">
            <summary>
            Get the leftmost longitude of the rightmost cell in the grid
            </summary>
        </member>
        <member name="P:Madingley.ModelGrid.LatCellSize">
            <summary>
            Get the latitudinal length of each grid cell. Currently assumes all cells are equal sized.
            </summary>
        </member>
        <member name="P:Madingley.ModelGrid.LonCellSize">
            <summary>
            Get the longitudinal length of each grid cell. Currently assumes all cells are equal sized. 
            </summary>
        </member>
        <member name="P:Madingley.ModelGrid.GridCellRarefaction">
            <summary>
            Get the rarefaction of grid cells to be applied to active cells in the model grid
            </summary>
        </member>
        <member name="P:Madingley.ModelGrid.NumLatCells">
            <summary>
            Get the number of latitudinal cells in the model grid
            </summary>
        </member>
        <member name="P:Madingley.ModelGrid.NumLonCells">
            <summary>
            Get the number of longitudinal cells in the model grid
            </summary>
        </member>
        <member name="P:Madingley.ModelGrid.Lats">
            <summary>
            Get the bottom (southern-most) latitude of each row of grid cells
            </summary>
        </member>
        <member name="P:Madingley.ModelGrid.Lons">
            <summary>
            Get the left (western-most) longitude of each column of grid cells
            </summary>
        </member>
        <member name="T:Madingley.ModelGrid.ThreadLockedParallelVariablesModelGrid">
            <summary>
            Thread-local variables for tracking extinction and production of cohorts
            </summary>
            <todo>Needs a little tidying and checking of access levels</todo>
        </member>
        <member name="F:Madingley.ModelGrid.ThreadLockedParallelVariablesModelGrid.NextCohortIDThreadLocked">
            <summary>
            Thread-locked variable to track the cohort ID to assign to newly produced cohorts
            </summary>
        </member>
        <member name="T:Madingley.UtilityFunctions">
            <summary>
            Generic functions
            </summary>
        </member>
        <member name="M:Madingley.UtilityFunctions.ConvertToM180To180(System.Double[])">
            <summary>
            If longitudinal cell coordinates run from 0 to 360, the convert to -180 to 180 values
            </summary>
            <param name="lons">The longitudinal coorindates of the cells in the model grid</param>
        </member>
        <member name="M:Madingley.UtilityFunctions.RandomlyOrderedIndices(System.UInt32)">
            <summary>
            Generate a random order in which cohorts will be subjected to ecological processes
            </summary>
            <param name="numberIndices">The number of cohorts in the current grid cell</param>
            <returns>A vector of randomly ordered integers corresponding to the cohorts in the grid cell</returns>
        </member>
        <member name="M:Madingley.UtilityFunctions.NonRandomlyOrderedCohorts(System.UInt32,System.UInt32)">
            <summary>
            Generate a non-random order in which cohorts will be subjected to ecological processes
            </summary>
            <param name="cohortNumber">The number of cohorts in the current grid cell</param>
            <param name="currentTimeStep">The current time step of the model</param>
            <returns>A vector of non-randomly ordered integers corresponding to the cohorts in the grid cell</returns>
        </member>
        <member name="M:Madingley.UtilityFunctions.GetCurrentMonth(System.UInt32,System.String)">
            <summary>
            Get the month corresponding to the current time step
            </summary>
            <param name="currentTimestep">The current model time step</param>
            <param name="modelTimestepUnits">The time step units</param>
            <returns>The month corresponding to the current time step</returns>
        </member>
        <member name="M:Madingley.UtilityFunctions.ConvertTimeUnits(System.String,System.String)">
            <summary>
            Calculates factors to convert between different time units
            </summary>
            <param name="fromUnit">Time unit to convert from</param>
            <param name="toUnit">Time unit to convert to</param>
            <returns>Factor to convert between time units</returns>
        </member>
        <member name="M:Madingley.UtilityFunctions.FindJaggedArrayIndex(System.UInt32,System.UInt32[][],System.UInt32)">
            <summary>
            For a given cohort index, return a vector pair of values corresponding to the cohort's location in the jagged array of grid cell cohorts
            </summary>
            <param name="valueToFind">The index of the cohort (values range between zero and the number of cohorts in the jagged arrray)</param>
            <param name="arrayToSearch">The jaggged array of cohorts, where rows correspond to functional groups, and columns to cohorts within functional groups</param>
            <param name="totalNumberOfCohorts">The total number of cohorts in the grid cell</param>
            <returns>The position of the specified cohort in the jagged array of grid cell cohorts, where the first value is the row index (functional group) and the second value is the column index (position within functional group)</returns>
        </member>
        <member name="M:Madingley.UtilityFunctions.ConvertSqMToSqDegrees(System.Double,System.Double)">
            <summary>Converts values per square km to per square degree, given cell latitude</summary>
            <param name="valueToConvert">The value per square km</param>
            <param name="latitude">The latitude of the grid cell</param>
            <returns>The specified value converted to per square degree </returns>
        </member>
        <member name="M:Madingley.UtilityFunctions.LogNormalPDF(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the probability of a particular value under a log-normal distribution with specified mean and standard deviation
            </summary>
            <param name="xValue">The value to return the probability of under the log-normal distribtuion, in identity space</param>
            <param name="meanIdentity">The mean of the log-normal distribution, in identity space</param>
            <param name="standardDeviation">The standard deviation of the log-normal distribution, in log space</param>
            <returns>The probability of the specified value under the specified log-normal distribution</returns>
        </member>
        <member name="M:Madingley.UtilityFunctions.NormalPDF(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the probability of a particular value under a normal distribution with specified mean and standard deviation
            </summary>
            <param name="xValue">The value to return the probability of under the normal distribtuion</param>
            <param name="meanValue">The mean of the normal distribution</param>
            <param name="standardDeviation">The standard deviation of the normal distribution</param>
            <returns>The probability of the specified value under the specified normal distribution</returns>
        </member>
        <member name="M:Madingley.UtilityFunctions.CalculateGridCellArea(System.Double,System.Double,System.Double)">
            <summary>
            Calculate the area of a grid cell in square km, given its dimensions and geographical position
            </summary>
            <param name="latitude">The latitude of the bottom-left corner of the grid cell</param>
            <param name="lonCellSize">The longitudinal dimension of the grid cell</param>
            <param name="latCellSize">The latitudinal dimension of the grid cell</param>
            <returns>The area in square km of the grid cell</returns>
        </member>
        <member name="M:Madingley.UtilityFunctions.CalculateLengthOfDegreeLatitude(System.Single)">
            <summary>
            Calculate the length of a degree of latitude at a particular latitude
            </summary>
            <param name="latitude">The latitude of the bottom-left corner of the grid cell</param>
            <returns>The length of a degree of latitude in kilometres</returns>
        </member>
        <member name="M:Madingley.UtilityFunctions.CalculateLengthOfDegreeLongitude(System.Single)">
            <summary>
            Calculate the length of a degree of longitude at a particular latitude
            </summary>
            <param name="latitude">The latitude of the bottom-left corner of the grid cell</param>
            <returns>The length of a degree of longitude in kilometres</returns>
        </member>
        <member name="M:Madingley.UtilityFunctions.DegreesToRadians(System.Double)">
            <summary>
            Convert from degrees to radians
            </summary>
            <param name="degrees">The value in degrees to convert</param>
            <returns>The value converted to radians</returns>
        </member>
        <member name="T:Madingley.ViewGrid">
            <summary>
            This class is for viewing gridded data such as environmental data layers or state variables; it pauses program execution while the viewer is open
            </summary>
        </member>
        <member name="F:Madingley.ViewGrid.DataConverter">
            <summary>
            An instance of the class to convert data between arrays and SDS objects
            </summary>
        </member>
        <member name="M:Madingley.ViewGrid.#ctor">
            <summary>
            Constructor for the grid viewer: initialses relevant objects
            </summary>
        </member>
        <member name="M:Madingley.ViewGrid.PauseProgram(System.Double[0:,0:]@,System.String,System.Single[],System.Single[],System.Double)">
            <summary>
            Copy an georeferenced array (should be by reference!) to a grid in order to view it, then spawn the data set viewer
            <param name="gridToView">The grid to be viewed</param>
            <param name="variableName">The name of the variable to be viewed</param>
            <param name="lats">A vector of latitudes associated with the grid</param>
            <param name="lons">A vector of longitudes associated with the grid</param>
            <param name="gridMissingValue">The missing value for the grid to view</param>
            </summary>
        </member>
        <member name="M:Madingley.ViewGrid.SnapshotView(Microsoft.Research.Science.Data.DataSet@,System.Object@)">
            <summary>
            Provides a snapshot view of an SDS
            </summary>
            <param name="DataSetToView">The name of the SDS to view</param>
            <param name="handle">An object handle for the viewer instance; send the same handle to prevent multiple instances of SDS viewer opening</param>
            <todoD>Need to update to be able to select which variable to view</todoD>
            <todoD>Pass sleep length</todoD>
        </member>
        <member name="M:Madingley.ViewGrid.AsynchronousView(Microsoft.Research.Science.Data.DataSet@,System.String)">
            <summary>
            Asynchronously views an SDS
            </summary>
            <param name="DataSetToView">The name of the SDS to view</param>
            <param name="viewingParameters">A string of viewing parameters ('hints') to pass to SDS viewer</param>
            <todoD>Need to update to be able to select which variable to view</todoD>
            <todoD>Pass sleep length</todoD>
            <todoD>UPdate title on each timestep</todoD>
        </member>
        <member name="M:Madingley.ViewGrid.AsynchronousView(Microsoft.Research.Science.Data.DataSet@)">
            <summary>
            Asynchronously views an SDS
            </summary>
            <param name="DataSetToView">The name of the SDS to view</param>
            <todoD>Need to update to be able to select which variable to view</todoD>
            <todoD>Pass sleep length</todoD>
            <todoD>UPdate title on each timestep</todoD>
        </member>
        <member name="T:Madingley.ThreadLockedParallelVariables">
            <summary>
            Thread-local variables for tracking extinction and production of cohorts
            </summary>
            <todo>Needs a little tidying and checking of access levels</todo>
        </member>
        <member name="F:Madingley.ThreadLockedParallelVariables.Extinctions">
            <summary>
            Thread-local variable to track the extinction of cohorts
            </summary>
        </member>
        <member name="F:Madingley.ThreadLockedParallelVariables.Productions">
            <summary>
            Thread-local variable to track the production of cohorts
            </summary>
        </member>
        <member name="F:Madingley.ThreadLockedParallelVariables.NextCohortIDThreadLocked">
            <summary>
            Thread-locked variable to track the cohort ID to assign to newly produced cohorts
            </summary>
        </member>
        <member name="P:Madingley.ThreadLockedParallelVariables.Combinations">
            <summary>
            Variable to track the number of cohorts combined
            </summary>
        </member>
        <member name="T:Madingley.MadingleyModel">
            <summary>
            The ecosystem model
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.CohortFunctionalGroupDefinitions">
            <summary>
            An instance of the cohort functional group definitions for this model
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.StockFunctionalGroupDefinitions">
            <summary>
            An instance of the stock functional group definitions for this model
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.EnviroStack">
            <summary>
            A list of environmental data layers
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.EcosystemModelGrid">
            <summary>
            An instance of ModelGrid to hold the grid to be used in this model
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.MadingleyEcologyCrossGridCell">
            <summary>
            An instance of the cross grid cell ecology class
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.BottomLatitude">
            <summary>
            The lowest latitude for the model grid
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.TopLatitude">
            <summary>
            The upper latitude for the model grid
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.LeftmostLongitude">
            <summary>
            The left-most longitude for the model grid
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.RightmostLongitude">
            <summary>
            The right-most longitude for the model grid
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.CellSize">
            <summary>
            The size of the grid cells in degrees
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.NumTimeSteps">
            <summary>
            The number of time steps in the model run
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.NumBurninSteps">
            <summary>
            The number of time steps to run before any human impacts are simulated
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.NumImpactSteps">
            <summary>
            For temporary impacts, the number of time steps to apply the impact for
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.NumRecoverySteps">
            <summary>
            For temporary impacts, the number of time steps to apply the impact for
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.OutputModelStateTimestep">
            <summary>
            The timesteps for which model state should be output 
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.CurrentTimeStep">
            <summary>
            The current time step
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.CurrentMonth">
            <summary>
            The current month: 1=Jan; 2=Feb; 3=Mar etc.
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.DrawRandomly">
            <summary>
            Whether to use randomisation in the model run, i.e. cohorts will be seeeded with random masses and cohorts will act in a random order
            Default is true
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel._ExtinctionThreshold">
            <summary>
            The threshold abundance below which cohorts will automatically become extinct
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.MergeDifference">
            <summary>
            The proportional difference in adult, juvenile and current body masses that cohorts must fall within in order to be considered for merging
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel._GlobalModelTimeStepUnit">
            <summary>
            The time step units for this model
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel._CellList">
            <summary>
            Pairs of longitude and latitude indices for all active cells in the model grid
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.GlobalDiagnosticVariables">
            <summary>
            A list of global diagnostics for this model run
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.RunGridCellsInParallel">
            <summary>
            Whether the model will run in parallel (default  is false)
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.SpecificLocations">
            <summary>
            Whether the model will be run for specific locations, instead of for the whole model grid
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.TimeStepTimer">
            <summary>
            An instance of StopWatch to time individual time steps
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.CellOutputs">
            <summary>
            An array of instances of the output class to deal with grid cell outputs
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.ProcessTrackers">
            <summary>
            An array of indices of process trackers for each grid cell
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.TrackCrossCellProcesses">
            <summary>
            An instance of a cross-cell process tracker
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.TrackGlobalProcesses">
            <summary>
            An instance of a global process tracker to track global data across the model grid
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.WriteModelState">
            <summary>
            An instance of OutputModelState to output the state of all
            cohorts and stocks in the model at a particular time
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.ReadModelState">
            <summary>
            An instance of OutputModelState to output the state of all
            cohorts and stocks in the model at a particular time
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.GlobalOutputs">
            <summary>
            An instance of the output class to deal with global outputs
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.GridOutputs">
            <summary>
            An instance of the output class to deal with gridded outputs
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.OutputFilesSuffix">
            <summary>
            The suffix to be applied to files output by this model instance
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.InitialisationFileStrings">
            <summary>
            A sorted list of strings from the initialisation file
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.EnvironmentalDataUnits">
            <summary>
            A sorted list of strings for environmental data units
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel._HumanNPPScenario">
            <summary>
            The scenario of human NPP extraction to use
            </summary>
            <value>The first item is the scenario type
            The second item is an associated magnitude</value>
        </member>
        <member name="F:Madingley.MadingleyModel._TemperatureScenario">
            <summary>
            The scenario of temperature change to use
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel._HarvestingScenario">
            <summary>
            The scenario of direct animal harvesting to use
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.Dispersals">
            <summary>
            Variable to track the number of cohorts that have dispersed. Doesn't need to be thread-local because all threads have converged prior to running cross-grid-cell processes
            </summary>
        </member>
        <member name="F:Madingley.MadingleyModel.Utilities">
            <summary>
            Instance of the class to perform general functions
            </summary>
        </member>
        <member name="M:Madingley.MadingleyModel.#ctor(Madingley.MadingleyModelInitialisation,Madingley.ScenarioParameterInitialisation,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Initializes the ecosystem model
            </summary>
            <param name="initialisation">An instance of the model initialisation class</param> 
            <param name="scenarioParameters">The parameters for the scenarios to run</param>
            <param name="scenarioIndex">The index of the scenario being run</param>
            <param name="outputFilesSuffix">The suffix to be applied to all outputs from this model run</param>
            <param name="globalModelTimeStepUnit">The time step unit used in the model</param>
            <param name="simulation">The index of the simulation being run</param>
        </member>
        <member name="M:Madingley.MadingleyModel.RunMadingley(Madingley.MadingleyModelInitialisation)">
            <summary>
            Run the global ecosystem model
            </summary>
            <param name="initialisation">The initialization details for the current set of model simulations</param>
        </member>
        <member name="M:Madingley.MadingleyModel.RunCell(System.Int32,Madingley.ThreadLockedParallelVariables,System.Boolean,Madingley.MadingleyModelInitialisation)">
            <summary>
            A method to run the main ecosystem model loop in parallel (latitudinal strips)
            </summary>
            <param name="cellIndex">The index of the current cell in the list of all cells to run the model for</param>
            <param name="partial">A threadlockedparallelvariable that is used to pass global diagnostic information back with locking or race conditions</param>
            <param name="dispersalOnly">Whether to run dispersal only (i.e. to turn all other ecological processes off</param>
            <param name="initialisation">The Madingley Model intialisation</param>
            <remarks>Note that variables and instances of classes that are written to within this method MUST be local within this method to prevent 
            race issues and multiple threads attempting to write to the same variable when running the program in parallel</remarks>
        </member>
        <member name="M:Madingley.MadingleyModel.AssignModelRunProperties(Madingley.MadingleyModelInitialisation,Madingley.ScenarioParameterInitialisation,System.Int32,System.String)">
            <summary>
            Assigns the properties of the current model run
            </summary>
            <param name="initialisation">An instance of the model initialisation class</param> 
            <param name="scenarioParameters">The parameters for the scenarios to run</param>
            <param name="scenarioIndex">The index of the scenario that this model is to run</param>
            <param name="outputFilesSuffix">The suffix to be applied to all outputs from this model run</param>
        </member>
        <member name="M:Madingley.MadingleyModel.SetUpGlobalDiagnosticsList">
            <summary>
            Sets up the list of global diagnostic variables
            </summary>
        </member>
        <member name="M:Madingley.MadingleyModel.SetUpOutputs(Madingley.MadingleyModelInitialisation,System.Int32,System.Int32)">
            <summary>
            Sets up the model outputs
            </summary>
            <param name="initialisation">An instance of the model initialisation class</param>
            <param name="simulation">The index of the simulation being run</param>
            <param name="scenarioIndex">The index of the scenario being run</param>
        </member>
        <member name="M:Madingley.MadingleyModel.SetUpModelGrid(Madingley.MadingleyModelInitialisation,Madingley.ScenarioParameterInitialisation,System.Int32,System.Int32)">
            <summary>
            Sets up the model grid within a Madingley model run
            </summary>
            <param name="initialisation">An instance of the model initialisation class</param> 
            <param name="scenarioParameters">The parameters for the scenarios to run</param>
            <param name="scenarioIndex">The index of the scenario that this model is to run</param>
        </member>
        <member name="M:Madingley.MadingleyModel.InitialOutputs(System.String,Madingley.MadingleyModelInitialisation,System.UInt32)">
            <summary>
            Generates the initial outputs for this model run
            </summary>
            <param name="outputFilesSuffix">The suffix to be applied to all outputs from this model run</param>
            <param name="initialisation">The Madingley Model initialisation</param>
            <param name="month">The current month in the model run</param>
        </member>
        <member name="M:Madingley.MadingleyModel.RunCellsInParallel(Madingley.MadingleyModelInitialisation)">
            <summary>
            Run processes for cells in parallel
            </summary>
        </member>
        <member name="M:Madingley.MadingleyModel.RunCellsSequentially(Madingley.MadingleyModelInitialisation)">
            <summary>
            Run processes for cells sequentially
            </summary>
        </member>
        <member name="M:Madingley.MadingleyModel.RunWithinCellStockEcology(System.UInt32,System.UInt32,Madingley.GridCellStockHandler,System.Int32,Madingley.MadingleyModelInitialisation)">
            <summary>
            Run ecological processes for stocks in a specified grid cell
            </summary>
            <param name="latCellIndex">The latitudinal index of the cell to run stock ecology for</param>
            <param name="lonCellIndex">The longitudinal index of the cell to run stock ecology for</param>
            <param name="workingGridCellStocks">A copy of the cohorts in the current grid cell</param>
            <param name="cellIndex">The index of the current cell in the list of all cells to run the model for</param>
            <param name="initialisation">The Madingley Model initialisation</param>
        </member>
        <member name="M:Madingley.MadingleyModel.RunExtinction(System.UInt32,System.UInt32,Madingley.ThreadLockedParallelVariables,Madingley.GridCellCohortHandler,System.Int32)">
            <summary>
            Carries out extinction on cohorts that have an abundance below a defined extinction threshold
            </summary>
        </member>
        <member name="M:Madingley.MadingleyModel.RunCrossGridCellEcology(System.UInt32@,System.Boolean,Madingley.MadingleyModelInitialisation)">
            <summary>
            Run ecological processes that operate across grid cells
            </summary>
        </member>
        <member name="M:Madingley.MadingleyModel.RecordInitialCohorts">
            <summary>
            Make a record of the properties of the intial model cohorts in the new cohorts output file
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModel.ExtinctionThreshold">
            <summary>
            Get the extinction threshold for this model
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModel.GlobalModelTimeStepUnit">
            <summary>
            Get or set the time step units for this model
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModel.HumanNPPScenario">
            <summary>
            Get the human NPP scenario
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModel.TemperatureScenario">
            <summary>
            Get the scenario of temperature change to use
            </summary>
        </member>
        <member name="P:Madingley.MadingleyModel.HarvestingScenario">
            <summary>
            Get the scenario of direct animal harvesting to use
            </summary>
        </member>
        <member name="T:Madingley.EnviroData">
            <summary>
            Imports environmental data from ASCII and NetCDF files
            </summary>
            <todoT>No error-trapping as yet</todoT>
            <todoT>Rewrite to use the ArraySDSConvert class</todoT>
            <todoD>Need  to go through code and rewrite e.g. change method to overloaded to prevent passing variable name and file name for ESRI grids</todoD>
            <remarks>Currently assumes that cells are evenly spaced in latitude and longitude</remarks>
        </member>
        <member name="F:Madingley.EnviroData._NumLats">
            <summary>
            Number of latitudinal cells
            </summary>
        </member>
        <member name="F:Madingley.EnviroData._NumLons">
            <summary>
            Number of longitudinal cells
            </summary>
        </member>
        <member name="F:Madingley.EnviroData._NumTimes">
            <summary>
            Number of time intervals encompassed by the environmental variable
            </summary>
        </member>
        <member name="F:Madingley.EnviroData._LatMin">
            <summary>
            Latitude of the bottom edge of the sothernmost grid cell
            </summary>
        </member>
        <member name="F:Madingley.EnviroData._LonMin">
            <summary>
            Latitude of the left edge of the most western grid cell
            </summary>
        </member>
        <member name="F:Madingley.EnviroData._MissingValue">
            <summary>
            Value used to denote missing data for this environmental variable
            </summary>
        </member>
        <member name="F:Madingley.EnviroData._LatStep">
            <summary>
            Latitudinal distance between adjacent cells
            </summary>
        </member>
        <member name="F:Madingley.EnviroData._LonStep">
            <summary>
            Longitudinal distance between adjacent cells
            </summary>
        </member>
        <member name="F:Madingley.EnviroData._DataArray">
            <summary>
            List of arrays of values of the environmental variable
            </summary>
        </member>
        <member name="F:Madingley.EnviroData._Lats">
            <summary>
            Vector of latitudes of the bottom edges of grid cells
            </summary>
        </member>
        <member name="F:Madingley.EnviroData._Lons">
            <summary>
            Vector of longitudes of the left edges of grid cells
            </summary>
        </member>
        <member name="F:Madingley.EnviroData._Times">
            <summary>
            Vector containing values of the time dimension of the environmental variable
            </summary>
        </member>
        <member name="F:Madingley.EnviroData._ReadFileString">
            <summary>
            The string required to read the file with the environmental data
            </summary>
        </member>
        <member name="F:Madingley.EnviroData._Units">
            <summary>
            The units of the environmental variable
            </summary>
        </member>
        <member name="F:Madingley.EnviroData._NumEnviroLayers">
            <summary>
            Tracks the number of environmental data layers opened
            </summary>
        </member>
        <member name="F:Madingley.EnviroData.Utilities">
            <summary>
            Instance of the class to perform general functions
            </summary>
        </member>
        <member name="M:Madingley.EnviroData.#ctor(System.String,System.String,System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.Research.Science.Data.EnvironmentalDataSource)">
            <summary>
            Overloaded constructor to fetch climate information from the cloud using FetchClimate
            </summary>
            <param name="dataName">Name of the the climate variable to be fetched</param>
            <param name="dataResolution">Time resolution requested</param>
            <param name="latMin">Bottom latitude</param>
            <param name="lonMin">Leftmost longitude</param>
            <param name="latMax">Maximum latitude</param>
            <param name="lonMax">Maximum longitude</param>
            <param name="cellSize">Size of each grid cell</param>
            <param name="FetchClimateDataSource">Data source from which to fetch environmental data</param>
        </member>
        <member name="M:Madingley.EnviroData.#ctor(System.String,System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Collections.Generic.List{System.UInt32[]},Microsoft.Research.Science.Data.EnvironmentalDataSource)">
            <summary>
            Overloaded constructor to fetch climate information from the cloud using FetchClimate for specific locations
            </summary>
            <param name="dataName">Name of the the climate variable to be fetched</param>
            <param name="dataResolution">Time resolution requested</param>
            <param name="latMin">Bottom latitude</param>
            <param name="lonMin">Leftmost longitude</param>
            <param name="latMax">Maximum latitude</param>
            <param name="lonMax">Maximum longitude</param>
            <param name="cellSize">Size of each grid cell</param>
            <param name = "cellList">List of cells to be fetched</param>
            <param name="FetchClimateDataSource">Data source from which to fetch environmental data</param>
        </member>
        <member name="M:Madingley.EnviroData.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor for EnviroData
            </summary>
            <param name="fileName">Filename (including extension)</param>
            <param name="dataName">The name of the variable that contains the data within the specified file</param>
            <param name="dataType">Type of data, nc = NetCDF, ascii = ESRI ASCII)</param>
            <param name="dataResolution">The temporal resolution of the environmental variable</param>
            <param name="units">The units of the data</param>
            <todo>Check whether lat/lon or 0/1 are fixed for all NetCDFs</todo>
            <todo>CHECK IF DIMENSIONS HAVE TO BE THE SAME FOR ALL VARIABLES IN A NETCDF AND HOW TO EXTRACT DIMENSIONS FOR A SINGLE VARIABLE IF NECESSARY</todo>
            <todo>Write code to check for equal cell sizes in NetCDFs</todo>
        </member>
        <member name="M:Madingley.EnviroData.GetValue(System.Double,System.Double,System.UInt32,System.Boolean@)">
            <summary>
            A method to extract the value of an environmental variable from the grid cell closest to a specified latitude and longitude
            </summary>
            <param name="lat">Latitude to get value from</param>
            <param name="lon">Longitude to get value from</param>
            <param name="timeInterval">The time interval to get the value from (i.e. the month, or 0 for yearly variables)</param>
            <param name="missingValue">Boolean to indicate whether the returned value is a missing value</param>
            <returns>The value of the environmental variable at the grid cell closest to the specified latitude and longitude</returns>
        </member>
        <member name="M:Madingley.EnviroData.GetValue(System.Double,System.Double,System.UInt32,System.Boolean@,System.Double,System.Double)">
            <summary>
            A method to extract the area weighted value of an environmental variable from the envirodata cells overlapped by the cell specified by lat and lon
            </summary>
            <param name="lat">Bottom latitude of cell to get value from</param>
            <param name="lon">Leftmost longitude of cell to get value from</param>
            <param name="timeInterval">The time interval to get the value from (i.e. the month, or 0 for yearly variables)</param>
            <param name="missingValue">Boolean to indicate whether the returned value is a missing value</param>
            <param name="latCellSize">The latitudinal size of cells in the model grid</param>
            <param name="lonCellSize">The longitudinal size of cells in the model grid</param>
            <returns>The area weighted value of an environmental variable from the envirodata cells overlapped by the cell specified by lat and lon</returns>
        </member>
        <member name="M:Madingley.EnviroData.EnvironmentListFromNetCDF(Microsoft.Research.Science.Data.DataSet,System.String,System.Boolean,System.Boolean)">
            <summary>
            Reads in two-dimensional environmental data from a NetCDF and stores them in the array of values within this instance of EnviroData
            </summary>
            <param name="internalData">The SDS object to get data from</param>
            <param name="dataName">The name of the variable within the NetCDF file</param>
            <param name="latInverted">Whether the latitude values are inverted in the NetCDF file (i.e. large to small values)</param>
            <param name="longInverted">Whether the longitude values are inverted in the NetCDF file (i.e. large to small values)</param>
        </member>
        <member name="M:Madingley.EnviroData.EnvironmentListFromNetCDF3D(Microsoft.Research.Science.Data.DataSet,System.String,System.Boolean,System.Boolean)">
            <summary>
            Reads in three-dimensional environmental data from a NetCDF and stores them in the array of values within this instance of EnviroData
            </summary>
            <param name="internalData">The SDS object to get data from</param>
            <param name="dataName">The name of the variable within the NetCDF file</param>
            <param name="latInverted">Whether the latitude values are inverted in the NetCDF file (i.e. large to small values)</param>
            <param name="longInverted">Whether the longitude values are inverted in the NetCDF file (i.e. large to small values)</param>
        </member>
        <member name="M:Madingley.EnviroData.Finalize">
            <summary>
            Dispose of an Envirodata instance
            </summary>
        </member>
        <member name="P:Madingley.EnviroData.NumLats">
            <summary>
            Get number of latitudinal cells
            </summary>
        </member>
        <member name="P:Madingley.EnviroData.NumLons">
            <summary>
            Get number of longitudinal cells
            </summary>
        </member>
        <member name="P:Madingley.EnviroData.NumTimes">
            <summary>
            Get the number of time intervals encompassed by the environmental variable
            </summary>
        </member>
        <member name="P:Madingley.EnviroData.LatMin">
            <summary>
            Get latitude of the bottom edge of the sothernmost grid cell
            </summary>
        </member>
        <member name="P:Madingley.EnviroData.LonMin">
            <summary>
            Get latitude of the left edge of the most western grid cell
            </summary>
        </member>
        <member name="P:Madingley.EnviroData.MissingValue">
            <summary>
            Get value used to denote missing data for this environmental variable
            </summary>
        </member>
        <member name="P:Madingley.EnviroData.LatStep">
            <summary>
            Get latitudinal distance between adjacent cells
            </summary>
        </member>
        <member name="P:Madingley.EnviroData.LonStep">
            <summary>
            Get longitudinal distance between adjacent cells
            </summary>
        </member>
        <member name="P:Madingley.EnviroData.DataArray">
            <summary>
            Get list of arrays of values of the environmental variable
            </summary>
        </member>
        <member name="P:Madingley.EnviroData.Lats">
            <summary>
            Get vector of latitudes of the bottom edges of grid cells
            </summary>
        </member>
        <member name="P:Madingley.EnviroData.Lons">
            <summary>
            Get vector of longitudes of the left edges of grid cells
            </summary>
        </member>
        <member name="P:Madingley.EnviroData.Times">
            <summary>
            Get vector containing values of the time dimension of the environmental variable
            </summary>
        </member>
        <member name="P:Madingley.EnviroData.ReadFileString">
            <summary>
            Get the string required to read the file with the environmental data
            </summary>
        </member>
        <member name="P:Madingley.EnviroData.Units">
            <summary>
            Gets the units of the environmental variable
            </summary>
        </member>
        <member name="P:Madingley.EnviroData.NumEnviroLayers">
            <summary>
            Returns the number of environmental data layers opened
            </summary>
        </member>
        <member name="T:Madingley.GridCell">
            <summary>
            Stores properties of grid cells
            <todoD>Remove single valued state-variables and convert model to work with functional groups</todoD>
            <todoD>Check the get/set methods and overloads</todoD>
            <todoD>Convert GetEnviroLayer to field terminology</todoD>
            </summary>
        </member>
        <member name="F:Madingley.GridCell._GridCellCohorts">
            <summary>
            The handler for the cohorts in this grid cell
            </summary>
        </member>
        <member name="F:Madingley.GridCell._GridCellStocks">
            <summary>
            The handler for the stocks in this grid cell
            </summary>
        </member>
        <member name="F:Madingley.GridCell._CellEnvironment">
            <summary>
            The environmental data for this grid cell
            </summary>
        </member>
        <member name="F:Madingley.GridCell._Deltas">
            <summary>
            Deltas to track changes in biomasses and abundances of cohorts, stocks and environmental biomass pools during ecological processes
            </summary>
        </member>
        <member name="F:Madingley.GridCell._Latitude">
            <summary>
            The latitude of this grid cell
            </summary>
        </member>
        <member name="F:Madingley.GridCell._Longitude">
            <summary>
            The longitude of this grid cell
            </summary>
        </member>
        <member name="F:Madingley.GridCell.RandomNumberGenerator">
            <summary>
            Instance of random number generator to take a time-dependent seed
            </summary>
        </member>
        <member name="F:Madingley.GridCell.Utilities">
            <summary>
            Instance of the class to perform general functions
            </summary>
        </member>
        <member name="M:Madingley.GridCell.#ctor(System.Single,System.UInt32,System.Single,System.UInt32,System.Single,System.Single,System.Collections.Generic.SortedList{System.String,Madingley.EnviroData},System.Double,Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.Collections.Generic.SortedList{System.String,System.Double},System.Boolean,System.Boolean)">
            <summary>
            Constructor for a grid cell; creates cell and reads in environmental data
            </summary>
            <param name="latitude">The latitude of the grid cell</param>
            <param name="latIndex">The latitudinal index of the grid cell</param>
            <param name="longitude">The longitude of the grid cell</param>
            <param name="lonIndex">The longitudinal index of the grid cell</param>
            <param name="latCellSize">The latitudinal dimension of the grid cell</param>
            <param name="lonCellSize">The longitudinal dimension of the grid cell</param>
            <param name="dataLayers">A list of environmental data variables in the model</param>
            <param name="missingValue">The missing value to be applied to all data in the grid cell</param>
            <param name="cohortFunctionalGroups">The definitions for cohort functional groups in the model</param>
            <param name="stockFunctionalGroups">The definitions for stock functional groups in the model</param>
            <param name="globalDiagnostics">A list of global diagnostic variables for the model grid</param>
            <param name="tracking">Whether process-tracking is enabled</param>
            <param name="specificLocations">Whether the model is being run for specific locations</param>
        </member>
        <member name="M:Madingley.GridCell.ConvertMissingValuesToZero(System.Double[],System.Double)">
            <summary>
            Converts any missing values to zeroes
            </summary>
            <param name="data">the data vector to convert</param>
            <param name="missingValue">Missing data value to be converted to zero</param>
            <returns>The data vector with any missing data values converted to zero</returns>
        </member>
        <member name="M:Madingley.GridCell.ContainsData(System.Double[],System.Double)">
            <summary>
            Checks if any non-missing value data exists in the vector data
            </summary>
            <param name="data">The data vector to be checked</param>
            <param name="missingValue">The missing value to which the data will be compared</param>
            <returns>True if non missing values are found, false if not</returns>
        </member>
        <member name="M:Madingley.GridCell.ContainsMissingValue(System.Double[],System.Double)">
            <summary>
            Checks if any non-missing value data exists in the vector data
            </summary>
            <param name="data">The data vector to be checked</param>
            <param name="missingValue">The missing value to which the data will be compared</param>
            <returns>True if non missing values are found, false if not</returns>
        </member>
        <member name="M:Madingley.GridCell.CalculateNPPSeasonality(System.Double[],System.Double)">
            <summary>
            Calculate monthly seasonality values of Net Primary Production - ignores missing values. If there is no NPP data (ie all zero or missing values)
            then assign 1/12 for each month.
            </summary>
            <param name="NPP">Monthly values of NPP</param>
            <param name="missingValue">Missing data value to which the data will be compared against</param>
            <returns>The contribution that each month's NPP makes to annual NPP</returns>
        </member>
        <member name="M:Madingley.GridCell.SeedGridCellCohortsAndStocks(Madingley.FunctionalGroupDefinitions,Madingley.FunctionalGroupDefinitions,System.Collections.Generic.SortedList{System.String,System.Double},System.Int64,System.Boolean,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Seed initial stocks and cohorts for this grid cell
            </summary>
            <param name="cohortFunctionalGroups">The functional group definitions for cohorts in the model</param>
            <param name="stockFunctionalGroups">The functional group definitions for stocks in the model</param>
            <param name="globalDiagnostics">A list of global diagnostic variables</param>
            <param name="nextCohortID">The ID number to be assigned to the next produced cohort</param>
            <param name="tracking">boolean to indicate if cohorts are to be tracked in this model</param>
            <param name="totalCellTerrestrialCohorts">The total number of cohorts to be seeded in each terrestrial grid cell</param>
            <param name="totalCellMarineCohorts">The total number of cohorts to be seeded in each marine grid cell</param>
            <param name="DrawRandomly">Whether the model is set to use random draws</param>
            <param name="ZeroAbundance">Set this parameter to 'true' if you want to seed the cohorts with zero abundance</param>
        </member>
        <member name="M:Madingley.GridCell.GetEnviroLayer(System.String,System.UInt32,System.Boolean@)">
            <summary>
            Gets the value in this grid cell of a specified environmental variable at a specified time interval
            </summary>
            <param name="variableName">The name of the environmental layer from which to extract the value</param>
            <param name="timeInterval">The index of the time interval to return data for (i.e. 0 if it is a yearly variable
            or the month index - 0=Jan, 1=Feb etc. - for monthly variables)</param>
            <param name="variableFound">Returns whether the variable was found in the cell environment</param>
            <returns>The value in this grid cell of a specified environmental variable at a specified time interval</returns>
        </member>
        <member name="M:Madingley.GridCell.SetEnviroLayer(System.String,System.UInt32,System.Double)">
            <summary>
            Sets the value in this grid cell of a specified environmental variable at a specified time interval
            </summary>
            <param name="variableName">The name of the environmental layer to set the value for</param>
            <param name="timeInterval">The index of the time interval to return data for (i.e. 0 if it is a yearly variable
            or the month index - 0=Jan, 1=Feb etc. - for monthly variables)</param>
            <param name="setValue">Value to set</param>
            <returns>Whether the variable was found in the cell environment</returns>
        </member>
        <member name="M:Madingley.GridCell.SetDelta(System.String,System.String,System.Double)">
            <summary>
            Sets the value in this grid cell of a delta of specified type and for a specified ecological process
            </summary>
            <param name="deltaType">The type of delta to set the value for: 'biomass', 'abundance', 'reproductivebiomass', 'organicpool' or 'respiratoryCO2pool</param>
            <param name="ecologicalProcess">The ecological process to set the value for</param>
            <param name="setValue">Value to set</param>
            <returns>Whether the delta type and ecological process were found within the cell deltas</returns>
        </member>
        <member name="M:Madingley.GridCell.SeedGridCellCohorts(Madingley.FunctionalGroupDefinitions@,System.Collections.Generic.SortedList{System.String,System.Double[]}@,System.Collections.Generic.SortedList{System.String,System.Double},System.Int64,System.Boolean,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Seed grid cell with cohorts, as specified in the model input files
            </summary>
            <param name="functionalGroups">The functional group definitions for cohorts in the grid cell</param>
            <param name="cellEnvironment">The environment in the grid cell</param>
            <param name="globalDiagnostics">A list of global diagnostic variables</param>
            <param name="nextCohortID">YThe unique ID to assign to the next cohort produced</param>
            <param name="tracking">boolean to indicate if cohorts are to be tracked in this model</param>
            <param name="totalCellTerrestrialCohorts">The total number of cohorts to be seeded in each terrestrial grid cell</param>
            <param name="totalCellMarineCohorts">The total number of cohorts to be seeded in each marine grid cell</param>
            <param name="DrawRandomly">Whether the model is set to use random draws</param>
            <param name="ZeroAbundance">Set this parameter to 'true' if you want to seed the cohorts with zero abundance</param>
        </member>
        <member name="M:Madingley.GridCell.SeedGridCellStocks(Madingley.FunctionalGroupDefinitions@,System.Collections.Generic.SortedList{System.String,System.Double[]}@,System.Collections.Generic.SortedList{System.String,System.Double})">
            <summary>
            Seed grid cell with stocks, as specified in the model input files
            </summary>
            <param name="functionalGroups">A reference to the stock functional group handler</param>
            <param name="cellEnvironment">The environment in the grid cell</param>
            <param name="globalDiagnostics">A list of global diagnostic variables for the model grid</param>
        </member>
        <member name="P:Madingley.GridCell.GridCellCohorts">
            <summary>
            Get or set the cohorts in this grid cell
            </summary>
        </member>
        <member name="P:Madingley.GridCell.GridCellStocks">
            <summary>
            Get or set the stocks in this grid cell
            </summary>
        </member>
        <member name="P:Madingley.GridCell.CellEnvironment">
            <summary>
            Get the environmental data for this grid cell
            </summary>
        </member>
        <member name="P:Madingley.GridCell.Deltas">
            <summary>
            Get the delta biomasses and abundances for this grid cell
            </summary>
        </member>
        <member name="P:Madingley.GridCell.Latitude">
            <summary>
            Get the latitude of this grid cell
            </summary>
        </member>
        <member name="P:Madingley.GridCell.Longitude">
            <summary>
            Get the longitude of this grid cell
            </summary>
        </member>
        <member name="T:Madingley.Program">
            <summary>
            The entry point for the model
            <todoM>Write model output to an output file</todoM>
            </summary>
        </member>
        <member name="M:Madingley.Program.Main">
            <summary>
            Starts a model run or set of model runs
            </summary>
        </member>
        <member name="T:Timing.StopWatch">
            <summary>
            Timer to track time elapsed
            </summary>
        </member>
        <member name="F:Timing.StopWatch._AccumulatedTime">
            <summary>
            The time accumulated by a given stopwatch instance
            </summary>
        </member>
        <member name="F:Timing.StopWatch.startTime">
            <summary>
            The start time of a given stopwatch run
            </summary>
        </member>
        <member name="F:Timing.StopWatch.stopTime">
            <summary>
            The stop time of a given stopwatch run
            </summary>
        </member>
        <member name="F:Timing.StopWatch.running">
            <summary>
            Whether the stopwatch is running
            </summary>
        </member>
        <member name="M:Timing.StopWatch.Start">
            <summary>
            Start the stopwatch
            </summary>
        </member>
        <member name="M:Timing.StopWatch.Stop">
            <summary>
            Stop the stopwatch
            </summary>
        </member>
        <member name="M:Timing.StopWatch.GetElapsedTime">
            <summary>
            Get the non-cumulative elapsed time of a stopwatch run in milliseconds
            </summary>
            <returns>Elapsed time since stopwatch started in milliseconds</returns>
        </member>
        <member name="M:Timing.StopWatch.GetElapsedTimeSecs">
            <summary>
            Get the non-cumulative elapsed time of a stopwatch run in seconds
            </summary>
            <returns>Elapsed time since stopwatch started in seconds</returns>
        </member>
        <member name="P:Timing.StopWatch.AccumulatedTime">
            <summary>
            Get or set the time accumulated by a given stopwatch instance
            </summary>
        </member>
    </members>
</doc>
